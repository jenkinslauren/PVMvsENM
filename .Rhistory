library(readxl)
evalscore <- read_excel("evalscoreswithid.xlsx",
col_types = c("numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(evalscore)
mean(evalscore$q3, na.rm = TRUE)
summary(evalscore$q3)
summary(evalscore$q1)
summary(evalscore$q2)
summary(evalscore$q3)
summary(evalscore$q4)
q3female <- evalscore[gender == "F"]
q3female <- evalscore["gender" == "F"]
q3female
q3female <- evalscore["gender" == F]
q3female
q3female<-q3["gender"=="F"]
mean( q3[ gender == “M" ], na.rm = TRUE)
mean( q3[ "gender" == “M" ], na.rm = TRUE)
mean( q3[ "gender" == "M" ], na.rm = TRUE)
q3female<-c(evalscore$gender[1:3, 5])
q3female<-c(evalscore$gender[1:5])
q3female<-c(evalscore$gender[1:3],evalscore$gender[5])
q3female
q3female<-c(evalscore$gender[1:3],evalscore$gender[5])
mean(q3female)
mean[q3[score$gender=="F" & is.na(q3) =="FALSE"]
]
mean[q3[evalscore$gender=="F" & is.na(q3) =="FALSE"]]
mean[q3[evalscore$gender=="F"]
]
mean evalscore$q3[evalscore$gender=="F"]
mean(evalscore$q3[evalscore$gender=="F"])
sd((evalscore$q3[evalscore$gender=="F"]))
sd(evalscore$q3[evalscore$gender=="F"])
pre_post<-evalscore$pretest-evalscore$posttest
pre_post<-evalscore$posttest-evalscore$pretest
mean(pre_post[evalscore$gender=="F"])
mean(pre_post[evalscore$gender=="M"])
library(readxl)
classsurvey <- read_excel("Class survey (Five semester combined).xlsx")
View(classsurvey)
mean(siblings)
mean(classsurvey$Siblings)
mean(classsurvey$Siblings, na.rm = "TRUE")
mean(classsurvey$`Shoe Size`[classsurvey$`Birth Order` == "First"])
mean(classsurvey$`Shoe Size`[classsurvey$`Birth Order` == "First"], na.rm == "TRUE")
mean(classsurvey$`Shoe Size`[classsurvey$`Birth Order` == "First", na.rm == "TRUE"])
firstborn <- na.omit(classsurvey$`Birth Order`=="First")
mean(classsurvey$`Shoe Size`[firstborn])
y<-na.omit(classsurvey$`Shoe Size`)
y<-na.omit(classsurvey$`Hours of Sleep`)
y<-na.omit(classsurvey$`Shoe Size`)
x<-na.omit(classsurvey$`Hours of Sleep`)
xI %*% x
inv(x) * x
library(matlib)
install.packages(matlib)
install.packages("matlib")
library(matlib)
library(matlib)
xinv<-x*inv(x)
inv(x)
install.packages("matlib")
inv(x)
x
t(x)
transx<-t(x)
transx*x
y<-t(x)*x
inv(y)
inverse(y)
qr.solve(y) %*% y
y
iY <- exp.mat(y, -1)
install.packages("MAT")
iY <- exp.mat(y, -1)
sourse("exp.mat.R")
source("exp.mat.R")
install.packages("MASS")
library(MASS)
inv<-ginv(y)
inv %*% y
y<-na.omit(classsurvey$`Shoe Size`)
inv*t(x)*y
t(x)*y
z<-t(x)*y
z*inv
xx<-t(x)*x
inv(xx)
solve(crossprod(xx))
female<-na.omit(classsurvey$Sex=="f")
male<-na.omit(classsurvey$Sex=="m")
mean(classsurvey$`Height`[female])>mean(classsurvey$`Height`[male])
mean(classsurvey$`Height`[female])
mean(classsurvey$`Height`[female], na.rm=="TRUE")
mean(classsurvey$`Height`, na.rm=="TRUE")
mean(classsurvey$`Height`, na.rm = "TRUE")
mean(classsurvey$`Height`[female], na.rm=="TRUE")
mean(classsurvey$`Height`[female], na.rm = "TRUE")
mean(classsurvey$`Height`[male], na.rm = "TRUE")
mean(classsurvey$`Height`[female], na.rm = "TRUE") > mean(classsurvey$`Height`[male], na.rm = "TRUE")
View(classsurvey)
View(classsurvey)
library(readxl)
evalscoreswithid <- read_excel("evalscoreswithid.xlsx")
View(evalscoreswithid)
freshman<-classsurvey$Semester[0:2]
freshman<-classsurvey$`Hours of Sleep`(classsurvey$Semester[0:2])
freshman<-classsurvey$`Hours of Sleep`(Semester[0:2])
freshman<-classsurvey$`Hours of Sleep`(classsurvey$Semester[0:2])
freshman<-classsurvey$`Hours of Sleep`(classsurvey$Semester==0, classsurvey$Semester==1, classsurvey$Semester==2)
freshman<-classsurvey$`Hours of Sleep`(classsurvey$Semester==(0:2))
freshman<-classsurvey$`Hours of Sleep`(classsurvey$Semester==[0:2])
freshman<-classsurvey$Semester(c(0, 1, 2))
freshman<-classsurvey$Semester(0,1,2)
freshman<-classsurvey$Semester(0:2)
freshman<-classsurvey$Semester[0:2]
freshmansleep<-classsurvey$`Hours of Sleep`(freshman)
freshman<-subset(classsurvey, Semester<=2, select = `Hours of sleep`)
freshman<-subset(classsurvey, Semester<=2, select = `Hours of Sleep`)
sophomore<-subset(classsurvey, Semester=3 | Semester=4, select = `Hours of Sleep`)
sophomore<-subset(classsurvey, Semester==3 | Semester==4, select = `Hours of Sleep`)
junior<-subset(classsurvey, Semester==5 | Semester==6, select = `Hours of Sleep`)
senior<-subset(classsurvey, Semester>=7, select = `Hours of Sleep`)
freshman
View(freshman)
freshman$year<-freshman
freshman$year<-reshman
freshman$year<-"Freshman"
sophomore$year<-"Sophomore"
junior$year<-"Junior"
Senior$year<-"Senior"
senior$year<-"Senior"
total<-rbind(freshman,sophomore,junior,senior)
total
View(total)
barplot(mergedSleep)
barplot(total)
barplot(total$`Hours of Sleep`)
barplot(total$`year`)
total<-rbind(mean(freshman$`Hours of Sleep`), mean(sophomore$`Hours of Sleep`), mean(junior$`Hours of Sleep`), mean(senior$`Hours of Sleep`))
View(total)
hist(total)
barplot(total)
barplot(total, main = "Hours of Sleep by Class", ylab = "Average")
merged<-rbind(freshman,sophomore,junior,senior)
barTest<-table(merged$year)
barplot(barTest, main = "Hours of Sleep by Class")
barTest<-table(mean(merged$year)
)
barplot(mean(barTest), main = "Hours of Sleep by Class")
barTest<-table(mean(merged$`Hours of Sleep`)
)
barplot(mean(barTest), main = "Hours of Sleep by Class")
barTest<-table(mean(merged$year)
)
barTest<-table(merged$year)
barTest
barTest<-table(merged$`Hours of Sleep`)
barTest
View(barTest)
total<-rbind(mean(freshman$`Hours of Sleep`), mean(sophomore$`Hours of Sleep`), mean(junior$`Hours of Sleep`), mean(senior$`Hours of Sleep`))
View(total)
total$year->year
total$year->"year"
total$year->c("year")
total$year->c("Freshman", "Sophomore", "Junior", "Senior")
total$year<-c("Freshman", "Sophomore", "Junior", "Senior")
total<-rbind(mean(freshman$`Hours of Sleep`), mean(sophomore$`Hours of Sleep`), mean(junior$`Hours of Sleep`), mean(senior$`Hours of Sleep`))
df <- data.frame(Year = c("Freshman", "Sophomore", "Junior", "Senior"), Hours=c(mean(freshman$`Hours of Sleep`), mean(sophomore$`Hours of Sleep`), mean(junior$`Hours of Sleep`), mean(senior$`Hours of Sleep`)))
View(df)
hist(df)
barplot(df)
barplot(df$Year)
barplot(df$Hours)
hours<-table(df$Hours)
barplot(hours, main = "Hours of Sleep by Class")
year<-table(df$Year)
barplot(year, main = "Hours of Sleep by Class", xlab="Year")
barplot(df, main = "Hours of Sleep by Class", xlab = "Year", ylab = "Hours of Sleep")
barplot(df$Hours, main = "Hours of Sleep by Class", xlab = "Year", ylab = "Hours of Sleep")
hist(df)
hist(df$Hours)
df <- data.frame(Hours=c(mean(freshman$`Hours of Sleep`), mean(sophomore$`Hours of Sleep`), mean(junior$`Hours of Sleep`), mean(senior$`Hours of Sleep`)), Year = c("Freshman", "Sophomore", "Junior", "Senior"))
hist(df)
View(df)
barplot(df)
hist(df$Hours)
barplot(df$Hours)
barplot(df$Hours,
main = "Hours of Sleep by Class",
xlab = "Class",
ylab = "Hours of sleep",
names.arg = c("Freshman", "Sophomore", "Junior", "Senior"))
barplot(df$Year,
main = "Hours of Sleep by Class",
xlab = "Class",
ylab = "Hours of sleep",
names.arg = c("Freshman", "Sophomore", "Junior", "Senior"))
barplot(df,
main = "Hours of Sleep by Class",
xlab = "Class",
ylab = "Hours of sleep",
names.arg = c("Freshman", "Sophomore", "Junior", "Senior"))
barplot(table(df),
main = "Hours of Sleep by Class",
xlab = "Class",
ylab = "Hours of sleep",
names.arg = c("Freshman", "Sophomore", "Junior", "Senior"))
barplot(table(df$Hours),
main = "Hours of Sleep by Class",
xlab = "Class",
ylab = "Hours of sleep",
names.arg = c("Freshman", "Sophomore", "Junior", "Senior"))
summary(df)
barplot(table(hours))
barplot(table(df$Hours))
barplot(table(df$Year))
install.packages("ggpubr")
library(ggpubr)
ggbarplot(df, x = "Year", y = "Hours of Sleep")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggpubr)
install.packages("dplyr")
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
rm(list = ls())
library(raster)
library(enmSdm)
library(dplyr)
library(terra)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
load('./PCA_Beyer')
rm(list = ls())
library(raster)
library(enmSdm)
library(dplyr)
library(terra)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
envDataPca <- load('./data_and_analyses/env_data/Beyer/tifs/pca_output.tif')
envDataPca <- brick(envDataPca)
envDataPca <- brick('./data_and_analyses/env_data/Beyer/tifs/pca_output.tif')
plot(envDataPca)
sAmerica <- shapefile(system.file('/Users/laurenjenkins/Downloads/shp_files/South_America.shp',
package = 'raster'))
sAmerica <- raster::shapefile(system.file('/Users/laurenjenkins/Downloads/shp_files/South_America.shp',
package = 'raster'))
sAmerica <- raster::shapefile(system.file('./data_and_analyses/study_region/South_America.shp',
package = 'raster'))
sAmerica <- shapefile(system.file('./data_and_analyses/study_region/South_America.shp'))
sAmerica <- shapefile('./data_and_analyses/study_region/South_America.shp',
package = 'raster')
sAmerica <- shapefile('./data_and_analyses/study_region/South_America.shp',
package = 'raster')
sAmerica <- shapefile(system.file('./data_and_analyses/study_region/South_America.shp'),
package = 'raster')
sAmerica <- readOGR(dsn = './data_and_analyses/study_region/South_America.shp', layer = "SHAPEFILE")
library(rgdal)
sAmerica <- readOGR(dsn = './data_and_analyses/study_region/South_America.shp', layer = "SHAPEFILE")
sAmerica <- readOGR(dsn = './data_and_analyses/study_region/South_America.shp',
verbose = FALSE)
nAmerica <- readOGR(dsn = './data_and_analyses/study_region/North_America.shp',
verbose = FALSE)
sAmerica <- raster(readOGR(dsn = './data_and_analyses/study_region/South_America.shp',
verbose = FALSE))
nAmerica <- raster(readOGR(dsn = './data_and_analyses/study_region/North_America.shp',
verbose = FALSE))
plot(sAmerica)
sAmerica <- readOGR(dsn = './data_and_analyses/study_region/South_America.shp',
verbose = FALSE)
nAmerica <- readOGR(dsn = './data_and_analyses/study_region/North_America.shp',
verbose = FALSE)
View(nAmerica)
plot(sAmerica)
studyRegion <- bind(sAmerica, nAmerica)
View(envDataPca)
plot(envDataPca[[1]])
x <- crop(envDataPca[[1]], studyRegion)
for (layer in envDataPca) {
crop(layer, studyRegion)
}
length(envDataPca)
nlayers(envDataPca)
for (i in 1:nlayers(envDataPca)) {
envDataPca[[i]] <- crop(envDataPca[[i]], studyRegion)
}
plot(envDataPca)
plot(x)
x <- crop(envDataPca[[1]], studyRegion)
x2 <- mask(x, studyRegion)
plot(x2)
x <- crop(envDataPca[[1]], extent(studyRegion))
x2 <- mask(x, studyRegion)
plot(x2)
sAmerica <- rgdal::readOGR(dsn = './data_and_analyses/study_region', 'South_America')
nAmerica <- rgdal::readOGR(dsn = './data_and_analyses/study_region', 'North_America')
studyRegion <- bind(sAmerica, nAmerica)
x <- crop(envDataPca[[1]], extent(studyRegion))
x2 <- mask(x, studyRegion)
plot(envDataPca)
plot(x2)
x <- crop(envDataPca[[1]], studyRegion)
x2 <- mask(x, studyRegion)
plot(x)
plot(x2)
studyExtent <- extent(studyRegion)
x <- crop(envDataPca[[1]], studyExtent)
plot(x)
x <- setMinMax(x)
projection(x) <-
'+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
plot(x)
plot(studyExtent)
sp::plot(studyRegion)
save(studyExtent, file='./data_and_analyses/study_region/Study Region Extent.Rdata', compress=TRUE)
pc1 <- envDataPca[[1]]
x <- crop(pc1, studyExtent)
projection(studyRegion) <- getCRS("WGS84")
studyExtent <- extent(studyRegion)
save(studyExtent, file='./data_and_analyses/study_region/Study Region Extent.Rdata', compress=TRUE)
pc1 <- envDataPca[[1]]
x <- crop(pc1, studyExtent)
x <- setMinMax(pc1)
projection(x) <- getCRS("WGS84")
x2 <- mask(x, studyExtent)
plot()
plot(x)
plot(studyExtent)
plot(studyRegion)
x <- crop(pc1, studyRegion)
x <- setMinMax(pc1)
projection(x) <- getCRS("WGS84")
x2 <- mask(x, studyExtent)
x2 <- mask(x, studyRegion)
plot(x2)
plot(studyRegion)
plot(pc1, add = TRUE)
plot(pc1)
plot(studyRegion, add = TRUE)
studyRegion <- rgdal::readOGR(dsn = './data_and_analyses/study_region', 'study_region')
crs(studyRegion)
studyExtent <- extent(studyRegion)
save(studyExtent, file='./data_and_analyses/study_region/Study Region Extent.Rdata', compress=TRUE)
plot(studyRegion)
pc1 <- envDataPca[[1]]
x <- crop(pc1, studyRegion)
plot(x)
x <- setMinMax(pc1)
projection(x) <- getCRS("WGS84")
plot(x)
x <- crop(pc1, studyExtent)
plot(x)
x <- crop(pc1, studyExtent)
plot(x)
plot(studyRegion)
x <- crop(pc1, studyExtent)
x <- setMinMax(pc1)
projection(x) <- getCRS("WGS84")
x <- crop(pc1, studyExtent)
pc1 <- crop(pc1, studyExtent)
pc1 <- setMinMax(pc1)
projection(pc1) <- getCRS("WGS84")
plot(pc1)
pc1 <- envDataPca[[1]]
pc1 <- crop(studyExtent, pc1)
pc1 <- crop(studyRegion, pc1)
pc1 <- setMinMax(pc1)
plot(pc11)
plot(pc1)
pc1 <- crop(pc1, studyRegion)
pc1 <- setMinMax(pc1)
pc1 <- mask(pc1, studyExtent)
pc1 <- envDataPca[[1]]
pc1 <- crop(pc1, studyRegion)
pc1 <- mask(pc1, studyExtent)
pc1 <- taster::mask(pc1, studyExtent)
pc1 <- raster::mask(pc1, studyExtent)
studyExtent <- extent(studyRegion)
pc1 <- raster::mask(pc1, studyExtent)
pc1
envDataPca[[1]]
studyExtent
studyRegion
plot(ext.ras, xlim = c( -178.2166,180), ylim= c(60,83.6236), col="red")
ext.ras <- extent(-180, 180, -60, 90)
ext.study <- extent(-178.2166, 179.7759, -55.90223, 83.6236)
plot(ext.ras, xlim = c( -178.2166,180), ylim= c(60,83.6236), col="red")
plot(ext.study, add=T, col="blue")
plot(studyRegion)
library(maps)
map("state", add = TRUE)
map("alaska", add = TRUE)
map("usa", add = TRUE)
plot(crop(studyExtent, extent(-178.2166, 83.7759, -55.90223, 83.6236)))
x <- crop(studyExtent, extent(-178.2166, 83.7759, -55.90223, 83.6236))
x <- crop(studyRegion, extent(-178.2166, 83.7759, -55.90223, 83.6236))
plot(x)
studyRegion <- rgdal::readOGR(dsn = './data_and_analyses/study_region', 'study_region')
studyRegion <- crop(studyRegion, extent(-178.2166, 83.7759, -55.90223, 83.6236))
projection(studyRegion) <- getCRS("WGS84")
studyExtent <- extent(studyRegion)
save(studyExtent, file='./data_and_analyses/study_region/Study Region Extent.Rdata', compress=TRUE)
pc1 <- envDataPca[[1]]
pc1 <- crop(pc1, studyRegion)
projection(pc1) <- getCRS("WGS84")
plot(pc1)
for (i in 1:nlayers(envDataPca)) {
envDataPca[[i]] <- crop(envDataPca[[i]], studyRegion)
projection(envDataPca[[i]]) <- getCRS("WGS84")
}
for (i in 1:nlayers(envDataPca)) {
x <- envDataPca[[i]]
x <- crop(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataPca[[i]] <- x
}
pc1 <- envDataPca[[1]]
pc1 <- crop(pc1, studyRegion)
projection(pc1) <- getCRS("WGS84")
plot(pc1)
envDataClipped <- list()
for (i in 1:nlayers(envDataPca)) {
x <- envDataPca[[i]]
x <- crop(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[i]] <- x
}
plot(stack(envDataClipped))
envData <- stack(envDataClipped)
pc1 <- envDataPca[[1]]
pc1 <- crop(pc1, studyRegion)
pc1 <- mask(pc1, studyExtent)
pc1 <- mask(pc1, studyRegion)
plot(pc1)
envDataClipped <- list()
for (i in 1:nlayers(envDataPca)) {
x <- envDataPca[[i]]
x <- mask(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[i]] <- x
}
envData <- stack(envDataClipped)
plot(envData)
x <- envDataPca[[1]]
x <- crop(x, studyExtent)
x <- mask(x, studyRegion)
plot(x)
envDataClipped <- list()
for (i in 1:nlayers(envDataPca)) {
x <- envDataPca[[i]]
x <- crop(x, studyExtent)
x <- mask(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[i]] <- x
}
envData <- stack(envDataClipped)
plot(envData)
species <- 'fraxinus_pennsylvanica'
records <- paste0('/species_records/02_', species, '_thinned_records.rData')
records <- load(records)
records <- paste0('./species_records/02_', species, '_thinned_records.rData')
records <- load(records)
records[1]
records <- readRDS(records)
load(records)
records <- paste0('./species_records/02_', species, '_thinned_records.rData')
load(records)
records <- finalThinned
# match environmental data to records
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
envSpecies <- as.data.frame(envSpecies)
records <- cbind(records, envSpecies)
if (any(is.na(rowSums(envSpecies)))) records <-
records[-which(is.na(rowSums(envSpecies))), ]
plot(finalThinned)
finalThinned <- SpatialPointsDataFrame(thinned[, ll], data = finalThinned,
proj4 = getCRS('nad27', TRUE))
# load data for focal species
ll <- c('longitude', 'latitude')
finalThinned <- SpatialPointsDataFrame(thinned[, ll], data = finalThinned,
proj4 = getCRS('nad27', TRUE))
finalThinned <- SpatialPointsDataFrame(finalThinned[, ll], data = finalThinned,
proj4 = getCRS('wgs84', TRUE))
plot(finalThinned, pch = 16, cex = 0.5, col = "red",
main = 'BIEN occurrences thinned')
map("state", add = TRUE)
map("world", add = TRUE)
plot(envSpecies, col = 'blue', add = TRUE)
finalThinned <- SpatialPointsDataFrame(finalThinned[, ll], data = finalThinned,
proj4 = getCRS('wgs84', TRUE))
envSpecies <- SpatialPointsDataFrame(envSpecies[, ll], data = envSpecies,
proj4 = getCRS('wgs84', TRUE))
View(records)
records <- finalThinned # 515 observations
# match environmental data to records
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
envSpecies <- as.data.frame(envSpecies)
records <- cbind(records, envSpecies)
View(records)
if (any(is.na(rowSums(envSpecies)))) water <-
records[which(is.na(rowSums(envSpecies))), ]
finalThinned <- SpatialPointsDataFrame(finalThinned[, ll], data = finalThinned,
proj4 = getCRS('wgs84', TRUE))
plot(finalThinned, pch = 16, cex = 0.5, col = "red",
main = 'BIEN occurrences thinned')
plot(water, col = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
