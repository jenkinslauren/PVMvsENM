folders <- append(folders,
file.path('data_and_analyses','env_data','Beyer','tifs', paste0('BIO', i)))
}
folders <- append(folders,
file.path('data_and_analyses','env_data','Beyer','tifs', 'cloudiness'))
folders <- append(folders,
file.path('data_and_analyses','env_data','Beyer','tifs', 'relative_humidity'))
climYears <- seq(1000, 21000, by=1000)
envList <- list()
envYears <- function(yr) {
return(unlist(sapply(folders, function(folder) {
paste0('./', list.files(folder, pattern = paste0("_", yr, "ybp.tif"), full.names=TRUE))
})))
}
envList <- append(envList, lapply(climYears, envYears))
names <- list()
for (n in length(names(TSEnv$study))){
for(i in (1:21)[-c(2,3)]) {
for (yr in c(0,climYears)) {
if (i == 20) {
names <- append(names, paste0("cloudiness", "_", yr, "ybp"))
} else if (i == 21) {
names <- append(names, paste0("relative_humidity", "_", yr, "ybp"))
} else {
names <- append(names, paste0("BIO", i, "_", yr, "ybp"))
}
names(TSEnv$study) <- c(names)
prediction <- PredictEnv(studylayers = TSEnv$study,
futurelayers = envList,
time_periods = c(0, climYears),
output = envoutput,
scenario_name = "Beyer")
class(TSEnv$training)
length(occlist)
occlist <- list.files('./megaSDM_TestRun', pattern = '.csv', full.names = T)
occ_output <- "./megaSDM_TestRun/occurrences"
length(occlist)
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
View(SpeciesOcc)
SpeciesSplit <- unlist(strsplit(occlist[1], "/", fixed = TRUE))
SpeciesName <- substr(SpeciesSplit[length(SpeciesSplit)], 1,
nchar(SpeciesSplit[length(SpeciesSplit)]) - 4)
SpecCol <- grep(paste0("^", SpeciesName, "$|", "^", gsub("_", " ", SpeciesName), "$"),
SpeciesOcc[1,])
if (length(SpecCol) == 1) {
names(SpeciesOcc)[SpecCol] <- "Species"
} else {
SpeciesOcc$Species <- rep(SpeciesName, nrow(SpeciesOcc))
}
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName)
}
lapply(speciesList, toCSV)
occlist <- list.files('./megaSDM_TestRun', pattern = '.csv', full.names = T)
occ_output <- "./megaSDM_TestRun/occurrences"
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
SpeciesSplit <- unlist(strsplit(occlist[s], "/", fixed = TRUE))
SpeciesSplit <- unlist(strsplit(occlist[1], "/", fixed = TRUE))
SpeciesName <- substr(SpeciesSplit[length(SpeciesSplit)], 1,
nchar(SpeciesSplit[length(SpeciesSplit)]) - 4)
SpecCol <- grep(paste0("^", SpeciesName, "$|", "^", gsub("_", " ", SpeciesName), "$"),
SpeciesOcc[1,])
if (length(SpecCol) == 1) {
names(SpeciesOcc)[SpecCol] <- "Species"
} else {
SpeciesOcc$Species <- rep(SpeciesName, nrow(SpeciesOcc))
}
names(SpeciesOcc)[c(grep("lon", tolower(names(SpeciesOcc))),
grep("^x$", tolower(names(SpeciesOcc))))] <- "Longitude"
names(SpeciesOcc)[c(grep("lat", tolower(names(SpeciesOcc))),
grep("^y$", tolower(names(SpeciesOcc))))] <- "Latitude"
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = F)
}
lapply(speciesList, toCSV)
rm(toCSV)
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = FALSE)
}
lapply(speciesList, toCSV)
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = FALSE)
}
lapply(speciesList, toCSV)
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
occlist <- list.files('./megaSDM_TestRun', pattern = '.csv', full.names = T)
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
#Determines the species name from the name of the occurrence file
SpeciesSplit <- unlist(strsplit(occlist[1], "/", fixed = TRUE))
SpeciesName <- substr(SpeciesSplit[length(SpeciesSplit)], 1,
nchar(SpeciesSplit[length(SpeciesSplit)]) - 4)
#Matches the species name to the correct column and renames it "Species"
SpecCol <- grep(paste0("^", SpeciesName, "$|", "^", gsub("_", " ", SpeciesName), "$"),
SpeciesOcc[1,])
#Adds a new column with species names if it doesn't already exist
if (length(SpecCol) == 1) {
names(SpeciesOcc)[SpecCol] <- "Species"
} else {
SpeciesOcc$Species <- rep(SpeciesName, nrow(SpeciesOcc))
}
#Matches the lat/long columns and renames them to standardize
names(SpeciesOcc)[c(grep("lon", tolower(names(SpeciesOcc))),
grep("^x$", tolower(names(SpeciesOcc))))] <- "Longitude"
names(SpeciesOcc)[c(grep("lat", tolower(names(SpeciesOcc))),
grep("^y$", tolower(names(SpeciesOcc))))] <- "Latitude"
#Takes only the species name and the coordinates for reprojection
SpeciesCoords <- SpeciesOcc[, c("Species", "Longitude", "Latitude")]
View(SpeciesCoords)
if ((max(SpeciesCoords$Longitude) > 180) | (max(SpeciesCoords$Latitude) > 90) |
(min(SpeciesCoords$Longitude) < -180) | (min(SpeciesCoords$Latitude) < -90)) {
stop("The species occurrence points are not given in latitude/longitude form. Reproject species occurrences to a latlon projection")
} else {
print("All good!")
}
occ_output <- "./megaSDM_TestRun/occurrences"
OccurrenceManagement(occlist = occlist,
output = occ_output,
envextract = TRUE,
envsample = TRUE,
nbins = 25,
envdata = TSEnv$training)
buff_output <- "megaSDM_TestRun/buffers"
BackgroundBuffers(occlist = occlist,
envdata = TSEnv$training,
buff_output,
ncores = 1)
occlist <- list.files(occ_output, pattern = ".csv", full.names = TRUE)
buff_output <- "megaSDM_TestRun/buffers"
BackgroundBuffers(occlist = occlist,
envdata = TSEnv$training,
buff_output,
ncores = 1)
# 10,000 background points
nbg <- 10000
# proportion of the background points sampled from within buffers
spatial_weights <- 0.5
# random or environmentally subsampled (Varela)?
sampleMethods <- "Varela"
bufflist <- list.files(buff_output, pattern = ".shp$", full.names = TRUE)
bg_output <- "megaSDM_TestRun/backgrounds"
BackgroundPoints(spplist = spplist,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 2)
BackgroundPoints(spplist = speciesList,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 1)
# random or environmentally subsampled (Varela)?
sampleMethod <- "Varela"
BackgroundPoints(spplist = speciesList,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 1)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(tidyr)
library(raster)
library(rgdal)
library(enmSdm)
library(terra)
library(maxnet)
library(sf)
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
# load PCA data
load('./PCA_Beyer')
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# gcm <- 'Beyer'
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
# speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
#                  'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
#                  'Fraxinus profunda', 'Fraxinus quadrangulata')
speciesList <- c('Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
gcmList <- c('Beyer')
for (gcm in gcmList) {
gcm <- gcm
a <- 1
for(i in 1:length(speciesList)) {
rm(list= ls()[!(ls() %in% c('gcm','pc', 'predictors', 'speciesList', 'a'))])
sp <- speciesList[a]
# load('./workspaces/01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
species <- gsub(tolower(sp), pattern=' ', replacement='_')
print(paste0("Species = ", species))
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
# load bg sites, records, and rangeMap
load(paste0('./Background Sites/Random Background Sites across Study Region - ',
speciesAb, '_', gcm, '.Rdata'))
load(paste0('./Models/Maxent/model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
load(paste0('./regions/little_range_map/', rangeName, '.Rdata'))
# calculate k-folds for presences and background sites
kPres <- kfold(records, k = 5)
kBg <- kfold(randomBg, k = 5)
# visualize fold #1
plot(rangeMap, main = paste0(sp, ', k-fold #1'))
points(records$longitude, records$latitude)
points(records$longitude[kPres==1],
records$latitude[kPres==1],
bg='red',
pch=21
)
legend('topright',
legend=c('Training presence', 'Test presence'),
pch=c(1, 16),
col=c('black', 'red'),
bg='white',
cex=0.8
)
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
# create an output directory
dir.create(folderName, recursive = TRUE, showWarnings = FALSE)
# place to store auc & cbi output
aucRandom <- cbiRandom <- rep(NA, 5)
# for each k-fold
for(i in 1:5) {
print(paste0('K-fold ', i, ':'))
# create training data, with presences/absences vector of 0/1 with all points
# EXCEPT the ones in the fold
envData <- rbind(records[kPres != i, predictors], randomBg[kBg != i, predictors])
presBg <- c(rep(1, sum(kPres != i)), rep(0, sum(kBg != i)))
trainData <- cbind(presBg, envData)
# load(paste0(folderName, '/Model ', i, '.Rdata'))
model <- enmSdm::trainMaxNet(data = trainData, resp = 'presBg')
save(model, file = paste0(folderName, '/Model ', i, '.Rdata'))
# predict presences & background sites
predPres <- raster::predict(model,
newdata = records[kPres == i,],
clamp = F,
type = 'cloglog')
predBg <- raster::predict(model,
newdata = randomBg[kPres == i,],
clamp = F,
type = 'cloglog')
# evaluate
thisEval <- evaluate(p = as.vector(predPres), a = as.vector(predBg))
thisAuc <- thisEval@auc
thisCbi <- contBoyce(pres = predPres, bg = predBg)
print(paste('AUC = ', round(thisAuc, 2), ' | CBI = ', round(thisCbi, 2)))
aucRandom[i] <- thisAuc
cbiRandom[i] <- thisCbi
}
save(aucRandom, cbiRandom, file = paste0(folderName, '/auc_cbi_vals.Rdata'))
a <- a + 1
}
# Model Evaluation
# Date: 18 Feb 2022
# Author: Lauren Jenkins
# 9 March 2022
# Stopped before frax_greg for 'Lorenz_ccsm'
# still have all of 'ecbilt' to do
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# gcm <- 'Beyer'
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
gcmList <- c('Lorenz_ccsm')
for (gcm in gcmList) {
gcm <- gcm
a <- 1
for(i in 1:length(speciesList)) {
rm(list= ls()[!(ls() %in% c('gcm','pc', 'predictors', 'speciesList', 'a'))])
sp <- speciesList[a]
# load('./workspaces/01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
species <- gsub(tolower(sp), pattern=' ', replacement='_')
print(paste0("Species = ", species))
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
# load bg sites, records, and rangeMap
load(paste0('./Background Sites/Random Background Sites across Study Region - ',
speciesAb, '_', gcm, '.Rdata'))
load(paste0('./Models/Maxent/model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
load(paste0('./regions/little_range_map/', rangeName, '.Rdata'))
# calculate k-folds for presences and background sites
kPres <- kfold(records, k = 5)
kBg <- kfold(randomBg, k = 5)
# visualize fold #1
plot(rangeMap, main = paste0(sp, ', k-fold #1'))
points(records$longitude, records$latitude)
points(records$longitude[kPres==1],
records$latitude[kPres==1],
bg='red',
pch=21
)
legend('topright',
legend=c('Training presence', 'Test presence'),
pch=c(1, 16),
col=c('black', 'red'),
bg='white',
cex=0.8
)
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
# create an output directory
dir.create(folderName, recursive = TRUE, showWarnings = FALSE)
# place to store auc & cbi output
aucRandom <- cbiRandom <- rep(NA, 5)
# for each k-fold
for(i in 1:5) {
print(paste0('K-fold ', i, ':'))
# create training data, with presences/absences vector of 0/1 with all points
# EXCEPT the ones in the fold
envData <- rbind(records[kPres != i, predictors], randomBg[kBg != i, predictors])
presBg <- c(rep(1, sum(kPres != i)), rep(0, sum(kBg != i)))
trainData <- cbind(presBg, envData)
# load(paste0(folderName, '/Model ', i, '.Rdata'))
model <- enmSdm::trainMaxNet(data = trainData, resp = 'presBg')
save(model, file = paste0(folderName, '/Model ', i, '.Rdata'))
# predict presences & background sites
predPres <- raster::predict(model,
newdata = records[kPres == i,],
clamp = F,
type = 'cloglog')
predBg <- raster::predict(model,
newdata = randomBg[kPres == i,],
clamp = F,
type = 'cloglog')
# evaluate
thisEval <- evaluate(p = as.vector(predPres), a = as.vector(predBg))
thisAuc <- thisEval@auc
thisCbi <- contBoyce(pres = predPres, bg = predBg)
print(paste('AUC = ', round(thisAuc, 2), ' | CBI = ', round(thisCbi, 2)))
aucRandom[i] <- thisAuc
cbiRandom[i] <- thisCbi
}
save(aucRandom, cbiRandom, file = paste0(folderName, '/auc_cbi_vals.Rdata'))
a <- a + 1
}
# Model Evaluation
# Date: 18 Feb 2022
# Author: Lauren Jenkins
# 9 March 2022
# Stopped before frax_greg for 'Lorenz_ccsm'
# still have all of 'ecbilt' to do
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# gcm <- 'Beyer'
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
gcmList <- c('ecbilt')
for (gcm in gcmList) {
gcm <- gcm
a <- 1
for(i in 1:length(speciesList)) {
rm(list= ls()[!(ls() %in% c('gcm','pc', 'predictors', 'speciesList', 'a'))])
sp <- speciesList[a]
# load('./workspaces/01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
species <- gsub(tolower(sp), pattern=' ', replacement='_')
print(paste0("Species = ", species))
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
# load bg sites, records, and rangeMap
load(paste0('./Background Sites/Random Background Sites across Study Region - ',
speciesAb, '_', gcm, '.Rdata'))
load(paste0('./Models/Maxent/model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
load(paste0('./regions/little_range_map/', rangeName, '.Rdata'))
# calculate k-folds for presences and background sites
kPres <- kfold(records, k = 5)
kBg <- kfold(randomBg, k = 5)
# visualize fold #1
plot(rangeMap, main = paste0(sp, ', k-fold #1'))
points(records$longitude, records$latitude)
points(records$longitude[kPres==1],
records$latitude[kPres==1],
bg='red',
pch=21
)
legend('topright',
legend=c('Training presence', 'Test presence'),
pch=c(1, 16),
col=c('black', 'red'),
bg='white',
cex=0.8
)
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
# create an output directory
dir.create(folderName, recursive = TRUE, showWarnings = FALSE)
# place to store auc & cbi output
aucRandom <- cbiRandom <- rep(NA, 5)
# for each k-fold
for(i in 1:5) {
print(paste0('K-fold ', i, ':'))
# create training data, with presences/absences vector of 0/1 with all points
# EXCEPT the ones in the fold
envData <- rbind(records[kPres != i, predictors], randomBg[kBg != i, predictors])
presBg <- c(rep(1, sum(kPres != i)), rep(0, sum(kBg != i)))
trainData <- cbind(presBg, envData)
# load(paste0(folderName, '/Model ', i, '.Rdata'))
model <- enmSdm::trainMaxNet(data = trainData, resp = 'presBg')
save(model, file = paste0(folderName, '/Model ', i, '.Rdata'))
# predict presences & background sites
predPres <- raster::predict(model,
newdata = records[kPres == i,],
clamp = F,
type = 'cloglog')
predBg <- raster::predict(model,
newdata = randomBg[kPres == i,],
clamp = F,
type = 'cloglog')
# evaluate
thisEval <- evaluate(p = as.vector(predPres), a = as.vector(predBg))
thisAuc <- thisEval@auc
thisCbi <- contBoyce(pres = predPres, bg = predBg)
print(paste('AUC = ', round(thisAuc, 2), ' | CBI = ', round(thisCbi, 2)))
aucRandom[i] <- thisAuc
cbiRandom[i] <- thisCbi
}
save(aucRandom, cbiRandom, file = paste0(folderName, '/auc_cbi_vals.Rdata'))
a <- a + 1
}
