AgTreatments <- polltransAg[polltransAg$`Transect Location` == 'Agriculture', ]
AgTreatments$`Treatment Group` <- AgTransects$`Treatment Group`[match(AgTreatments$Transect,
AgTransects$Transect)]
AgTreatmentsNF <- polltransAgNF[polltransAgNF$`Transect Location` == 'Agriculture', ]
AgTreatmentsNF$`Treatment Group` <- AgTransects$`Treatment Group`[match(AgTreatmentsNF$Transect,
AgTransects$Transect)]
# Only include Eastwood & Atwater
AgTreatments <- AgTreatments[AgTreatments$Site != 'Connexus', ]
AgTreatmentsNF <- AgTreatmentsNF[AgTreatmentsNF$Site != 'Connexus', ]
# Delete "Not Adjacent"
AgTreatments <- AgTreatments[!grepl("Not Adjacent", AgTreatments$`Treatment Group`), ]
AgTreatmentsNF <- AgTreatmentsNF[!grepl("Not Adjacent", AgTreatmentsNF$`Treatment Group`), ]
# X = Ag Treatment, Eastwood & Atwater
# Total Pollinators
boxplot(Total.Pollinators ~ `Treatment Group`, data = AgTreatments, xlab = "Treatment",
ylab = "Total Pollinators")
# Total Pollinators, No Flags
boxplot(Total.Pollinators ~ `Treatment Group`, data = AgTreatmentsNF, xlab = "Treatment",
ylab = "Total Pollinators")
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatmentsNF, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Pollinators..no.hover. ~ `Treatment Group`, data = AgTreatmentsNF, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
AgTreatmentsEast <- AgTreatments[AgTreatments$Site != 'Atwater', ]
AgTreatmentsEastNF <- AgTreatmentsNF[AgTreatmentsNF$Site != 'Atwater', ]
# Total Pollinators
boxplot(Total.Pollinators ~ `Treatment Group`, data = AgTreatmentsEast, xlab = "Treatment",
ylab = "Total Pollinators")
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatmentsEast, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Pollinators..no.hover. ~ `Treatment Group`, data = AgTreatmentsEast, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
NoRoadsideTotal3d <- data.frame(polltransAgOnlyNoRoadside$`Distance to Solar`,
polltransAgOnlyNoRoadside$Total.Pollinators)
nr3.1d <- ggplot(data = NoRoadsideTotal3d, aes(x = polltransAgOnlyNoRoadside..Distance.to.Solar.,
y = polltransAgOnlyNoRoadside.Total.Pollinators)) +
geom_bar(stat="identity")
nr3.1d <- nr3.1d + xlab("Distance to Solar (m)") + ylab("Total Pollinators")
print(nr3.1d)
NoRoadsideTotalNF3d <- data.frame(polltransNFAgOnlyNoRoadside$`Distance to Solar`,
polltransNFAgOnlyNoRoadside$Total.Pollinators)
nr3.2d <- ggplot(data = NoRoadsideTotalNF3d, aes(x = polltransNFAgOnlyNoRoadside..Distance.to.Solar.,
y = polltransNFAgOnlyNoRoadside.Total.Pollinators)) +
geom_bar(stat="identity")
nr3.2d <- nr3.2d + xlab("Distance to Solar (m)") + ylab("Total Pollinators")
print(nr3.2d)
NoRoadsideBees3d <- data.frame(polltransAgOnlyNoRoadside$`Distance to Solar`,
polltransAgOnlyNoRoadside$Total.Bees..all.)
nr3.3d <- ggplot(data = NoRoadsideBees3d, aes(x = polltransAgOnlyNoRoadside..Distance.to.Solar.,
y = polltransAgOnlyNoRoadside.Total.Bees..all.)) +
geom_bar(stat="identity")
nr3.3d <- nr3.3d + xlab("Distance to Solar (m)") + ylab("Total Bees")
print(nr3.3d)
NoRoadsideBeesNF3d <- data.frame(polltransNFAgOnlyNoRoadside$`Distance to Solar`,
polltransNFAgOnlyNoRoadside$Total.Bees..all.)
nr3.4d <- ggplot(data = NoRoadsideBeesNF3d, aes(x = polltransNFAgOnlyNoRoadside..Distance.to.Solar.,
y = polltransNFAgOnlyNoRoadside.Total.Bees..all.)) +
geom_bar(stat="identity")
nr3.4d <- nr3.4d + xlab("Distance to Solar (m)") + ylab("Total Bees")
print(nr3.4d)
NoRoadsideNoHover3d <- data.frame(polltransAgOnlyNoRoadside$`Distance to Solar`,
polltransAgOnlyNoRoadside$Total.Pollinators..no.hover.)
nr3.5d <- ggplot(data = NoRoadsideNoHover3d, aes(x = polltransAgOnlyNoRoadside..Distance.to.Solar.,
y = polltransAgOnlyNoRoadside.Total.Pollinators..no.hover.)) +
geom_bar(stat="identity")
nr3.5d <- nr3.5d + xlab("Distance to Solar (m)") + ylab("Total Pollinators, No Hover")
print(nr3.5d)
NoRoadsideNoHoverNF3d <- data.frame(polltransNFAgOnlyNoRoadside$`Distance to Solar`,
polltransNFAgOnlyNoRoadside$Total.Pollinators..no.hover.)
nr3.6d <- ggplot(data = NoRoadsideNoHoverNF3d, aes(x = polltransNFAgOnlyNoRoadside..Distance.to.Solar.,
y = polltransNFAgOnlyNoRoadside.Total.Pollinators..no.hover.)) +
geom_bar(stat="identity")
nr3.6d <- nr3.6d + xlab("Distance to Solar (m)") + ylab("Total Pollinators, No Hover")
print(nr3.6d)
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Pollinators, 2),
xlab = "Distance to Solar (m)", ylab = "Total Pollinators")
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Bees..all., 2),
xlab = "Distance to Solar (m)", ylab = "Total Bees")
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Pollinators..no.hover., 2),
xlab = "Distance to Solar (m)", ylab = "Total Pollinators, No Hover")
boxplot(Total.Pollinators ~ `Treatment Group`, data = AgTreatments, xlab = "Treatment",
ylab = "Total Pollinators")
boxplot(Total.Pollinators ~ `Treatment Group`, data = AgTreatmentsNF, xlab = "Treatment",
ylab = "Total Pollinators")
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatments, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatmentsNF, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Pollinators..no.hover. ~ `Treatment Group`, data = AgTreatments, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
boxplot(Total.Pollinators..no.hover. ~ `Treatment Group`, data = AgTreatmentsNF, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
AgTreatmentsEast <- AgTreatments[AgTreatments$Site != 'Atwater', ]
AgTreatmentsEastNF <- AgTreatmentsNF[AgTreatmentsNF$Site != 'Atwater', ]
boxplot(Total.Pollinators ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Pollinators")
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Pollinators..no.hover. ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
rm(list = ls()) # Clear workspace
library(readxl)
polltrans <- read_excel("Documents/anl/Pollinator_Data.xlsx",
sheet = "Transect Data")
View(polltrans)
View(polltrans)
View(polltrans)
polltrans[, 25:86][is.na(polltrans[, 25:86])] <- 0
polltransCount <- polltrans %>% group_by(Trip, Transect) %>% summarise(Count = n())
# Merge count back to polltrans
polltrans <- merge(polltrans, polltransCount,by=c("Trip","Transect"))
# create a new dataframe with the covariates that don't need any function
## year, trip, week, site, months after planting, transect, transect location, and flower rank
polltransCovar <- polltrans[,c("Year", "Trip", "Week", "Site", "Months After Planting","Transect",
"Transect Location", "Flower Rank", "FLAG", "Ag Location")]
polltransNF <- polltrans
polltransNF <- polltransNF[polltransNF$FLAG != 1, ]
# create a dataset with the count of the number of rows with same TripTrans
polltransNFCount <- polltransNF %>% group_by(Trip, Transect) %>% summarise(Count = n())
# merge count back to polltransNF
polltransNF <- merge(polltransNF, polltransNFCount,by=c("Trip","Transect"))
# create the covariate dataframe for no flags
polltransCovarNF <- polltransNF[,c("Year", "Trip", "Week", "Site", "Months After Planting","Transect",
"Transect Location", "Flower Rank", "FLAG", "Ag Location")]
polltransCovar[c("FLAG")] <- lapply(polltransCovar[c("FLAG")],
function(a) ave(a, polltrans$TRIPTRANS, FUN = max))
polltransCovar[c("Flower Rank")] <- lapply(polltransCovar[c("Flower Rank")],
function(a) ave(a, polltrans$TRIPTRANS, FUN = ave))
polltransCovarNF[c("Flower Rank")] <- lapply(polltransCovarNF[c("Flower Rank")],
function(a) ave(a, polltransNF$TRIPTRANS, FUN = ave))
# aggregating the pollinator counts (average) based on matching trip numbers and transect
# right now, this only returns the transect, site, and pollinator numbers...still want
## to figure out how to incorporate all of the other covariates we want
polltransAvgPoll <- aggregate(list("Total Pollinators" = polltrans$`Total Pollinators`,
"Total Pollinators (no hover)" = polltrans$ `Total Pollinators (no hover)`,
"Total Pollinators (no hover or moths)" = polltrans$ `Total Pollinators (no hover or moths)`,
"Total Bees (all)" = polltrans$`Total Bees (all)`,
"Total Honeybees" = polltrans$`Total Honeybees`,
"Total Native Bees" = polltrans$`Total Native Bees`),
by = list("Trip" = polltrans$Trip, "Transect" = polltrans$Transect), mean);
polltransNFAvgPoll <- aggregate(list("Total Pollinators" = polltransNF$`Total Pollinators`,
"Total Pollinators (no hover)" = polltransNF$ `Total Pollinators (no hover)`,
"Total Pollinators (no hover or moths)" = polltransNF$ `Total Pollinators (no hover or moths)`,
"Total Bees (all)" = polltransNF$`Total Bees (all)`,
"Total Honeybees" = polltransNF$`Total Honeybees`,
"Total Native Bees" = polltransNF$`Total Native Bees`),
by = list("Trip" = polltransNF$Trip, "Transect" = polltransNF$Transect), mean);
polltransCovAg <- unique(polltransCovar, by = c("Trip", "Transect"))
polltransCovAgNF <- unique(polltransCovarNF, by = c("Trip", "Transect"))
polltransAg <- merge(polltransCount, polltransAvgPoll, by=c("Trip","Transect"))
polltransAg <- merge(polltransAg, polltransCovAg, by=c("Trip","Transect"))
polltransAgNF <- merge(polltransNFCount, polltransNFAvgPoll, by=c("Trip","Transect"))
polltransAgNF <- merge(polltransAgNF, polltransCovAgNF, by=c("Trip","Transect"))
library(xlsx)
write.xlsx(polltrans, "Documents/anl/polltrans.xlsx")
write.xlsx(polltransAg, "Documents/anl/polltransAggregate.xlsx")
write.xlsx(polltransAgNF, "Documents/anl/polltransAggregateNoFlags.xlsx")
polltransNoAgSites <- polltransAg[polltransAg$`Transect Location` != 'Agriculture', ]
polltransNFNoAgSites <- polltransAgNF[polltransAgNF$`Transect Location` != 'Agriculture', ]
polltransNoAtwater <- polltransNoAgSites[!grepl("AT", polltransNoAgSites$Transect), ]
polltransNFNoAtwater <- polltransNFNoAgSites[!grepl("AT", polltransNFNoAgSites$Transect), ]
# Excluding Connexus
polltransNoConnexus <- polltransNoAgSites[!grepl("CO", polltransNoAgSites$Transect), ]
polltransNFNoConnexus <- polltransNFNoAgSites[!grepl("CO", polltransNFNoAgSites$Transect), ]
# Excluding Atwater & Connexus
polltransAgEastwoodOnly <- polltransNoAgSites[!grepl("AT", polltransNoAgSites$Transect), ]
polltransAgEastwoodOnly <- polltransAgEastwoodOnly[!grepl("CO", polltransAgEastwoodOnly$Transect), ]
polltransAgNFEastwoodOnly <- polltransNFNoAgSites[!grepl("AT", polltransNFNoAgSites$Transect), ]
polltransAgNFEastwoodOnly <- polltransAgNFEastwoodOnly[!grepl("CO", polltransAgNFEastwoodOnly$Transect), ]
library(readxl)
AgData <- read_excel("Documents/anl/Pollinator_Data.xlsx",
+     sheet = "Ag_Transects")
View(AgData)
library(readxl)
AgData <- read_excel("Documents/anl/Pollinator_Data.xlsx", +     sheet = "Ag_Transects")
View(AgData)
AgData <- read_excel("Documents/anl/Pollinator_Data.xlsx", sheet = "Ag_Transects")
polltransAgOnly <- polltransAg[polltransAg$`Transect Location` == 'Agriculture', ]
polltransNFAgOnly <- polltransAgNF[polltransAgNF$`Transect Location` == 'Agriculture', ]
View(polltransAgOnly)
polltransAgOnly <- polltransAgOnly[polltransAgOnly$Site != 'Connexus', ]
polltransNFAgOnly <- polltransNFAgOnly[polltransNFAgOnly$Site != 'Connexus', ]
# excluding CRP entries
polltransAgOnly <- polltransAgOnly[polltransAgOnly$`Ag Location` != 'Far - CRP', ]
polltransNFAgOnly <- polltransNFAgOnly[polltransNFAgOnly$`Ag Location` != 'Far - CRP', ]
# creating separate dataframes without roadside variables
polltransAgOnlyNoRoadside <- polltransAgOnly[polltransAgOnly$`Ag Location` != 'Far - Roadside', ]
polltransNFAgOnlyNoRoadside <- polltransNFAgOnly[polltransNFAgOnly$`Ag Location` != 'Far - Roadside', ]
polltransAgOnly[c("Ag Location")] <- lapply(polltransAgOnly[c("Ag Location")], function(x) {
gsub("Far - Roadside", "Far", x)})
polltransNFAgOnly[c("Ag Location")] <- lapply(polltransNFAgOnly[c("Ag Location")], function(x) {
gsub("Far - Roadside", "Far", x)})
polltransAgOnly$`Distance to Solar` <- AgData$`Distance to Solar (m)`[match(polltransAgOnly$Transect,
AgData$Transect)]
polltransNFAgOnly$`Distance to Solar` <- AgData$`Distance to Solar (m)`[match(polltransNFAgOnly$Transect,
AgData$Transect)]
polltransAgOnlyNoRoadside$`Distance to Solar` <- AgData$`Distance to Solar (m)`[match(
polltransAgOnlyNoRoadside$Transect, AgData$Transect)]
polltransNFAgOnlyNoRoadside$`Distance to Solar` <- AgData$`Distance to Solar (m)`[match(
polltransNFAgOnlyNoRoadside$Transect, AgData$Transect)]
## working with ggplot for this to work a bit better..
library(ggplot2)
RoadsideBeesNF3 <- data.frame(polltransNFAgOnly$`Ag Location`, polltransNFAgOnly$Total.Bees..all.)
p3.4 <- ggplot(data = RoadsideBeesNF3, aes(x = polltransNFAgOnly..Ag.Location.,
y = polltransNFAgOnly.Total.Bees..all.)) +
geom_bar(stat="identity")
p3.4 <- p3.4 + xlab("Ag Location") + ylab("Total Bees")
print(p3.4)
polltransAgOnly$`Ag Location` <- paste(polltransAgOnly$Site, polltransAgOnly$`Ag Location`)
polltransNFAgOnly$`Ag Location` <- paste(polltransNFAgOnly$Site, polltransNFAgOnly$`Ag Location`)
RoadsideBees3 <- data.frame(polltransAgOnly$`Ag Location`, polltransAgOnly$Total.Bees..all.)
p3.3 <- ggplot(data = RoadsideBees3, aes(x = polltransAgOnly..Ag.Location.,
y = polltransAgOnly.Total.Bees..all.)) +
geom_bar(stat="identity")
p3.3 <- p3.3 + xlab("Ag Location") + ylab("Total Bees")
print(p3.3)
RoadsideBeesNF3 <- data.frame(polltransNFAgOnly$`Ag Location`, polltransNFAgOnly$Total.Bees..all.)
p3.4 <- ggplot(data = RoadsideBeesNF3, aes(x = polltransNFAgOnly..Ag.Location.,
y = polltransNFAgOnly.Total.Bees..all.)) +
geom_bar(stat="identity")
p3.4 <- p3.4 + xlab("Ag Location") + ylab("Total Bees")
print(p3.4)
NoRoadsideTotalNF3d <- data.frame(polltransNFAgOnlyNoRoadside$`Distance to Solar`,
polltransNFAgOnlyNoRoadside$Total.Pollinators)
nr3.2d <- ggplot(data = NoRoadsideTotalNF3d, aes(x = polltransNFAgOnlyNoRoadside..Distance.to.Solar.,
y = polltransNFAgOnlyNoRoadside.Total.Pollinators)) +
geom_bar(stat="identity")
nr3.2d <- nr3.2d + xlab("Distance to Solar (m)") + ylab("Total Pollinators")
print(nr3.2d)
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Pollinators, 2),
xlab = "Distance to Solar (m)", ylab = "Total Pollinators")
# Total Bees
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Bees..all., 2),
xlab = "Distance to Solar (m)", ylab = "Total Bees")
# Total Pollinators, No Hover
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Pollinators..no.hover., 2),
xlab = "Distance to Solar (m)", ylab = "Total Pollinators, No Hover")
library (readxl)
AgTransects <- read_excel("Documents/anl/Pollinator_Data.xlsx", sheet = "Ag_Transects")
View(AgTransects)
AgTreatments <- polltransAg[polltransAg$`Transect Location` == 'Agriculture', ]
AgTreatments$`Treatment Group` <- AgTransects$`Treatment Group`[match(AgTreatments$Transect,
AgTransects$Transect)]
AgTreatmentsNF <- polltransAgNF[polltransAgNF$`Transect Location` == 'Agriculture', ]
AgTreatmentsNF$`Treatment Group` <- AgTransects$`Treatment Group`[match(AgTreatmentsNF$Transect,
AgTransects$Transect)]
# Only include Eastwood & Atwater
AgTreatments <- AgTreatments[AgTreatments$Site != 'Connexus', ]
AgTreatmentsNF <- AgTreatmentsNF[AgTreatmentsNF$Site != 'Connexus', ]
AgTreatments <- AgTreatments[!grepl("Not Adjacent", AgTreatments$`Treatment Group`), ]
AgTreatmentsNF <- AgTreatmentsNF[!grepl("Not Adjacent", AgTreatmentsNF$`Treatment Group`), ]
AgTreatmentsEast <- AgTreatments[AgTreatments$Site != 'Atwater', ]
AgTreatmentsEastNF <- AgTreatmentsNF[AgTreatmentsNF$Site != 'Atwater', ]
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatmentsNF, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Pollinators..no.hover. ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
Veiw(AgTreatmentsEastNF)
View(AgTreatmentsEastNF)
boxplot(Total.Pollinators..no.hover.or.moths. ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
View(polltransNFAgOnlyNoRoadside)
library(readxl)
library(dplyr)
library(ggplot2)
rm(list = ls()) # Clear workspace
# input data
library(readxl)
polltrans <- read_excel("Documents/anl/Pollinator_Data.xlsx",
sheet = "Transect Data")
polltrans[, 25:86][is.na(polltrans[, 25:86])] <- 0
polltransCount <- polltrans %>% group_by(Trip, Transect) %>% summarise(Count = n())
# Merge count back to polltrans
polltrans <- merge(polltrans, polltransCount,by=c("Trip","Transect"))
# create a new dataframe with the covariates that don't need any function
## year, trip, week, site, months after planting, transect, transect location, and flower rank
polltransCovar <- polltrans[,c("Year", "Trip", "Week", "Site", "Months After Planting","Transect",
"Transect Location", "Flower Rank", "FLAG", "Ag Location")]
polltransNF <- polltrans
polltransNF <- polltransNF[polltransNF$FLAG != 1, ]
# create a dataset with the count of the number of rows with same TripTrans
polltransNFCount <- polltransNF %>% group_by(Trip, Transect) %>% summarise(Count = n())
# merge count back to polltransNF
polltransNF <- merge(polltransNF, polltransNFCount,by=c("Trip","Transect"))
# create the covariate dataframe for no flags
polltransCovarNF <- polltransNF[,c("Year", "Trip", "Week", "Site", "Months After Planting","Transect",
"Transect Location", "Flower Rank", "FLAG", "Ag Location")]
polltransCovar[c("FLAG")] <- lapply(polltransCovar[c("FLAG")],
function(a) ave(a, polltrans$TRIPTRANS, FUN = max))
polltransCovar[c("Flower Rank")] <- lapply(polltransCovar[c("Flower Rank")],
function(a) ave(a, polltrans$TRIPTRANS, FUN = ave))
polltransCovarNF[c("Flower Rank")] <- lapply(polltransCovarNF[c("Flower Rank")],
function(a) ave(a, polltransNF$TRIPTRANS, FUN = ave))
polltransAvgPoll <- aggregate(list("Total Pollinators" = polltrans$`Total Pollinators`,
"Total Pollinators (no hover)" = polltrans$ `Total Pollinators (no hover)`,
"Total Pollinators (no hover or moths)" = polltrans$ `Total Pollinators (no hover or moths)`,
"Total Bees (all)" = polltrans$`Total Bees (all)`,
"Total Honeybees" = polltrans$`Total Honeybees`,
"Total Native Bees" = polltrans$`Total Native Bees`),
by = list("Trip" = polltrans$Trip, "Transect" = polltrans$Transect), mean);
polltransNFAvgPoll <- aggregate(list("Total Pollinators" = polltransNF$`Total Pollinators`,
"Total Pollinators (no hover)" = polltransNF$ `Total Pollinators (no hover)`,
"Total Pollinators (no hover or moths)" = polltransNF$ `Total Pollinators (no hover or moths)`,
"Total Bees (all)" = polltransNF$`Total Bees (all)`,
"Total Honeybees" = polltransNF$`Total Honeybees`,
"Total Native Bees" = polltransNF$`Total Native Bees`),
by = list("Trip" = polltransNF$Trip, "Transect" = polltransNF$Transect), mean);
polltransCovAg <- unique(polltransCovar, by = c("Trip", "Transect"))
polltransCovAgNF <- unique(polltransCovarNF, by = c("Trip", "Transect"))
polltransAg <- merge(polltransCount, polltransAvgPoll, by=c("Trip","Transect"))
polltransAg <- merge(polltransAg, polltransCovAg, by=c("Trip","Transect"))
polltransAgNF <- merge(polltransNFCount, polltransNFAvgPoll, by=c("Trip","Transect"))
polltransAgNF <- merge(polltransAgNF, polltransCovAgNF, by=c("Trip","Transect"))
head(polltransAg)
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank") + MyTheme
MyTheme <-         theme(axis.title.y = element_text(size=14, face="bold"),
axis.title.x = element_text(size=14, face="bold"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="black"))
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank") + MyTheme
Q1.Months <- plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
Q1.Months + MyTheme
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(jitter(polltransAgNF$`Months After Planting`, 2), jitter(polltransAgNF$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAgNF$`Months After Planting`, polltransAgNF$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(jitter(polltransAgNF$`Months After Planting`, 2), jitter(polltransAgNF$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAgNF$`Months After Planting`, polltransAgNF$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
# # X = Months After Planting
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
Q1.Months <- ggplot(polltransAg, aes(`Months After Planting`, `Flower Rank`)) + geom_jitter()
Q1.Months + MyTheme
Q1.Months <- ggplot(polltransAg, aes(`Months After Planting`, `Flower Rank`)) + geom_jitter(width = 0.5, height = 0.5)
Q1.Months + MyTheme
MyTheme <-          theme(axis.title.y = element_text(size=12, face="bold"),
axis.title.x = element_text(size=12, face="bold"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="black"))
Q1.Months <- ggplot(polltransAg, aes(`Months After Planting`, `Flower Rank`)) + geom_jitter(width = 0.5, height = 0.5)
Q1.Months + MyTheme
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
Q1.Months <- ggplot(polltransAg, aes(`Months After Planting`, `Flower Rank`)) + geom_jitter(width = 0.5, height = 0.5)
Q1.Months + MyTheme
plot(jitter(polltransAgNF$`Months After Planting`, 2), jitter(polltransAgNF$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
install.packages("seewave", repos="http://cran.at.r-project.org/")
install.packages(c("fftw","tuneR","rgl","rpanel"), repos="http://cran.at.r-project.org/")
rm(list = ls()) # Clear workspace
# Mexican Ash
# Lauren Jenkins, Fall 2021
### CONTENTS ###
### setup ###
### setup ###
rm(list = ls())
setwd('/Users/laurenjenkins/Documents/MOBOT/PVMvsENM/')
options(keep.source=FALSE) # manage memory
options(stringsAsFactors=FALSE)
raster::rasterOptions(format='GTiff', overwrite=TRUE)
# load packages
library(BIEN)
library(dismo)
library(brglm2)
library(cluster)
library(maxnet)
library(raster)
library(rgbif)
library(rgeos)
library(geosphere)
library(rgdal)
library(scales)
library(sp)
library(omnibus)
library(enmSdm)
library(holoSimCell)
library(RColorBrewer)
library(rJava)
library(statisfactory)
library(legendary)
dirCreate('./species_records')
dirCreate('./figures_and_tables')
### obtain & clean data ###
# use BIEN and BONAP
# visually check BIEN vs Little
# manually inspect/clean
## remove non-natives
## remove naturalized (may be more complex)
## look for outliers
ll <- c('longitude', 'latitude')
species <- 'Fraxinus berlandieriana'
dirCreate('./regions/bien_range_map')
BIEN_ranges_species(species, directory = './regions/bien_range_map')
bienRange <- BIEN_ranges_load_species(species)
bienRangeAlb <- sp::spTransform(bienRange, getCRS('albersNA'), TRUE)
# name file by when it was obtained
speciesFileName <- paste0('./species_records/00_',
gsub(tolower(species), pattern = ' ',
replacement = '_'), '_bien_all_occurrences.rda')
if (file.exists(speciesFileName)) {
load(speciesFileName)
} else {
occsRaw <- BIEN_occurrence_species(species = species, cultivated = FALSE,
only.new.world = TRUE, all.taxonomy = FALSE,
native.status = FALSE, natives.only = TRUE,
observation.type = TRUE, political.boundaries = TRUE,
collection.info = TRUE)
sink('./species_records/bien_download.txt')
say('Data representing species records were downloaded from BIEN on ', date(), '.')
say('Bien Version 4.1')
sink()
save(occsRaw, file = speciesFileName)
}
# remove records with missing coordinates and dates
occs <- occsRaw[!(is.na(occsRaw$longitude) | is.na(occsRaw$latitude) | is.na(occsRaw$date_collected)), ]
# visualize
# convert to spatial object
occsSp <- SpatialPointsDataFrame(occs[, ll], data = occs, proj4 = getCRS('wgs84', TRUE))
occsSpAlb <- sp::spTransform(occsSp, getCRS('albersNA', TRUE))
png('./figures_and_tables/occurrences_raw.png', width=1200, height=1000)
# plot BIEN
plot(occsSpAlb, col=NA, main = 'BIEN range map')
plot(bienRangeAlb, col = alpha('green', 0.4), border = 'green', add = TRUE)
points(occsSpAlb, pch = 16, cex = 0.9, col = 'black')
# plot(nam1SpAlb, add = TRUE, border = 'gray')
title(sub=date(), outer=TRUE, cex.sub=0.7, line=-2)
species <- 'Fraxinus caroliniana'
BIEN_ranges_species(species, directory = './regions/bien_range_map')
bienRange <- BIEN_ranges_load_species(species)
bienRangeAlb <- sp::spTransform(bienRange, getCRS('albersNA'), TRUE)
# name file by when it was obtained
speciesFileName <- paste0('./species_records/00_',
gsub(tolower(species), pattern = ' ',
replacement = '_'), '_bien_all_occurrences.rda')
if (file.exists(speciesFileName)) {
load(speciesFileName)
} else {
occsRaw <- BIEN_occurrence_species(species = species, cultivated = FALSE,
only.new.world = TRUE, all.taxonomy = FALSE,
native.status = FALSE, natives.only = TRUE,
observation.type = TRUE, political.boundaries = TRUE,
collection.info = TRUE)
sink('./species_records/bien_download.txt')
say('Data representing species records were downloaded from BIEN on ', date(), '.')
say('Bien Version 4.1')
sink()
save(occsRaw, file = speciesFileName)
}
occs <- occsRaw
# visualize
# convert to spatial object
occsSp <- SpatialPointsDataFrame(occs[, ll], data = occs, proj4 = getCRS('wgs84', TRUE))
occsSpAlb <- sp::spTransform(occsSp, getCRS('albersNA', TRUE))
png('./figures_and_tables/occurrences_raw.png', width=1200, height=1000)
# plot BIEN
plot(occsSpAlb, col=NA, main = 'BIEN range map')
plot(bienRangeAlb, col = alpha('green', 0.4), border = 'green', add = TRUE)
points(occsSpAlb, pch = 16, cex = 0.9, col = 'black')
View(occsSp)
View(occsSp)
# remove records with missing coordinates and dates
occs <- occsRaw[!(is.na(occsRaw$longitude) | is.na(occsRaw$latitude) | is.na(occsRaw$date_collected)), ]
# visualize
# convert to spatial object
occsSp <- SpatialPointsDataFrame(occs[, ll], data = occs, proj4 = getCRS('wgs84', TRUE))
occsSpAlb <- sp::spTransform(occsSp, getCRS('albersNA', TRUE))
png('./figures_and_tables/occurrences_raw.png', width=1200, height=1000)
# plot BIEN
plot(occsSpAlb, col=NA, main = 'BIEN range map')
plot(bienRangeAlb, col = alpha('green', 0.4), border = 'green', add = TRUE)
points(occsSpAlb, pch = 16, cex = 0.9, col = 'black')
# plot BIEN
plot(occsSpAlb, main = 'BIEN range map')
plot(1)
par(fg=black)
par(fg='black')
plot(1)
