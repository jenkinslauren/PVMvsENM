}
return(preds)
}
preds <- getPredictions(speciesAb_, pc)
climYears <- seq(21000, 0, by=-1000)
getPredictions <- function(speciesAb_, pc) { # predict suitability for a given year
predictors <- c(paste0('pca', 1:pc))
for (yr in climYears) {
climate <- getClimRasts(pc = 5, climYear = yr) # retrieve clipped climate for given year
# plot(climate[[1]], main = paste0(climYear, ' ybp'))
# predict suitability #
thisPred <- predict(climate[[predictors]], envModel, clamp = F, type='cloglog')
names(thisPred) <- (paste0(yr, ' ybp'))
# plot(thisPred, main = paste0("prediction at ", climYear, " ybp"))
preds <- if (exists('preds')) {
stack(preds, thisPred)
} else {
thisPred
}
}
return(preds)
}
preds <- getPredictions(speciesAb_, pc)
# predict suitability #
thisPred <- raster::predict(climate[[predictors]], envModel, clamp = F, type='cloglog')
getPredictions <- function(speciesAb_, pc) { # predict suitability for a given year
predictors <- c(paste0('pca', 1:pc))
for (yr in climYears) {
climate <- getClimRasts(pc = 5, climYear = yr) # retrieve clipped climate for given year
# plot(climate[[1]], main = paste0(climYear, ' ybp'))
# predict suitability #
thisPred <- raster::predict(climate[[predictors]], envModel, clamp = F, type='cloglog')
names(thisPred) <- (paste0(yr, ' ybp'))
# plot(thisPred, main = paste0("prediction at ", climYear, " ybp"))
preds <- if (exists('preds')) {
stack(preds, thisPred)
} else {
thisPred
}
}
return(preds)
}
preds <- getPredictions(speciesAb_, pc)
getPredictions <- function(speciesAb_, pc) { # predict suitability for a given year
predictors <- c(paste0('pca', 1:pc))
for (yr in climYears) {
climate <- getClimRasts(pc = 5, climYear = yr) # retrieve clipped climate for given year
# plot(climate[[1]], main = paste0(climYear, ' ybp'))
# predict suitability #
thisPred <- enmSdm::predictMaxNet(climate[[predictors]], envModel, clamp = F, type='cloglog')
names(thisPred) <- (paste0(yr, ' ybp'))
# plot(thisPred, main = paste0("prediction at ", climYear, " ybp"))
preds <- if (exists('preds')) {
stack(preds, thisPred)
} else {
thisPred
}
}
return(preds)
}
preds <- getPredictions(speciesAb_, pc)
yr <- 21000
climate <- getClimRasts(pc = 5, climYear = yr) # retrieve clipped climate for given year
names(climate)
# predict suitability #
thisPred <- enmSdm::predictMaxNet(climate[[predictors]], envModel, clamp = F, type='cloglog')
predictors <- c(paste0('pca', 1:pc))
# predict suitability #
thisPred <- enmSdm::predictMaxNet(climate[[predictors]], envModel, clamp = F, type='cloglog')
# predict suitability #
climate <- climate[[predictors]]
names(climate)
thisPred <- enmSdm::predictMaxNet(climate,
envModel,
clamp = F,
type='cloglog')
envModel
plot(climate)
envModel$beta
envModel$betas
# predict suitability #
thisPred <- predict(climate[[predictors]],
envModel,
clamp = F,
type='cloglog')
library(maxnet)
# predict suitability #
thisPred <- predict(climate[[predictors]],
envModel,
clamp = F,
type='cloglog')
getPredictions <- function(speciesAb_, pc) { # predict suitability for a given year
predictors <- c(paste0('pca', 1:pc))
for (yr in climYears) {
climate <- getClimRasts(pc = 5, climYear = yr) # retrieve clipped climate for given year
# plot(climate[[1]], main = paste0(climYear, ' ybp'))
# predict suitability #
thisPred <- predict(climate[[predictors]],
envModel,
clamp = F,
type='cloglog')
names(thisPred) <- (paste0(yr, ' ybp'))
# plot(thisPred, main = paste0("prediction at ", climYear, " ybp"))
preds <- if (exists('preds')) {
stack(preds, thisPred)
} else {
thisPred
}
}
return(preds)
}
preds <- getPredictions(speciesAb_, pc)
preds <- projectRaster(preds, studyRegionRasts) # project predictions to study region
# identify study region
studyRegionFileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred_iceMask.tif'
studyRegionRasts <- brick(studyRegionFileName)
preds <- projectRaster(preds, studyRegionRasts) # project predictions to study region
## mask by study region and force values to be within [0, 1] ##
# because the rasters can get pushed outside this during re-projection #
preds <- raster::calc(preds, fun = function(x) ifelse(x < 0, 0, x))
preds <- raster::calc(preds, fun = function(x) ifelse(x > 1, 1, x))
for (i in 1:nlayers(preds)) {
landMask <- (1 - studyRegionRasts[[i]])
preds[[i]] <- preds[[i]] * landMask
}
writeRaster(stack(preds), paste0('./predictions/', gcm, '/', speciesAb_, '_GCM_', gcm, '_PC', pc),
format = 'GTiff', overwrite = T)
gcm <- 'ccsm'
modelFileName <- paste0('./models/', speciesAb_, '_Maxent_PC',
pc, '_GCM_', gcm, '.Rdata')
load(modelFileName)
if(exists('preds')) rm(preds)
preds <- getPredictions(speciesAb_, pc)
preds <- projectRaster(preds, studyRegionRasts) # project predictions to study region
## mask by study region and force values to be within [0, 1] ##
# because the rasters can get pushed outside this during re-projection #
preds <- raster::calc(preds, fun = function(x) ifelse(x < 0, 0, x))
preds <- raster::calc(preds, fun = function(x) ifelse(x > 1, 1, x))
for (i in 1:nlayers(preds)) {
landMask <- (1 - studyRegionRasts[[i]])
preds[[i]] <- preds[[i]] * landMask
}
writeRaster(stack(preds), paste0('./predictions/', gcm, '/', speciesAb_, '_GCM_', gcm, '_PC', pc),
format = 'GTiff', overwrite = T)
gcm <- 'ecbilt'
modelFileName <- paste0('./models/', speciesAb_, '_Maxent_PC',
pc, '_GCM_', gcm, '.Rdata')
load(modelFileName)
if(exists('preds')) rm(preds)
preds <- getPredictions(speciesAb_, pc)
preds <- projectRaster(preds, studyRegionRasts) # project predictions to study region
## mask by study region and force values to be within [0, 1] ##
# because the rasters can get pushed outside this during re-projection #
preds <- raster::calc(preds, fun = function(x) ifelse(x < 0, 0, x))
preds <- raster::calc(preds, fun = function(x) ifelse(x > 1, 1, x))
for (i in 1:nlayers(preds)) {
landMask <- (1 - studyRegionRasts[[i]])
preds[[i]] <- preds[[i]] * landMask
}
writeRaster(stack(preds), paste0('./predictions/', gcm, '/', speciesAb_, '_GCM_', gcm, '_PC', pc),
format = 'GTiff', overwrite = T)
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
library(geosphere)
library(raster)
library(data.table)
library(dplyr)
library(viridis)
library(maps)
library(sf)
library(spatialEco)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# setwd('/mnt/research/TIMBER/PVMvsENM')
ll <- c('longitude', 'latitude')
gcmList_ <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
cols <- c('gray83', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b')
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- as(world, "Spatial")
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred_iceMask.tif'
pollenRast <- stack(fileName)
names(pollenRast) <- c(paste0("Fraxinus_pollen_predictions_", 0:21, "kybp"))
pollenRast <- unstack(pollenRast)
pollenRast <- stack(rev(pollenRast))
library(psych)
library(vegan)
jaccard_fun <- function(x, y) {
intersection = length(intersect(x, y))
union = length(x) + length(y) - intersection
return (intersection/union)
}
pollen_threshold <- 0.03
# par(mfrow=c(1,2))
# fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred_iceMask.tif'
# pollenRast <- brick(fileName)
b <- out$simulationScale[[2]]
gcm <- 'Beyer'
load(paste0('./workspaces/07 - Analyses, ', gcm, ' Refugia'))
# par(mfrow=c(1,2))
# fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred_iceMask.tif'
# pollenRast <- brick(fileName)
b <- out$simulationScale[[2]]
thresholds <- seq(0.001, 1, by = 0.001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
t <- thresholds[1]
refugia <- b >= t
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
plot(b)
# par(mfrow=c(1,2))
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred_iceMask.tif'
pollenRast <- brick(fileName)
polenRast
b <- pollenRast$predictions.FRAXINUS_meanpred_iceMask.22
thresholds <- seq(0.001, 1, by = 0.001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
pdf(file = '/Users/laurenjenkins/Downloads/pollen_refugia.pdf', width = 11.5, height = 8.5)
for(t in thresholds) {
refugia <- b >= t
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
abund <- b * refugia
names(abund) <- 'refugiaAbund'
# nrows <- nrow(b)
# ncols <- ncol(b)
# ncells <- raster::ncell(b)
#
# v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
# cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
# cellNum <- raster::raster(cellNum, template=b)
# cellNum <- as.vector(cellNum)
# simRefugiaBinary <- as.vector(refugia)
# refugeCellNum <- cellNum[simRefugiaBinary]
# if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
#
# # mean refuge abundance
# meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
# k <- raster.change(abund, b, stat = c("kappa"), mask = T)
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(abund)), as.vector(as.matrix(b))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
j <- jaccard_fun(as.vector(as.matrix(abund)), as.vector(as.matrix(b)))
jaccard$j[which(jaccard$threshold == t)] <- j
# out <- list(
#   simulationScale = raster::stack(refugiaId, abund),
#   refugeCellNum = refugeCellNum,
#   meanRefugeAbund = meanRefugeAbund
# )
# write.xlsx(kappa, file = './pollen_refugia_thresholds.xlsx', sheetName = paste0(gcm, '_kappa'),
#            append = T, row.names = F)
# write.xlsx(jaccard, file = './pollen_refugia_thresholds.xlsx', sheetName = paste0(gcm, '_jaccard'),
#            append = T, row.names = F)
}
dev.off()
pollen_threshold <- 0.03
# par(mfrow=c(1,2))
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred_iceMask.tif'
pollenRast <- brick(fileName)
pollenRast <- pollenRast$predictions.FRAXINUS_meanpred_iceMask.22
gcmRast <- out$simulationScale[[2]]
thresholds <- seq(0.001, 1, by = 0.001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
pdf(file = '/Users/laurenjenkins/Downloads/pollen_refugia.pdf', width = 11.5, height = 8.5)
for(t in thresholds) {
refugia <- pollenRast >= t
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(pollenRast),' ', title), axes = F)
abund <- pollenRast * refugia
names(abund) <- 'refugiaAbund'
# nrows <- nrow(b)
# ncols <- ncol(b)
# ncells <- raster::ncell(b)
#
# v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
# cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
# cellNum <- raster::raster(cellNum, template=b)
# cellNum <- as.vector(cellNum)
# simRefugiaBinary <- as.vector(refugia)
# refugeCellNum <- cellNum[simRefugiaBinary]
# if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
#
# # mean refuge abundance
# meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
# k <- raster.change(abund, b, stat = c("kappa"), mask = T)
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(pollenRast))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
j <- jaccard_fun(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(pollenRast)))
jaccard$j[which(jaccard$threshold == t)] <- j
# out <- list(
#   simulationScale = raster::stack(refugiaId, abund),
#   refugeCellNum = refugeCellNum,
#   meanRefugeAbund = meanRefugeAbund
# )
# write.xlsx(kappa, file = './pollen_refugia_thresholds.xlsx', sheetName = paste0(gcm, '_kappa'),
#            append = T, row.names = F)
# write.xlsx(jaccard, file = './pollen_refugia_thresholds.xlsx', sheetName = paste0(gcm, '_jaccard'),
#            append = T, row.names = F)
}
dev.off()
View(jaccard)
plot(gcmRast)
dev.off()
plot(gcmRast)
plot(refugiaId)
t <- 0.001
plot(pollenRast)
refugia <- pollenRast >= t
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(pollenRast),' ', title), axes = F)
max(pollenRast)
t <- 0.06
refugia <- pollenRast >= t
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(pollenRast),' ', title), axes = F)
pollenRast >= 0.06
pollenRast
refugia <- pollenRast > t
plot(refugia)
plot(pollenRast)
refugia <- pollenRast > 0.001
plot(refugia)
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
plot(refugiaId)
refugiaId <- raster::clump(refugia, directions = 4, gaps = F)
plot(refugiaId)
plot(refugia)
# par(mfrow=c(1,2))
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred_iceMask.tif'
pollenRast <- brick(fileName)
pollenRast <- pollenRast$predictions.FRAXINUS_meanpred_iceMask.22
gcmRast <- out$simulationScale[[2]]
thresholds <- seq(0.001, 1, by = 0.001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
pdf(file = '/Users/laurenjenkins/Downloads/pollen_refugia.pdf', width = 11.5, height = 8.5)
for(t in thresholds) {
refugia <- pollenRast >= t
refugiaId <- raster::clump(refugia, directions = 4, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(pollenRast),' ', title), axes = F)
abund <- pollenRast * refugia
names(abund) <- 'refugiaAbund'
# nrows <- nrow(b)
# ncols <- ncol(b)
# ncells <- raster::ncell(b)
#
# v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
# cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
# cellNum <- raster::raster(cellNum, template=b)
# cellNum <- as.vector(cellNum)
# simRefugiaBinary <- as.vector(refugia)
# refugeCellNum <- cellNum[simRefugiaBinary]
# if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
#
# # mean refuge abundance
# meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
# k <- raster.change(abund, b, stat = c("kappa"), mask = T)
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(pollenRast))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
j <- jaccard_fun(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(pollenRast)))
jaccard$j[which(jaccard$threshold == t)] <- j
# out <- list(
#   simulationScale = raster::stack(refugiaId, abund),
#   refugeCellNum = refugeCellNum,
#   meanRefugeAbund = meanRefugeAbund
# )
# write.xlsx(kappa, file = './pollen_refugia_thresholds.xlsx', sheetName = paste0(gcm, '_kappa'),
#            append = T, row.names = F)
# write.xlsx(jaccard, file = './pollen_refugia_thresholds.xlsx', sheetName = paste0(gcm, '_jaccard'),
#            append = T, row.names = F)
}
dev.off()
View(jaccard)
t <- thresholds[1]
refugia <- pollenRast >= t
refugiaId <- raster::clump(refugia, directions = 4, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(pollenRast),' ', title), axes = F)
abund <- pollenRast * refugia
names(abund) <- 'refugiaAbund'
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(pollenRast))))
k$kappa
j <- jaccard_fun(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(pollenRast)))
t <- 0.05
refugia <- pollenRast >= t
refugiaId <- raster::clump(refugia, directions = 4, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(pollenRast),' ', title), axes = F)
abund <- pollenRast * refugia
names(abund) <- 'refugiaAbund'
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(pollenRast))))
k$kappa
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund))))
k$kappa
pollen_threshold <- 0.03
# par(mfrow=c(1,2))
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred_iceMask.tif'
pollenRast <- brick(fileName)
pollenRast <- pollenRast$predictions.FRAXINUS_meanpred_iceMask.22
gcmRast <- out$simulationScale[[2]]
thresholds <- seq(0.001, 1, by = 0.001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
jaccard <- data.frame('threshold' = thresholds, 'j' = NA)
pdf(file = '/Users/laurenjenkins/Downloads/pollen_refugia.pdf', width = 11.5, height = 8.5)
for(t in thresholds) {
refugia <- pollenRast >= t
refugiaId <- raster::clump(refugia, directions = 4, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(pollenRast),' ', title), axes = F)
abund <- pollenRast * refugia
names(abund) <- 'refugiaAbund'
# nrows <- nrow(b)
# ncols <- ncol(b)
# ncells <- raster::ncell(b)
#
# v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
# cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
# cellNum <- raster::raster(cellNum, template=b)
# cellNum <- as.vector(cellNum)
# simRefugiaBinary <- as.vector(refugia)
# refugeCellNum <- cellNum[simRefugiaBinary]
# if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
#
# # mean refuge abundance
# meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
# k <- raster.change(abund, b, stat = c("kappa"), mask = T)
# generate a cohen's kappa value for pollen refugia vs GCM refugia
k <- cohen.kappa(cbind(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
j <- jaccard_fun(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)))
jaccard$j[which(jaccard$threshold == t)] <- j
# out <- list(
#   simulationScale = raster::stack(refugiaId, abund),
#   refugeCellNum = refugeCellNum,
#   meanRefugeAbund = meanRefugeAbund
# )
# write.xlsx(kappa, file = './pollen_refugia_thresholds.xlsx', sheetName = paste0(gcm, '_kappa'),
#            append = T, row.names = F)
# write.xlsx(jaccard, file = './pollen_refugia_thresholds.xlsx', sheetName = paste0(gcm, '_jaccard'),
#            append = T, row.names = F)
}
dev.off()
View(jaccard)
View(kappa)
t <- 0.001
refugia <- pollenRast >= t
refugiaId <- raster::clump(refugia, directions = 4, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(pollenRast),' ', title), axes = F)
abund <- pollenRast * refugia
names(abund) <- 'refugiaAbund'
j <- jaccard_fun(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)))
j
library(vegan)
vegdist(data.frame(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)), method = 'jaccard'))
vegdist(as.data.frame(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)), method = 'jaccard'))
vegdist(as.data.frame(as.matrix(gcmRast), as.vectoras.matrix(abund), method = 'jaccard'))
vegdist(as.data.frame(as.matrix(gcmRast), as.matrix(abund), method = 'jaccard'))
as.data.frame(gcmRast, abund)
as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund))
data.frame(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)))
vegdist(data.frame(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund))), method = 'jaccard')
jaccard <- function(raster1, raster2, threshhold, warn.uneven=TRUE) {
# Get the values above the threshhold
raster1.bin <- raster1 >= threshhold
raster2.bin <- raster2 >= threshhold
if (warn.uneven) {
raster1.size <- count(raster1.bin, 1)
raster2.size <- count(raster2.bin, 1)
# Sort from smaller to larger
sizes <- sort(c(raster1.size, raster2.size))
if (sizes[2] / sizes[1] > 20) {
warning("The extents of raster values above the threshhold differ more than 20-fold: Jaccard coefficient may not be informative.")
}
}
# Calculate the intersection of the two rasters, this is given by adding
# the binary rasters together -> 2 indicates intersection
combination <- raster1.bin + raster2.bin
intersection <- combination == 2
# Union is all the area covered by the both rasters
union <- combination >= 1
return(count(intersection, 1) / count(union, 1))
}
jaccard(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)), threshold = t)
jaccard(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)))
jaccard(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)), threshhold = t)
jaccard_fun(as.matrix(gcmRast), as.matrix(abund))
install.packages('philentropy')
library(philentropy)
philentropy::jaccard(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)))
philentropy::jaccard(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)), testNA = F)
philentropy::jaccard(as.vector(as.matrix(gcmRast)), as.vector(as.matrix(abund)), testNA = T)
