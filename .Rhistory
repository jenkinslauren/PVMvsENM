c <- cbind(c, cbiGeog)
n <- ncol(a)
colnames(a)[n] <- colnames(c)[n] <- sp
}
# save(a, c, file = paste0('./Models/Maxent/', gcm, '_evals.Rdata'))
save(a, c, file = paste0('./Models/Maxent/', gcm, '_geoEvals.Rdata'))
}
for (gcm in gcmList) {
load(paste0('./Models/Maxent/', gcm, '_geoEvals.Rdata'))
write.xlsx(a, file = './Models/Maxent/all_geoEvals.xlsx', sheetName = paste0(gcm, '_auc'),
append = T, row.names = F)
write.xlsx(c, file = './Models/Maxent/all_geoEvals.xlsx', sheetName = paste0(gcm, '_cbi'),
append = T, row.names = F)
}
for (gcm in gcmList) {
load(paste0('./Models/Maxent/', gcm, '_geoEvals.Rdata'))
write.xlsx(a, file = './Models/Maxent/geo_evals.xlsx', sheetName = paste0(gcm, '_auc'),
append = T, row.names = F)
write.xlsx(c, file = './Models/Maxent/geo_evals.xlsx', sheetName = paste0(gcm, '_cbi'),
append = T, row.names = F)
}
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
library(geosphere)
ll <- c('longitude', 'latitude')
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
gcmList <- c('Beyer', 'Lorenz_ccsm', 'ecbilt')
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
for(gcm in gcmList) {
a <- data.frame(c(seq(1:5)))
c <- data.frame(c(seq(1:5)))
colnames(a)[1] <- colnames(c)[1] <- 'fold #'
for(sp in speciesList) {
sp <- sp
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
# folderName <- paste0('./in/models/maxent/', speciesAb_,
#                      '_Maxent/Model Evaluation - Random K-Folds - ', gcm)
load(paste0(folderName, '/auc_cbi_vals.Rdata'))
a <- cbind(a, aucRandom)
c <- cbind(c, cbiRandom)
n <- ncol(a)
colnames(a)[n] <- colnames(c)[n] <- sp
}
save(a, c, file = paste0('./Models/Maxent/', gcm, '_evals.Rdata'))
# save(a, c, file = paste0('./in/models/maxent/', gcm, '_evals.Rdata'))
}
for (gcm in gcmList) {
load(paste0('./Models/Maxent/', gcm, '_evals.Rdata'))
write.xlsx(a, file = './Models/Maxent/random_evals.xlsx', sheetName = paste0(gcm, '_auc'),
append = T, row.names = F)
write.xlsx(c, file = './Models/Maxent/random_evals.xlsx', sheetName = paste0(gcm, '_cbi'),
append = T, row.names = F)
# load(paste0('./in/models/maxent/', gcm, '_evals.Rdata'))
# write.xlsx(a, file = './in/models/maxent/random_evals.xlsx', sheetName = paste0(gcm, '_auc'),
#            append = T, row.names = F)
# write.xlsx(c, file = './in/models/maxent/random_evals.xlsx', sheetName = paste0(gcm, '_cbi'),
#            append = T, row.names = F)
}
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
library(geosphere)
library(raster)
library(data.table)
library(dplyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
ll <- c('longitude', 'latitude')
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
thresholds <- list()
a <- 1
sp <- speciesList[a]
species <- gsub(tolower(sp), pattern=' ', replacement='_')
print(paste0("Species = ", species))
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
gcm <- 'Beyer'
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
# load bg sites, records, and rangeMap
load(paste0('./Background Sites/Random Background Sites across Study Region - ',
speciesAb, '.Rdata'))
load(paste0('./Models/Maxent/all_model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
load(paste0('./data_and_analyses/study_region/regions/little_range_map/',
rangeName, '.Rdata'))
load(paste0('./Models/Maxent/', gcm, '_evals.Rdata'))
rm(a)
rm(c)
# load k-folds for presences and background sites from model evaluations
t <- list()
i <- 1
load(paste0(folderName, '/Model ', i, '.Rdata'))
for(a in 1:length(speciesList)) {
sp <- speciesList[a]
species <- gsub(tolower(sp), pattern=' ', replacement='_')
print(paste0("Species = ", species))
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
# load bg sites, records, and rangeMap
load(paste0('./Background Sites/Random Background Sites across Study Region - ',
speciesAb, '.Rdata'))
load(paste0('./Models/Maxent/all_model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
load(paste0('./data_and_analyses/study_region/regions/little_range_map/',
rangeName, '.Rdata'))
# load(paste0('./Models/Maxent/', gcm, '_evals.Rdata'))
# load k-folds for presences and background sites from model evaluations
t <- list()
for(i in 1:5) {
print(paste0('K-fold ', i, ':'))
load(paste0(folderName, '/Model ', i, '.Rdata'))
# temp <- enmSdm::thresholdWeighted(predPres, predBg, na.rm = T)
temp <- enmSdm::thresholdWeighted(predPres, predBg, na.rm = T)
t <- append(t, temp['msss'])
}
thresholds[[a]] <- t
}
thresholds <- data.frame(t(rbindlist(thresholds, fill = T)))
colnames(thresholds) <- speciesList
rownames(thresholds) <- paste("K-fold", 1:5)
thresholds <- rbind(thresholds, mean = summarize_all(thresholds, mean))
View(thresholds)
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
f <- fileName[1]
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
threshold <- 0.51
speciesAb_ <-  gsub('\\_GCM.*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
load(paste0('./Models/Maxent/model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
load(paste0('./Models/Maxent/all_model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
b <- brick(f)
plot(b[[1]])
plot(b[[22]])
names(b) <- paste0(21, ' Kybp')
b <- b[[1]]
names(b) <- paste0(21, ' Kybp')
title <- gsub('.*/', '', s)
# par(mfrow=c(1,2))
refugia <- b >= threshold
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
# plot(b[[22]], main = paste0(names(b[[22]]),' ', title),  col = colors, axes = F)
abund <- b * refugia
names(abund) <- 'refugiaAbund'
dev.off()
nrows <- nrow(b)
ncols <- ncol(bb)
ncols <- ncol(b)
ncells <- raster::ncell(b)
v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
cellNum <- raster::raster(cellNum, template=b[[i]])
cellNum <- as.vector(cellNum)
simRefugiaBinary <- as.vector(refugia)
refugeCellNum <- cellNum[simRefugiaBinary]
if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
cellNum <- raster::raster(cellNum, template=b)
# mean refuge abundance
meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
out <- list(
simulationScale = raster::stack(refugiaId, abund),
refugeCellNum = refugeCellNum,
meanRefugeAbund = meanRefugeAbund
)
out
plot(out$simulationScale)
dev.off()
plot(b)
# par(mfrow=c(1,2))
refugia <- b >= threshold
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
library(geosphere)
library(raster)
library(data.table)
library(dplyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# setwd('/mnt/research/TIMBER/PVMvsENM')
ll <- c('longitude', 'latitude')
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
thresholds <- list()
a <- 1
sp <- speciesList[a]
species <- gsub(tolower(sp), pattern=' ', replacement='_')
print(paste0("Species = ", species))
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
gcm <- 'Beyer'
# load bg sites, records, and rangeMap
load(paste0('./Background Sites/Random Background Sites across Study Region - ',
speciesAb, '.Rdata'))
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
load(paste0('./Models/Maxent/all_model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
load(paste0('./data_and_analyses/study_region/regions/little_range_map/',
rangeName, '.Rdata'))
# load k-folds for presences and background sites from model evaluations
t <- list()
plot(rangeMap, main = paste0(sp, ', k-fold #1'))
points(records$longitude, records$latitude)
i <- 1
load(paste0(folderName, '/Model ', i, '.Rdata'))
points(records$longitude[kPres==1])
points(records$longitude[kPres==1], records$latitude[kPres==1], bg = 'red', pch = 21)
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
library(geosphere)
library(raster)
library(data.table)
library(dplyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# setwd('/mnt/research/TIMBER/PVMvsENM')
ll <- c('longitude', 'latitude')
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
sp <- speciesList[1]
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
rasts <- stack(paste0('./predictions/', gcm, '/', speciesAb_, '_GCM_', gcm,
'_PC', pc, '.tif'))
gcm <- 'Beyer'
rasts <- stack(paste0('./predictions/', gcm, '/', speciesAb_, '_GCM_', gcm,
'_PC', pc, '.tif'))
subset(rasts, 22)
load(paste0('./data_and_analyses/study_region/regions/little_range_map/',
rangeName, '.Rdata'))
littleRangeSpAlb <- sp::spTransform(as(rangeMap, 'Spatial'), getCRS('albersNA', TRUE))
littleRangeSpAlb <- sp::spTransform(rangeMap, getCRS('albersNA', TRUE))
present <- subset(rasts, 701)
present <- subset(rasts, 23)
present <- subset(rasts, 22)
# extract predictions from cells inside or overlapping Little's range
insideLittleList <- raster::extract(present, littleRangeSpAlb, weights=TRUE,
normalizeWeights=FALSE, cellnumbers=TRUE)
plot(present)
plot(insideLittleList)
View(insideLittleList)
inside <- data.frame()
for (i in seq_along(insideLittleList)) inside <- rbind(inside, insideLittleList[[i]])
aggSum <- aggregate(inside, by=list(inside$cell), 'sum')
aggMean <- aggregate(inside, by=list(inside$cell), 'mean', na.rm=TRUE)
inside <- data.frame(cell=aggSum$cell, pred=aggMean$value, weight=aggSum$weight)
if (any(inside$weight > 1)) inside$weight[inside$weight > 1] <- 1
# extract predictions to cells outside or overlapping Little's range
outside <- as.vector(present)
outside <- data.frame(
cell=1:ncell(present),
pred=outside,
weight=1
)
# adjust weights of predictions outside Little range by proportion of cell inside the range
for (i in 1:nrow(inside)) outside$weight[outside$cell == i] = 1 - inside$weight[i]
# AUC
auc <- aucWeighted(inside$pred, outside$pred, presWeight=inside$weight, contrastWeight=outside$weight, na.rm=TRUE)
# CBI
cbi <- contBoyce(inside$pred, outside$pred, presWeight=inside$weight, na.rm=TRUE)
# determine threshold that maximizes TSS
best <- c(NA, -Inf)
names(best) <- c('threshold', 'tss')
for (thold in seq(0, 1, by=0.0001)) {
tss <- tssWeighted(inside$pred, outside$pred, presWeight=inside$weight,
contrastWeight=outside$weight, na.rm=TRUE, thresholds=thold)
if (tss > best[['tss']]) {
best[['threshold']] <- thold
best[['tss']] <- tss
}
stats <- thresholdStats(best[['threshold']], inside$pred, outside$pred,
presWeight=inside$weight, contrastWeight=outside$weight,
na.rm=TRUE)
thresholds <- rbind(
thresholds,
data.frame(
gcm = gcm,
threshold = best[['threshold']],
auc = auc,
cbi = cbi,
tss = best[['tss']],
se = stats[['sensitivity']],
sp = stats[['specificity']]
)
thresholds <- data.frame()
thresholds <- rbind(
thresholds,
data.frame(
gcm = gcm,
threshold = best[['threshold']],
auc = auc,
cbi = cbi,
tss = best[['tss']],
se = stats[['sensitivity']],
sp = stats[['specificity']]
)
View(thresholds)
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
f <- fileName[1]
# pdf(file = paste0('./predictions/PDF_output/', s, '.pdf'), width = 11, height = 8.5)
b <- brick(f)
b <- b[[1]]
names(b) <- paste0(21, ' Kybp')
title <- gsub('.*/', '', s)
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
title <- gsub('.*/', '', s)
# par(mfrow=c(1,2))
refugia <- b >= threshold
threshold <- 0.6312
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
# par(mfrow=c(1,2))
refugia <- b >= threshold
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
View(inside)
# SDM Template to run on cluster
# Author: Lauren Jenkins
# 27 April 2022
rm(list = ls())
# Load required packages.
# Load packages
library(enmSdm)
# for handling rasters
library(raster)
library(rgdal)
library(dismo)
# library(rgeos) # not used, but may be helpful when debugging
# library(terra)
# library(maxnet)
# visualization tools
library(sp)
library(sf)
library(maps)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
# additional tools
library(tools)
library(units)
library(dplyr)
library(tidyr)
setwd('/mnt/research/TIMBER/PVMvsENM')
args <- commandArgs(TRUE)
gcm <- args[1]
# nad27
default_crs = sf::st_crs(4267)
# set constants
ll <- c('longitude', 'latitude')
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
pc <- 5
climYear <- 0
lorenzRast <- raster::raster('./in/env_data/Lorenz/ccsm/0BP/an_avg_ETR.tif')
# SDM Template
# Author: Lauren Jenkins
# 25 January 2022
# Last updated: 18 February 2022
rm(list = ls())
# Load required packages.
# Load packages
library(enmSdm)
# for handling rasters
library(raster)
library(rgdal)
library(dismo)
# library(rgeos) # not used, but may be helpful when debugging
# library(terra)
# library(maxnet)
# visualization tools
library(sp)
library(sf)
library(maps)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
# additional tools
library(tools)
library(units)
library(dplyr)
library(tidyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# nad27
default_crs = sf::st_crs(4267)
# setwd('/Users/laurenjenkins/Documents/MOBOT/PVMvsENM/')
# load('./workspaces/01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
# set constants
ll <- c('longitude', 'latitude')
yrs <- seq(22,1,by=-1)
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
pc <- 5
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
# gcmList <- c('Beyer')
climYear <- 0
lorenzRast <- raster::raster('./data_and_analyses/env_data/Lorenz/V2/ccsm_21-0k_all_tifs_LJ/0BP/an_avg_ETR.tif')
gcm <- 'ecbilt'
sp <- speciesList[1]
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
load(paste0('./workspaces/05 - Modeling Workspace - ', speciesAb_,
' Model Output - PC', pc, '_GCM_', gcm))
envModel <- envModel_tune$models[[96]]
# prediction
# envMap <- predict(climate[[predictors]], envModel, clamp = F, type = 'cloglog')
envMap <- predict(
climate[[predictors]],
envModel,
filename = paste0('./Models/Maxent/', speciesAb_, '_Maxent/prediction_PC',
pc, '_GCM', gcm, '_', climYear, 'ybp'),
clamp = F,
format='GTiff',
overwrite = T,
type='cloglog')
# prediction
# envMap <- predict(climate[[predictors]], envModel, clamp = F, type = 'cloglog')
envMap <- predict(
climate[[predictors]],
envModel,
filename = paste0('./Models/Maxent/', speciesAb_, '_Maxent/prediction_PC',
pc, '_GCM', gcm, '_', climYear, 'ybp'),
clamp = F,
format='GTiff',
overwrite = T,
type='cloglog')
plot(envMap)
dev.off()
plot(envMap)
envMap
plot(envMap)
predictors <- c(paste0('pca', 1:pc))
# envModel <- enmSdm::trainMaxNet(data = env, resp = 'presBg',
#                                 out = c('models', 'tuning'))
modelFileName <- paste0('./Models/Maxent/', speciesAb_, '_Maxent/Model_PC',
pc, '_GCM_', gcm, '.Rdata')
save(envModel, file = modelFileName, compress = T, overwrite = T)
# prediction
# envMap <- predict(climate[[predictors]], envModel, clamp = F, type = 'cloglog')
envMap <- predict(
climate[[predictors]],
envModel,
filename = paste0('./Models/Maxent/', speciesAb_, '_Maxent/prediction_PC',
pc, '_GCM', gcm, '_', climYear, 'ybp'),
clamp = F,
format='GTiff',
overwrite = T,
type='cloglog')
paste0('./Models/Maxent/', speciesAb_, '_Maxent/prediction_PC',
pc, '_GCM', gcm, '_', climYear, 'ybp')
# prediction
# envMap <- predict(climate[[predictors]], envModel, clamp = F, type = 'cloglog')
envMap <- predict(
climate[[predictors]],
envModel,
filename = paste0('./Models/Maxent/', speciesAb_, '_Maxent/GCM_', gcm,
'_PC', pc, '_', climYear, 'ybp'),
clamp = F,
format='GTiff',
overwrite = T,
type='cloglog')
