load(paste0('./data_and_analyses/env_data/Lorenz/V2/ecbilt_21-0k_all_tifs_LJ/pca_pc', pc, '.Rdata'))
fileName <- paste0('./data_and_analyses/env_data/Lorenz/V2/ecbilt_21-0k_all_tifs_LJ/envDataClipped_',
climYear, 'YBP_pc', pc, '.tif')
clim <- lorenz
workingFolder <- paste0('./data_and_analyses/env_data/Lorenz/V2/',
gcm, '_21-0k_all_tifs_LJ/', climYear, 'BP')
vars <- names(clim[[1]])
# vars <- sub('\\.tif.*', '', list.files(path = workingFolder,
#                                        pattern='*.tif', all.files = TRUE, full.names = FALSE))
# vars <- vars[lapply(vars, function(x) length(grep("pca_", x, value = F))) == 0]
}
if (file.exists(fileName)) {
envData <- brick(fileName)
# rename raster layers to pc's
names(envData) <- paste0('pca', 1:pc)
} else {
pcPrediction <<- list()
# label each env layer by variable and year
for (i in 1:length(clim)) {
names(clim[[i]]) <- vars
pcPrediction[i] <- raster::predict(clim[[i]], pca, index = 1:pc)
names(pcPrediction[[i]]) <- paste0("pc", 1:pc, "_", (i-1)*1000, "KYBP")
}
envDataPca <- stack(pcPrediction)
# keep only rasters (first five rasters) for climate year
envYr <- pcPrediction[[(climYear/1000) + 1]]
# plot(envYr)
names(envYr) <- paste0('pca', 1:pc)
# check projections = wgs84
print("Ensure that the projection of these rasters is WGS84:")
print(paste0("Projection of envYr = ", projection(envYr)))
# define study region & extent, load if already defined
# if (file.exists('./data_and_analyses/study_region/Study Region.Rdata') &
#     file.exists('./data_and_analyses/study_region/Study Region Extent.Rdata')) {
#   load('./data_and_analyses/study_region/Study Region.Rdata')
#   load('./data_and_analyses/study_region/Study Region Extent.Rdata')
# } else {
#   studyRegion <- rgdal::readOGR('/Volumes/lj_mac_22/MOBOT/PVMvsENM/data_and_analyses/study_region',
#                                 'study_region')
#   studyRegion <- crop(studyRegion, extent(-178.2166, 83.7759, -55.90223, 83.6236))
#   projection(studyRegion) <- getCRS("WGS84")
#   studyExtent <- extent(studyRegion)
#   save(studyRegion,
#        file='/Volumes/lj_mac_22/MOBOT/PVMvsENM/data_and_analyses/study_region/Study Region.Rdata',
#        compress=TRUE)
#   save(studyExtent,
#        file='/Volumes/lj_mac_22/MOBOT/PVMvsENM/data_and_analyses/study_region/Study Region Extent.Rdata', compress=TRUE)
# }
# clip environmental PCAs to study extent for given species, visualize, and save:
envDataClipped <- list()
for (n in 1:nlayers(envYr)) {
x <- envYr[[n]]
x <- crop(x, extent(studyRegionRasts[[yrs[(climYear/1000) + 1]]]))
# x <<- mask(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[n]] <- x
}
envData <- stack(envDataClipped)
plot(envData)
writeRaster(envData, fileName, format = 'GTiff', overwrite = T)
}
fileName <- paste0('./data_and_analyses/cleaned_records/',
species, '_finalRecords.rData')
load(fileName)
records <- data.frame(speciesSf_filtered_final)
records$geometry <- gsub("[c()]", "", records$geometry)
records <- separate(data = records,
col = 'geometry',
into = ll,
sep = "\\,")
records$longitude <- as.double(records$longitude)
records$latitude <- as.double(records$latitude)
occsEnv <- raster::extract(envData,
cbind(records$longitude,
records$latitude))
occsEnvDf <- as.data.frame(occsEnv)
records <- cbind(records, occsEnvDf)
# records in the water:
if (exists('water')) rm(water) # will keep "water" from previous species being used
if (any(is.na(rowSums(occsEnvDf)))) {
water <- records[which(is.na(rowSums(occsEnvDf))), ]
water <- SpatialPointsDataFrame(water[,ll], data = water,
proj4 = getCRS('wgs84', TRUE))
}
# remove records in water from dataset:
if (any(is.na(rowSums(occsEnvDf)))) records <-
records[-which(is.na(rowSums(occsEnvDf))), ]
# visualize the points that fall in the water
# convert to sp object
recordsSp <- SpatialPointsDataFrame(records[, ll], data = records,
proj4 = getCRS('wgs84', TRUE))
# visualize
plot(recordsSp, pch = 16, cex = 0.5, col = "red",
main = paste0(sp, ' occurrences (BIEN) thinned'))
if (exists("water")) {
plot(water, col = 'blue', add = TRUE)
}
map("state", add = TRUE)
map("world", add = TRUE)
save.image(paste0('./workspaces/04 - Modeling Workspace - Clipping ',
sp, '_PC_', pc, '_GCM_', gcm))
bufferFileName <- paste0('./data_and_analyses/cleaned_records/', species, '_buffer.rData')
load(bufferFileName)
# calculate calibration region buffer at 160-km to extract bg sites
# calibBuffer <- st_buffer(st_transform(st_as_sf(x = recordsSp), getCRS('albersNA')),
#                          dist = as_units(160, 'km'))
calibBuffer <- st_buffer(st_transform(st_as_sf(x = recordsSp), getCRS('albersNA')),
dist = as_units(320, 'km'))
calibBuffer <- st_union(calibBuffer)
calibRegionSpAlb <- sp::spTransform(as(calibBuffer, 'Spatial'), getCRS('albersNA', TRUE))
calibRegionSpWgs <- sp::spTransform(calibRegionSpAlb, getCRS('wgs84', TRUE))
# bgFileName <- paste0('./Background Sites/Random Background Sites across Study Region - ',
#                      speciesAb_, '.Rdata')
bgFileName <- './Background Sites/Random Background Sites across Study Region.Rdata'
# load bg sites in calibration region for a species if they have already been defined
# loaded in: bgTestSp, bgCalib, bgEnv, bg
# otherwise, get 20,000 random background sites from calibration region
# we will only keep 10,000 points...this accounts for points that may fall in water
if (file.exists(bgFileName)) load(bgFileName) else {
bgTestSpAlb <- suppressWarnings(sp::spsample(calibRegionSpAlb, n=20000,
type='random', iter = 10))
# bgTestSpAlb <- suppressWarnings(sp::spsample(studyRegionRastsAlb, n=20000,
#                                              type='random', iter = 10))
bgTestSp <- sp::spTransform(bgTestSpAlb, getCRS('wgs84', TRUE))
bgCalib <- as.data.frame(coordinates(bgTestSp))
names(bgCalib) <- ll
save(bgTestSp, bgCalib, file = bgFileName, compress = T, overwrite = T)
}
# sanity check: plot the background sites
plot(bgTestSp, pch = 16, cex = 0.5, col = "red",
main = paste0(sp, ' background sites'))
plot(calibRegionSpWgs, add = TRUE, border = 'blue')
map("state", add = TRUE)
map("world", add = TRUE)
# extract environment at random background sites
climate <- envData
bgEnv <- raster::extract(climate, bgCalib)
bgEnv <- as.data.frame(bgEnv)
# remove any sites with NA for at least one variable
isNa <- is.na(rowSums(bgEnv))
if (any(isNa)) {
bgCalib <- bgCalib[-which(isNa), ]
bgEnv <- bgEnv[-which(isNa), ]
}
# only keep 10,000 background sites
bgCalib <- bgCalib[1:10000,]
bgEnv <- bgEnv[1:10000,]
# combine with coordinates and rename coordinate fields
bg <- cbind(bgCalib, bgEnv)
names(bg)[1:2] <- ll
presBg <- c(rep(1, nrow(records)), rep(0, nrow(bg)))
occsEnv <- occsEnv[complete.cases(occsEnv), ]
env <- rbind(occsEnv, bgEnv)
env <- cbind(presBg, env)
env <- as.data.frame(env)
env <- env[complete.cases(env), ]
# model species
envModel_tune <- enmSdm::trainMaxNet(data = env, resp = 'presBg',
classes = 'lpq', out = c('models', 'tuning'))
envModel <- envModel_tune$models[[1]]
modelFileName <- paste0('./Models/Maxent/', speciesAb_, '_Maxent/Model_PC',
pc, '_GCM_', gcm, '.Rdata')
save(envModel, file = modelFileName, compress = T, overwrite = T)
predictors <- c(paste0('pca', 1:pc))
# prediction
# envMap <- predict(climate[[predictors]], envModel, clamp = F, type = 'cloglog')
envMap <- predict(
climate[[predictors]],
envModel,
filename = paste0('./Models/Maxent/', speciesAb_, '_Maxent/GCM_', gcm,
'_PC', pc, '_', climYear, 'ybp'),
clamp = F,
format='GTiff',
overwrite = T,
type='cloglog')
envMapSp <- rasterToPolygons(envMap)
plot(rangeMap, border = 'blue', main = paste0('Maxent output, ', sp,
' occurrences'))
rangeMap <- range
plot(rangeMap, border = 'blue', main = paste0('Maxent output, ', sp,
' occurrences'))
plot(envMap, add = TRUE)
plot(rangeMap, border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
points(records$longitude, records$latitude, pch = 16, cex = 0.6, col = 'red')
plot(envMap, main = paste0('Maxent output, ',
sp,
' occurrences'))
plot(rangeMap, border = 'blue', add = TRUE)
outputFileName <<- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model_PC', pc, '_GCM_', gcm, '.rData')
save(rangeMap, envMap, envModel, records, file = outputFileName, overwrite = T)
outputFileName <<- paste0('./cluster/all_model_outputs/', speciesAb_,
'_GCM', gcm, '_PC', pc, '.Rdata')
save(rangeMap, envMap, envModel, records, file = outputFileName, overwrite = T)
save.image(paste0('./workspaces/05 - Modeling Workspace - ', speciesAb_,
' Model Output - PC', pc, '_GCM_', gcm))
# SDM Template
# Author: Lauren Jenkins
# 25 January 2022
# Last updated: 18 February 2022
rm(list = ls())
# Load required packages.
# Load packages
library(enmSdm)
# for handling rasters
library(raster)
library(rgdal)
library(dismo)
# library(rgeos) # not used, but may be helpful when debugging
# library(terra)
# library(maxnet)
# visualization tools
library(sp)
library(sf)
library(maps)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
# additional tools
library(tools)
library(units)
library(dplyr)
library(tidyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# nad27
default_crs = sf::st_crs(4267)
wgs_crs <- getCRS('wgs84')
# setwd('/Users/laurenjenkins/Documents/MOBOT/PVMvsENM/')
# load('./workspaces/01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
# set constants
ll <- c('longitude', 'latitude')
yrs <- seq(22,1,by=-1)
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
pc <- 5
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
# gcmList <- c('Beyer')
climYear <- 0
lorenzRast <- raster::raster('./data_and_analyses/env_data/Lorenz/V2/ccsm_21-0k_all_tifs_LJ/0BP/an_avg_ETR.tif')
gcm <- 'ecbilt'
sp <- 'Fraxinus'
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- 'Fraxinus'
# Load environmental PCA rasters.
# If already clipped, load that.
# Otherwise, clip the data to present.
studyRegionFileName <- './data_and_analyses/study_region/regions/study_region_daltonIceMask_lakesMasked_linearIceSheetInterpolation.tif'
studyRegionRasts <- brick(studyRegionFileName)
if (gcm == 'Beyer') { # Beyer
load('./data_and_analyses/env_data/Beyer/PCA_clim.Rdata')
load(paste0('./data_and_analyses/env_data/Beyer/pca_pc', pc, '.Rdata'))
fileName <- paste0('./data_and_analyses/env_data/Beyer/envDataClipped_',
climYear, 'YBP_pc', pc, '.tif')
vars <- c("BIO1", paste0('BIO', 4:19), "cloudiness", "relative_humidity")
} else if (gcm == 'Lorenz_ccsm') { # CCSM
load(paste0('./data_and_analyses/env_data/Lorenz/PCA_', gcm, '_clim.Rdata'))
load(paste0('./data_and_analyses/env_data/Lorenz/V2/ccsm_21-0k_all_tifs_LJ/pca_pc', pc, '.Rdata'))
fileName <- paste0('./data_and_analyses/env_data/Lorenz/V2/ccsm_21-0k_all_tifs_LJ/envDataClipped_',
climYear, 'YBP_pc', pc, '.tif')
clim <- lorenz
workingFolder <- paste0('./data_and_analyses/env_data/Lorenz/V2/ccsm_21-0k_all_tifs_LJ/',
climYear, 'BP')
vars <- names(clim[[1]])
# vars <- sub('\\.tif.*', '', list.files(path = workingFolder,
#                                        pattern='*.tif', all.files = TRUE, full.names = FALSE))
# vars <- vars[lapply(vars, function(x) length(grep("pca_", x, value = F))) == 0]
} else { # ECBilt
load(paste0('./data_and_analyses/env_data/Lorenz/PCA_', gcm, '_clim.Rdata'))
load(paste0('./data_and_analyses/env_data/Lorenz/V2/ecbilt_21-0k_all_tifs_LJ/pca_pc', pc, '.Rdata'))
fileName <- paste0('./data_and_analyses/env_data/Lorenz/V2/ecbilt_21-0k_all_tifs_LJ/envDataClipped_',
climYear, 'YBP_pc', pc, '.tif')
clim <- lorenz
workingFolder <- paste0('./data_and_analyses/env_data/Lorenz/V2/',
gcm, '_21-0k_all_tifs_LJ/', climYear, 'BP')
vars <- names(clim[[1]])
# vars <- sub('\\.tif.*', '', list.files(path = workingFolder,
#                                        pattern='*.tif', all.files = TRUE, full.names = FALSE))
# vars <- vars[lapply(vars, function(x) length(grep("pca_", x, value = F))) == 0]
}
gcm
if (file.exists(fileName)) {
envData <- brick(fileName)
# rename raster layers to pc's
names(envData) <- paste0('pca', 1:pc)
} else {
pcPrediction <<- list()
# label each env layer by variable and year
for (i in 1:length(clim)) {
names(clim[[i]]) <- vars
pcPrediction[i] <- raster::predict(clim[[i]], pca, index = 1:pc)
names(pcPrediction[[i]]) <- paste0("pc", 1:pc, "_", (i-1)*1000, "KYBP")
}
envDataPca <- stack(pcPrediction)
# keep only rasters (first five rasters) for climate year
envYr <- pcPrediction[[(climYear/1000) + 1]]
# plot(envYr)
names(envYr) <- paste0('pca', 1:pc)
# check projections = wgs84
print("Ensure that the projection of these rasters is WGS84:")
print(paste0("Projection of envYr = ", projection(envYr)))
# define study region & extent, load if already defined
# if (file.exists('./data_and_analyses/study_region/Study Region.Rdata') &
#     file.exists('./data_and_analyses/study_region/Study Region Extent.Rdata')) {
#   load('./data_and_analyses/study_region/Study Region.Rdata')
#   load('./data_and_analyses/study_region/Study Region Extent.Rdata')
# } else {
#   studyRegion <- rgdal::readOGR('/Volumes/lj_mac_22/MOBOT/PVMvsENM/data_and_analyses/study_region',
#                                 'study_region')
#   studyRegion <- crop(studyRegion, extent(-178.2166, 83.7759, -55.90223, 83.6236))
#   projection(studyRegion) <- getCRS("WGS84")
#   studyExtent <- extent(studyRegion)
#   save(studyRegion,
#        file='/Volumes/lj_mac_22/MOBOT/PVMvsENM/data_and_analyses/study_region/Study Region.Rdata',
#        compress=TRUE)
#   save(studyExtent,
#        file='/Volumes/lj_mac_22/MOBOT/PVMvsENM/data_and_analyses/study_region/Study Region Extent.Rdata', compress=TRUE)
# }
# clip environmental PCAs to study extent for given species, visualize, and save:
envDataClipped <- list()
for (n in 1:nlayers(envYr)) {
x <- envYr[[n]]
x <- crop(x, extent(studyRegionRasts[[yrs[(climYear/1000) + 1]]]))
# x <<- mask(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[n]] <- x
}
envData <- stack(envDataClipped)
plot(envData)
writeRaster(envData, fileName, format = 'GTiff', overwrite = T)
}
fileName <- paste0('./data_and_analyses/cleaned_records/',
species, '_finalRecords.rData')
load(fileName)
records <- data.frame(speciesSf_filtered_final)
records$geometry <- gsub("[c()]", "", records$geometry)
records <- separate(data = records,
col = 'geometry',
into = ll,
sep = "\\,")
records$longitude <- as.double(records$longitude)
records$latitude <- as.double(records$latitude)
occsEnv <- raster::extract(envData,
cbind(records$longitude,
records$latitude))
occsEnvDf <- as.data.frame(occsEnv)
records <- cbind(records, occsEnvDf)
# records in the water:
if (exists('water')) rm(water) # will keep "water" from previous species being used
if (any(is.na(rowSums(occsEnvDf)))) {
water <- records[which(is.na(rowSums(occsEnvDf))), ]
water <- SpatialPointsDataFrame(water[,ll], data = water,
proj4 = getCRS('wgs84', TRUE))
}
# remove records in water from dataset:
if (any(is.na(rowSums(occsEnvDf)))) records <-
records[-which(is.na(rowSums(occsEnvDf))), ]
# visualize the points that fall in the water
# convert to sp object
recordsSp <- SpatialPointsDataFrame(records[, ll], data = records,
proj4 = getCRS('wgs84', TRUE))
# visualize
plot(recordsSp, pch = 16, cex = 0.5, col = "red",
main = paste0(sp, ' occurrences (BIEN) thinned'))
if (exists("water")) {
plot(water, col = 'blue', add = TRUE)
}
map("state", add = TRUE)
map("world", add = TRUE)
save.image(paste0('./workspaces/04 - Modeling Workspace - Clipping ',
sp, '_PC_', pc, '_GCM_', gcm))
# setwd('/Users/laurenjenkins/Documents/MOBOT/PVMvsENM/')
load('./workspaces/01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
range.list <- list(littleRange_FraxAmer, littleRange_FraxCaro,
littleRange_FraxCusp, littleRange_FraxGreg,
littleRange_FraxNigr, littleRange_FraxPenn,
littleRange_FraxProf, littleRange_FraxQuad)
range <- do.call(merge, range.list)
rangeMap <- range
bufferFileName <- paste0('./data_and_analyses/cleaned_records/', species, '_buffer.rData')
load(bufferFileName)
# calculate calibration region buffer at 160-km to extract bg sites
# calibBuffer <- st_buffer(st_transform(st_as_sf(x = recordsSp), getCRS('albersNA')),
#                          dist = as_units(160, 'km'))
calibBuffer <- st_buffer(st_transform(st_as_sf(x = recordsSp), getCRS('albersNA')),
dist = as_units(320, 'km'))
calibBuffer <- st_union(calibBuffer)
calibRegionSpAlb <- sp::spTransform(as(calibBuffer, 'Spatial'), getCRS('albersNA', TRUE))
calibRegionSpWgs <- sp::spTransform(calibRegionSpAlb, getCRS('wgs84', TRUE))
# bgFileName <- paste0('./Background Sites/Random Background Sites across Study Region - ',
#                      speciesAb_, '.Rdata')
bgFileName <- './Background Sites/Random Background Sites across Study Region.Rdata'
# load bg sites in calibration region for a species if they have already been defined
# loaded in: bgTestSp, bgCalib, bgEnv, bg
# otherwise, get 20,000 random background sites from calibration region
# we will only keep 10,000 points...this accounts for points that may fall in water
if (file.exists(bgFileName)) load(bgFileName) else {
bgTestSpAlb <- suppressWarnings(sp::spsample(calibRegionSpAlb, n=20000,
type='random', iter = 10))
# bgTestSpAlb <- suppressWarnings(sp::spsample(studyRegionRastsAlb, n=20000,
#                                              type='random', iter = 10))
bgTestSp <- sp::spTransform(bgTestSpAlb, getCRS('wgs84', TRUE))
bgCalib <- as.data.frame(coordinates(bgTestSp))
names(bgCalib) <- ll
save(bgTestSp, bgCalib, file = bgFileName, compress = T, overwrite = T)
}
# sanity check: plot the background sites
plot(bgTestSp, pch = 16, cex = 0.5, col = "red",
main = paste0(sp, ' background sites'))
plot(calibRegionSpWgs, add = TRUE, border = 'blue')
map("state", add = TRUE)
map("world", add = TRUE)
# extract environment at random background sites
climate <- envData
bgEnv <- raster::extract(climate, bgCalib)
bgEnv <- as.data.frame(bgEnv)
# remove any sites with NA for at least one variable
isNa <- is.na(rowSums(bgEnv))
if (any(isNa)) {
bgCalib <- bgCalib[-which(isNa), ]
bgEnv <- bgEnv[-which(isNa), ]
}
# only keep 10,000 background sites
bgCalib <- bgCalib[1:10000,]
bgEnv <- bgEnv[1:10000,]
# combine with coordinates and rename coordinate fields
bg <- cbind(bgCalib, bgEnv)
names(bg)[1:2] <- ll
presBg <- c(rep(1, nrow(records)), rep(0, nrow(bg)))
occsEnv <- occsEnv[complete.cases(occsEnv), ]
env <- rbind(occsEnv, bgEnv)
env <- cbind(presBg, env)
env <- as.data.frame(env)
env <- env[complete.cases(env), ]
# model species
envModel_tune <- enmSdm::trainMaxNet(data = env, resp = 'presBg',
classes = 'lpq', out = c('models', 'tuning'))
envModel <- envModel_tune$models[[1]]
modelFileName <- paste0('./Models/Maxent/', speciesAb_, '_Maxent/Model_PC',
pc, '_GCM_', gcm, '.Rdata')
save(envModel, file = modelFileName, compress = T, overwrite = T)
predictors <- c(paste0('pca', 1:pc))
# prediction
# envMap <- predict(climate[[predictors]], envModel, clamp = F, type = 'cloglog')
envMap <- predict(
climate[[predictors]],
envModel,
filename = paste0('./Models/Maxent/', speciesAb_, '_Maxent/GCM_', gcm,
'_PC', pc, '_', climYear, 'ybp'),
clamp = F,
format='GTiff',
overwrite = T,
type='cloglog')
envMapSp <- rasterToPolygons(envMap)
plot(rangeMap, border = 'blue', main = paste0('Maxent output, ', sp,
' occurrences'))
plot(envMap, add = TRUE)
plot(rangeMap, border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
points(records$longitude, records$latitude, pch = 16, cex = 0.6, col = 'red')
plot(envMap, main = paste0('Maxent output, ',
sp,
' occurrences'))
plot(rangeMap, border = 'blue', add = TRUE)
outputFileName <<- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model_PC', pc, '_GCM_', gcm, '.rData')
save(rangeMap, envMap, envModel, records, file = outputFileName, overwrite = T)
save.image(paste0('./workspaces/05 - Modeling Workspace - ', speciesAb_,
' Model Output - PC', pc, '_GCM_', gcm))
range.list <- list(littleRange_FraxAmer, littleRange_FraxCaro,
littleRange_FraxCusp, littleRange_FraxGreg,
littleRange_FraxNigr, littleRange_FraxPenn,
littleRange_FraxProf, littleRange_FraxQuad)
range <- do.call(bind, range.list)
plot(range)
rangeMap <- range
plot(rangeMap, border = 'blue',
main = paste0('Maxent\n', sp, ' occurrences,', '\nGCM = ', gcm))
plot(envMap, add = TRUE)
plot(rangeMap, border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
points(records$longitude, records$latitude, pch = 16, cex = 0.6,
col = alpha('red', 0.6))
plot(rangeMap, border = 'blue',
main = paste0('Maxent\n', sp, ' occurrences,', '\nGCM = ', gcm))
plot(envMap, add = TRUE)
plot(rangeMap, border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
library(rgeos)
range <- do.call(rgeos::gUnion, range.list)
range <- rgeos::gUnion(littleRange_FraxAmer, littleRange_FraxCaro,
littleRange_FraxCusp, littleRange_FraxGreg,
littleRange_FraxNigr, littleRange_FraxPenn,
littleRange_FraxProf, littleRange_FraxQuad)
range <- rgeos::gUnion(rgeos::gUnion(rgeos::gUnion(littleRange_FraxAmer, littleRange_FraxCaro),
rgeos::gUnion(littleRange_FraxCusp, littleRange_FraxGreg)),
rgeos::gUnion(rgeos::gUnion(littleRange_FraxNigr, littleRange_FraxPenn),
rgeos::gUnion(littleRange_FraxProf, littleRange_FraxQuad)))
rangeMap <- range
plot(rangeMap, border = 'blue',
main = paste0('Maxent\n', sp, ' occurrences,', '\nGCM = ', gcm))
plot(envMap, add = TRUE)
plot(rangeMap, border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
