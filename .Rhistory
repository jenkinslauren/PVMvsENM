# bvSumF$time <- paste0(abs(bvSumF$timeFrom), '-', abs(bvSumF$timeTo), ' kybp')
# bvSumF$time <- factor(bvSumF$time, levels = rev(mixedsort(bvSumF$time)))
#
# ggplot(bvSum, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("centroid velocity") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSumF, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
# all equal y axes limits
# set limits
minBV <- min(c(min(bvMeans$centroidVelocity),
min(bvMax$centroidVelocity))) - 1000
maxBV <- max(c(max(bvMeans$centroidVelocity),
max(bvMax$centroidVelocity))) + 1000
ggplot(bvMeans, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("centroid velocity") +
#   ylim(0, maxBV) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# NS Quant Velocity
min05 <- min(c(min(bvMeans$nsQuantVelocity_quant0p05),
min(bvMax$nsQuantVelocity_quant0p05))) - 1000
min95 <- min(c(min(bvMeans$nsQuantVelocity_quant0p95),
min(bvMax$nsQuantVelocity_quant0p95))) - 1000
max05 <- max(c(max(bvMeans$nsQuantVelocity_quant0p05),
max(bvMax$nsQuantVelocity_quant0p05))) + 1000
max95 <- max(c(max(bvMeans$nsQuantVelocity_quant0p95),
max(bvMax$nsQuantVelocity_quant0p95))) + 1000
pdf(file = paste0('./predictions/pdf/', gcm, '_nsQuantVelocity.pdf'), width = 11, height = 8.5)
# no y axes limits
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p05)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p95)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
# all equal y axes limits
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p05)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("NS_quant_05") +
#   ylim(min05, max05) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p95)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("NS_quant_95") +
#   ylim(min95, max95) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
save.image(file = paste0('./workspaces/06 - ', gcm, ' Projections'))
gcm <- 'Lorenz_ccsm'
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvMeans <- bioticVelocity(stackMeansList, times = seq(-21,0, by=1), onlyInSharedCells = T)
bvMeansF <- bioticVelocity(stackMeansList, times = seq(-21,0, by=1), onlyInSharedCells = F)
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvMax <- bioticVelocity(stackMaxList, times = seq(-21,0, by=1), onlyInSharedCells = T)
bvMaxF <- bioticVelocity(stackMaxList, times = seq(-21,0, by=1), onlyInSharedCells = F)
# stackSumList <- stack(sumList)
# projection(stackSumList) <- getCRS('albersNA')
# bvSum <- bioticVelocity(stackSumList, times = seq(-21,0, by=1), onlyInSharedCells = T)
# bvSumF <- bioticVelocity(stackSumList, times = seq(-21,0, by=1), onlyInSharedCells = F)
#
pdf(file = paste0('./predictions/pdf/', gcm, '_bioticVelocity.pdf'), width = 11, height = 8.5)
# no y axes limits
bvMeans$time <- paste0(abs(bvMeans$timeFrom), '-', abs(bvMeans$timeTo), ' kybp')
bvMeans$time <- factor(bvMeans$time, levels = rev(mixedsort(bvMeans$time)))
bvMeansF$time <- paste0(abs(bvMeansF$timeFrom), '-', abs(bvMeansF$timeTo), ' kybp')
bvMeansF$time <- factor(bvMeansF$time, levels = rev(mixedsort(bvMeansF$time)))
ggplot(bvMeans, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("centroid velocity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeansF, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bvMax$time <- paste0(abs(bvMax$timeFrom), '-', abs(bvMax$timeTo), ' kybp')
bvMax$time <- factor(bvMax$time, levels = rev(mixedsort(bvMax$time)))
bvMaxF$time <- paste0(abs(bvMaxF$timeFrom), '-', abs(bvMaxF$timeTo), ' kybp')
bvMaxF$time <- factor(bvMaxF$time, levels = rev(mixedsort(bvMaxF$time)))
ggplot(bvMax, aes(time, centroidVelocity)) + geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("centroid velocity") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMaxF, aes(time, centroidVelocity)) + geom_bar(stat = 'identity') +
ggtitle("Max (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# bvSum$time <- paste0(abs(bvSum$timeFrom), '-', abs(bvSum$timeTo), ' kybp')
# bvSum$time <- factor(bvSum$time, levels = rev(mixedsort(bvSum$time)))
#
# bvSumF$time <- paste0(abs(bvSumF$timeFrom), '-', abs(bvSumF$timeTo), ' kybp')
# bvSumF$time <- factor(bvSumF$time, levels = rev(mixedsort(bvSumF$time)))
#
# ggplot(bvSum, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("centroid velocity") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSumF, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
# all equal y axes limits
# set limits
minBV <- min(c(min(bvMeans$centroidVelocity),
min(bvMax$centroidVelocity))) - 1000
maxBV <- max(c(max(bvMeans$centroidVelocity),
max(bvMax$centroidVelocity))) + 1000
ggplot(bvMeans, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("centroid velocity") +
#   ylim(0, maxBV) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# NS Quant Velocity
min05 <- min(c(min(bvMeans$nsQuantVelocity_quant0p05),
min(bvMax$nsQuantVelocity_quant0p05))) - 1000
min95 <- min(c(min(bvMeans$nsQuantVelocity_quant0p95),
min(bvMax$nsQuantVelocity_quant0p95))) - 1000
max05 <- max(c(max(bvMeans$nsQuantVelocity_quant0p05),
max(bvMax$nsQuantVelocity_quant0p05))) + 1000
max95 <- max(c(max(bvMeans$nsQuantVelocity_quant0p95),
max(bvMax$nsQuantVelocity_quant0p95))) + 1000
pdf(file = paste0('./predictions/pdf/', gcm, '_nsQuantVelocity.pdf'), width = 11, height = 8.5)
# no y axes limits
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p05)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p95)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
# all equal y axes limits
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p05)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("NS_quant_05") +
#   ylim(min05, max05) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p95)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("NS_quant_95") +
#   ylim(min95, max95) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
save.image(file = paste0('./workspaces/06 - ', gcm, ' Projections'))
gcm <- 'ecbilt'
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvMeans <- bioticVelocity(stackMeansList, times = seq(-21,0, by=1), onlyInSharedCells = T)
bvMeansF <- bioticVelocity(stackMeansList, times = seq(-21,0, by=1), onlyInSharedCells = F)
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvMax <- bioticVelocity(stackMaxList, times = seq(-21,0, by=1), onlyInSharedCells = T)
bvMaxF <- bioticVelocity(stackMaxList, times = seq(-21,0, by=1), onlyInSharedCells = F)
# stackSumList <- stack(sumList)
# projection(stackSumList) <- getCRS('albersNA')
# bvSum <- bioticVelocity(stackSumList, times = seq(-21,0, by=1), onlyInSharedCells = T)
# bvSumF <- bioticVelocity(stackSumList, times = seq(-21,0, by=1), onlyInSharedCells = F)
#
pdf(file = paste0('./predictions/pdf/', gcm, '_bioticVelocity.pdf'), width = 11, height = 8.5)
# no y axes limits
bvMeans$time <- paste0(abs(bvMeans$timeFrom), '-', abs(bvMeans$timeTo), ' kybp')
bvMeans$time <- factor(bvMeans$time, levels = rev(mixedsort(bvMeans$time)))
bvMeansF$time <- paste0(abs(bvMeansF$timeFrom), '-', abs(bvMeansF$timeTo), ' kybp')
bvMeansF$time <- factor(bvMeansF$time, levels = rev(mixedsort(bvMeansF$time)))
ggplot(bvMeans, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("centroid velocity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeansF, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bvMax$time <- paste0(abs(bvMax$timeFrom), '-', abs(bvMax$timeTo), ' kybp')
bvMax$time <- factor(bvMax$time, levels = rev(mixedsort(bvMax$time)))
bvMaxF$time <- paste0(abs(bvMaxF$timeFrom), '-', abs(bvMaxF$timeTo), ' kybp')
bvMaxF$time <- factor(bvMaxF$time, levels = rev(mixedsort(bvMaxF$time)))
ggplot(bvMax, aes(time, centroidVelocity)) + geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("centroid velocity") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMaxF, aes(time, centroidVelocity)) + geom_bar(stat = 'identity') +
ggtitle("Max (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# bvSum$time <- paste0(abs(bvSum$timeFrom), '-', abs(bvSum$timeTo), ' kybp')
# bvSum$time <- factor(bvSum$time, levels = rev(mixedsort(bvSum$time)))
#
# bvSumF$time <- paste0(abs(bvSumF$timeFrom), '-', abs(bvSumF$timeTo), ' kybp')
# bvSumF$time <- factor(bvSumF$time, levels = rev(mixedsort(bvSumF$time)))
#
# ggplot(bvSum, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("centroid velocity") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSumF, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
# all equal y axes limits
# set limits
minBV <- min(c(min(bvMeans$centroidVelocity),
min(bvMax$centroidVelocity))) - 1000
maxBV <- max(c(max(bvMeans$centroidVelocity),
max(bvMax$centroidVelocity))) + 1000
ggplot(bvMeans, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, centroidVelocity)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("centroid velocity") +
#   ylim(0, maxBV) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# NS Quant Velocity
min05 <- min(c(min(bvMeans$nsQuantVelocity_quant0p05),
min(bvMax$nsQuantVelocity_quant0p05))) - 1000
min95 <- min(c(min(bvMeans$nsQuantVelocity_quant0p95),
min(bvMax$nsQuantVelocity_quant0p95))) - 1000
max05 <- max(c(max(bvMeans$nsQuantVelocity_quant0p05),
max(bvMax$nsQuantVelocity_quant0p05))) + 1000
max95 <- max(c(max(bvMeans$nsQuantVelocity_quant0p95),
max(bvMax$nsQuantVelocity_quant0p95))) + 1000
pdf(file = paste0('./predictions/pdf/', gcm, '_nsQuantVelocity.pdf'), width = 11, height = 8.5)
# no y axes limits
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p05)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p95)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
#   theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
# all equal y axes limits
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p05)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("NS_quant_05") +
#   ylim(min05, max05) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
#
# ggplot(bvSum, aes(time, nsQuantVelocity_quant0p95)) +
#   geom_bar(stat = 'identity') +
#   ggtitle("Sums") + xlab("time period") + ylab("NS_quant_95") +
#   ylim(min95, max95) + theme_bw() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
save.image(file = paste0('./workspaces/06 - ', gcm, ' Projections'))
rm(list=ls())
studyRegion <- rgdal::readOGR('/Volumes/lj_mac_22/MOBOT/PVMvsENM/data_and_analyses/study_region',
'study_region')
ggplot() + geom_polygon(data = studyRegion, aes(x = long, y = lat, group = group), colour = "black", fill = NA)
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# gcm <- 'Beyer'
gcmList <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
for (gcm in gcmList) {
gcm <- gcm
a <- 1
for(i in 1:length(speciesList)) {
rm(list= ls()[!(ls() %in% c('gcm','pc', 'predictors', 'speciesList', 'a'))])
sp <- speciesList[a]
# load('./workspaces/01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
species <- gsub(tolower(sp), pattern=' ', replacement='_')
print(paste0("Species = ", species))
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
# load bg sites, records, and rangeMap
load(paste0('./Background Sites/Random Background Sites across Study Region - ',
speciesAb, '_', gcm, '.Rdata'))
load(paste0('./Models/Maxent/model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
load(paste0('./regions/little_range_map/', rangeName, '.Rdata'))
# calculate k-folds for presences and background sites
kPres <- kfold(records, k = 5)
kBg <- kfold(randomBg, k = 5)
# visualize fold #1
plot(rangeMap, main = paste0(sp, ', k-fold #1'))
points(records$longitude, records$latitude)
points(records$longitude[kPres==1],
records$latitude[kPres==1],
bg='red',
pch=21
)
legend('topright',
legend=c('Training presence', 'Test presence'),
pch=c(1, 16),
col=c('black', 'red'),
bg='white',
cex=0.8
)
folderName <- paste0('./Models/Maxent/', speciesAb_,
'_Maxent/Model Evaluation - Random K-Folds - ', gcm)
# create an output directory
dir.create(folderName, recursive = TRUE, showWarnings = FALSE)
# place to store auc & cbi output
aucRandom <- cbiRandom <- rep(NA, 5)
# for each k-fold
for(i in 1:5) {
print(paste0('K-fold ', i, ':'))
# create training data, with presences/absences vector of 0/1 with all points
# EXCEPT the ones in the fold
envData <- rbind(records[kPres != i, predictors], randomBg[kBg != i, predictors])
presBg <- c(rep(1, sum(kPres != i)), rep(0, sum(kBg != i)))
trainData <- cbind(presBg, envData)
# load(paste0(folderName, '/Model ', i, '.Rdata'))
model <- enmSdm::trainMaxNet(data = trainData, resp = 'presBg')
save(model, file = paste0(folderName, '/Model ', i, '.Rdata'))
# predict presences & background sites
predPres <- raster::predict(model,
newdata = records[kPres == i,],
clamp = F,
type = 'cloglog')
predBg <- raster::predict(model,
newdata = randomBg[kPres == i,],
clamp = F,
type = 'cloglog')
# evaluate
thisEval <- evaluate(p = as.vector(predPres), a = as.vector(predBg))
thisAuc <- thisEval@auc
thisCbi <- contBoyce(pres = predPres, bg = predBg)
print(paste('AUC = ', round(thisAuc, 2), ' | CBI = ', round(thisCbi, 2)))
aucRandom[i] <- thisAuc
cbiRandom[i] <- thisCbi
}
save(aucRandom, cbiRandom, file = paste0(folderName, '/auc_cbi_vals.Rdata'))
a <- a + 1
}
