polltransNF <- polltrans
polltransNF <- polltransNF[polltransNF$FLAG != 1, ]
# create a dataset with the count of the number of rows with same TripTrans
polltransNFCount <- polltransNF %>% group_by(Trip, Transect) %>% summarise(Count = n())
# merge count back to polltransNF
polltransNF <- merge(polltransNF, polltransNFCount,by=c("Trip","Transect"))
# create the covariate dataframe for no flags
polltransCovarNF <- polltransNF[,c("Year", "Trip", "Week", "Site", "Months After Planting","Transect",
"Transect Location", "Flower Rank", "FLAG", "Ag Location")]
polltransCovar[c("FLAG")] <- lapply(polltransCovar[c("FLAG")],
function(a) ave(a, polltrans$TRIPTRANS, FUN = max))
polltransCovar[c("Flower Rank")] <- lapply(polltransCovar[c("Flower Rank")],
function(a) ave(a, polltrans$TRIPTRANS, FUN = ave))
polltransCovarNF[c("Flower Rank")] <- lapply(polltransCovarNF[c("Flower Rank")],
function(a) ave(a, polltransNF$TRIPTRANS, FUN = ave))
# aggregating the pollinator counts (average) based on matching trip numbers and transect
# right now, this only returns the transect, site, and pollinator numbers...still want
## to figure out how to incorporate all of the other covariates we want
polltransAvgPoll <- aggregate(list("Total Pollinators" = polltrans$`Total Pollinators`,
"Total Pollinators (no hover)" = polltrans$ `Total Pollinators (no hover)`,
"Total Pollinators (no hover or moths)" = polltrans$ `Total Pollinators (no hover or moths)`,
"Total Bees (all)" = polltrans$`Total Bees (all)`,
"Total Honeybees" = polltrans$`Total Honeybees`,
"Total Native Bees" = polltrans$`Total Native Bees`),
by = list("Trip" = polltrans$Trip, "Transect" = polltrans$Transect), mean);
polltransNFAvgPoll <- aggregate(list("Total Pollinators" = polltransNF$`Total Pollinators`,
"Total Pollinators (no hover)" = polltransNF$ `Total Pollinators (no hover)`,
"Total Pollinators (no hover or moths)" = polltransNF$ `Total Pollinators (no hover or moths)`,
"Total Bees (all)" = polltransNF$`Total Bees (all)`,
"Total Honeybees" = polltransNF$`Total Honeybees`,
"Total Native Bees" = polltransNF$`Total Native Bees`),
by = list("Trip" = polltransNF$Trip, "Transect" = polltransNF$Transect), mean);
polltransCovAg <- unique(polltransCovar, by = c("Trip", "Transect"))
polltransCovAgNF <- unique(polltransCovarNF, by = c("Trip", "Transect"))
polltransAg <- merge(polltransCount, polltransAvgPoll, by=c("Trip","Transect"))
polltransAg <- merge(polltransAg, polltransCovAg, by=c("Trip","Transect"))
polltransAgNF <- merge(polltransNFCount, polltransNFAvgPoll, by=c("Trip","Transect"))
polltransAgNF <- merge(polltransAgNF, polltransCovAgNF, by=c("Trip","Transect"))
library(xlsx)
write.xlsx(polltrans, "Documents/anl/polltrans.xlsx")
write.xlsx(polltransAg, "Documents/anl/polltransAggregate.xlsx")
write.xlsx(polltransAgNF, "Documents/anl/polltransAggregateNoFlags.xlsx")
polltransNoAgSites <- polltransAg[polltransAg$`Transect Location` != 'Agriculture', ]
polltransNFNoAgSites <- polltransAgNF[polltransAgNF$`Transect Location` != 'Agriculture', ]
polltransNoAtwater <- polltransNoAgSites[!grepl("AT", polltransNoAgSites$Transect), ]
polltransNFNoAtwater <- polltransNFNoAgSites[!grepl("AT", polltransNFNoAgSites$Transect), ]
# Excluding Connexus
polltransNoConnexus <- polltransNoAgSites[!grepl("CO", polltransNoAgSites$Transect), ]
polltransNFNoConnexus <- polltransNFNoAgSites[!grepl("CO", polltransNFNoAgSites$Transect), ]
# Excluding Atwater & Connexus
polltransAgEastwoodOnly <- polltransNoAgSites[!grepl("AT", polltransNoAgSites$Transect), ]
polltransAgEastwoodOnly <- polltransAgEastwoodOnly[!grepl("CO", polltransAgEastwoodOnly$Transect), ]
polltransAgNFEastwoodOnly <- polltransNFNoAgSites[!grepl("AT", polltransNFNoAgSites$Transect), ]
polltransAgNFEastwoodOnly <- polltransAgNFEastwoodOnly[!grepl("CO", polltransAgNFEastwoodOnly$Transect), ]
library(readxl)
AgData <- read_excel("Documents/anl/Pollinator_Data.xlsx",
+     sheet = "Ag_Transects")
View(AgData)
library(readxl)
AgData <- read_excel("Documents/anl/Pollinator_Data.xlsx", +     sheet = "Ag_Transects")
View(AgData)
AgData <- read_excel("Documents/anl/Pollinator_Data.xlsx", sheet = "Ag_Transects")
polltransAgOnly <- polltransAg[polltransAg$`Transect Location` == 'Agriculture', ]
polltransNFAgOnly <- polltransAgNF[polltransAgNF$`Transect Location` == 'Agriculture', ]
View(polltransAgOnly)
polltransAgOnly <- polltransAgOnly[polltransAgOnly$Site != 'Connexus', ]
polltransNFAgOnly <- polltransNFAgOnly[polltransNFAgOnly$Site != 'Connexus', ]
# excluding CRP entries
polltransAgOnly <- polltransAgOnly[polltransAgOnly$`Ag Location` != 'Far - CRP', ]
polltransNFAgOnly <- polltransNFAgOnly[polltransNFAgOnly$`Ag Location` != 'Far - CRP', ]
# creating separate dataframes without roadside variables
polltransAgOnlyNoRoadside <- polltransAgOnly[polltransAgOnly$`Ag Location` != 'Far - Roadside', ]
polltransNFAgOnlyNoRoadside <- polltransNFAgOnly[polltransNFAgOnly$`Ag Location` != 'Far - Roadside', ]
polltransAgOnly[c("Ag Location")] <- lapply(polltransAgOnly[c("Ag Location")], function(x) {
gsub("Far - Roadside", "Far", x)})
polltransNFAgOnly[c("Ag Location")] <- lapply(polltransNFAgOnly[c("Ag Location")], function(x) {
gsub("Far - Roadside", "Far", x)})
polltransAgOnly$`Distance to Solar` <- AgData$`Distance to Solar (m)`[match(polltransAgOnly$Transect,
AgData$Transect)]
polltransNFAgOnly$`Distance to Solar` <- AgData$`Distance to Solar (m)`[match(polltransNFAgOnly$Transect,
AgData$Transect)]
polltransAgOnlyNoRoadside$`Distance to Solar` <- AgData$`Distance to Solar (m)`[match(
polltransAgOnlyNoRoadside$Transect, AgData$Transect)]
polltransNFAgOnlyNoRoadside$`Distance to Solar` <- AgData$`Distance to Solar (m)`[match(
polltransNFAgOnlyNoRoadside$Transect, AgData$Transect)]
## working with ggplot for this to work a bit better..
library(ggplot2)
RoadsideBeesNF3 <- data.frame(polltransNFAgOnly$`Ag Location`, polltransNFAgOnly$Total.Bees..all.)
p3.4 <- ggplot(data = RoadsideBeesNF3, aes(x = polltransNFAgOnly..Ag.Location.,
y = polltransNFAgOnly.Total.Bees..all.)) +
geom_bar(stat="identity")
p3.4 <- p3.4 + xlab("Ag Location") + ylab("Total Bees")
print(p3.4)
polltransAgOnly$`Ag Location` <- paste(polltransAgOnly$Site, polltransAgOnly$`Ag Location`)
polltransNFAgOnly$`Ag Location` <- paste(polltransNFAgOnly$Site, polltransNFAgOnly$`Ag Location`)
RoadsideBees3 <- data.frame(polltransAgOnly$`Ag Location`, polltransAgOnly$Total.Bees..all.)
p3.3 <- ggplot(data = RoadsideBees3, aes(x = polltransAgOnly..Ag.Location.,
y = polltransAgOnly.Total.Bees..all.)) +
geom_bar(stat="identity")
p3.3 <- p3.3 + xlab("Ag Location") + ylab("Total Bees")
print(p3.3)
RoadsideBeesNF3 <- data.frame(polltransNFAgOnly$`Ag Location`, polltransNFAgOnly$Total.Bees..all.)
p3.4 <- ggplot(data = RoadsideBeesNF3, aes(x = polltransNFAgOnly..Ag.Location.,
y = polltransNFAgOnly.Total.Bees..all.)) +
geom_bar(stat="identity")
p3.4 <- p3.4 + xlab("Ag Location") + ylab("Total Bees")
print(p3.4)
NoRoadsideTotalNF3d <- data.frame(polltransNFAgOnlyNoRoadside$`Distance to Solar`,
polltransNFAgOnlyNoRoadside$Total.Pollinators)
nr3.2d <- ggplot(data = NoRoadsideTotalNF3d, aes(x = polltransNFAgOnlyNoRoadside..Distance.to.Solar.,
y = polltransNFAgOnlyNoRoadside.Total.Pollinators)) +
geom_bar(stat="identity")
nr3.2d <- nr3.2d + xlab("Distance to Solar (m)") + ylab("Total Pollinators")
print(nr3.2d)
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Pollinators, 2),
xlab = "Distance to Solar (m)", ylab = "Total Pollinators")
# Total Bees
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Bees..all., 2),
xlab = "Distance to Solar (m)", ylab = "Total Bees")
# Total Pollinators, No Hover
plot(jitter(polltransNFAgOnlyNoRoadside$`Distance to Solar`,2),
jitter(polltransNFAgOnlyNoRoadside$Total.Pollinators..no.hover., 2),
xlab = "Distance to Solar (m)", ylab = "Total Pollinators, No Hover")
library (readxl)
AgTransects <- read_excel("Documents/anl/Pollinator_Data.xlsx", sheet = "Ag_Transects")
View(AgTransects)
AgTreatments <- polltransAg[polltransAg$`Transect Location` == 'Agriculture', ]
AgTreatments$`Treatment Group` <- AgTransects$`Treatment Group`[match(AgTreatments$Transect,
AgTransects$Transect)]
AgTreatmentsNF <- polltransAgNF[polltransAgNF$`Transect Location` == 'Agriculture', ]
AgTreatmentsNF$`Treatment Group` <- AgTransects$`Treatment Group`[match(AgTreatmentsNF$Transect,
AgTransects$Transect)]
# Only include Eastwood & Atwater
AgTreatments <- AgTreatments[AgTreatments$Site != 'Connexus', ]
AgTreatmentsNF <- AgTreatmentsNF[AgTreatmentsNF$Site != 'Connexus', ]
AgTreatments <- AgTreatments[!grepl("Not Adjacent", AgTreatments$`Treatment Group`), ]
AgTreatmentsNF <- AgTreatmentsNF[!grepl("Not Adjacent", AgTreatmentsNF$`Treatment Group`), ]
AgTreatmentsEast <- AgTreatments[AgTreatments$Site != 'Atwater', ]
AgTreatmentsEastNF <- AgTreatmentsNF[AgTreatmentsNF$Site != 'Atwater', ]
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Bees..all. ~ `Treatment Group`, data = AgTreatmentsNF, xlab = "Treatment",
ylab = "Total Bees")
boxplot(Total.Pollinators..no.hover. ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
Veiw(AgTreatmentsEastNF)
View(AgTreatmentsEastNF)
boxplot(Total.Pollinators..no.hover.or.moths. ~ `Treatment Group`, data = AgTreatmentsEastNF, xlab = "Treatment",
ylab = "Total Pollinators, No Hover")
View(polltransNFAgOnlyNoRoadside)
library(readxl)
library(dplyr)
library(ggplot2)
rm(list = ls()) # Clear workspace
# input data
library(readxl)
polltrans <- read_excel("Documents/anl/Pollinator_Data.xlsx",
sheet = "Transect Data")
polltrans[, 25:86][is.na(polltrans[, 25:86])] <- 0
polltransCount <- polltrans %>% group_by(Trip, Transect) %>% summarise(Count = n())
# Merge count back to polltrans
polltrans <- merge(polltrans, polltransCount,by=c("Trip","Transect"))
# create a new dataframe with the covariates that don't need any function
## year, trip, week, site, months after planting, transect, transect location, and flower rank
polltransCovar <- polltrans[,c("Year", "Trip", "Week", "Site", "Months After Planting","Transect",
"Transect Location", "Flower Rank", "FLAG", "Ag Location")]
polltransNF <- polltrans
polltransNF <- polltransNF[polltransNF$FLAG != 1, ]
# create a dataset with the count of the number of rows with same TripTrans
polltransNFCount <- polltransNF %>% group_by(Trip, Transect) %>% summarise(Count = n())
# merge count back to polltransNF
polltransNF <- merge(polltransNF, polltransNFCount,by=c("Trip","Transect"))
# create the covariate dataframe for no flags
polltransCovarNF <- polltransNF[,c("Year", "Trip", "Week", "Site", "Months After Planting","Transect",
"Transect Location", "Flower Rank", "FLAG", "Ag Location")]
polltransCovar[c("FLAG")] <- lapply(polltransCovar[c("FLAG")],
function(a) ave(a, polltrans$TRIPTRANS, FUN = max))
polltransCovar[c("Flower Rank")] <- lapply(polltransCovar[c("Flower Rank")],
function(a) ave(a, polltrans$TRIPTRANS, FUN = ave))
polltransCovarNF[c("Flower Rank")] <- lapply(polltransCovarNF[c("Flower Rank")],
function(a) ave(a, polltransNF$TRIPTRANS, FUN = ave))
polltransAvgPoll <- aggregate(list("Total Pollinators" = polltrans$`Total Pollinators`,
"Total Pollinators (no hover)" = polltrans$ `Total Pollinators (no hover)`,
"Total Pollinators (no hover or moths)" = polltrans$ `Total Pollinators (no hover or moths)`,
"Total Bees (all)" = polltrans$`Total Bees (all)`,
"Total Honeybees" = polltrans$`Total Honeybees`,
"Total Native Bees" = polltrans$`Total Native Bees`),
by = list("Trip" = polltrans$Trip, "Transect" = polltrans$Transect), mean);
polltransNFAvgPoll <- aggregate(list("Total Pollinators" = polltransNF$`Total Pollinators`,
"Total Pollinators (no hover)" = polltransNF$ `Total Pollinators (no hover)`,
"Total Pollinators (no hover or moths)" = polltransNF$ `Total Pollinators (no hover or moths)`,
"Total Bees (all)" = polltransNF$`Total Bees (all)`,
"Total Honeybees" = polltransNF$`Total Honeybees`,
"Total Native Bees" = polltransNF$`Total Native Bees`),
by = list("Trip" = polltransNF$Trip, "Transect" = polltransNF$Transect), mean);
polltransCovAg <- unique(polltransCovar, by = c("Trip", "Transect"))
polltransCovAgNF <- unique(polltransCovarNF, by = c("Trip", "Transect"))
polltransAg <- merge(polltransCount, polltransAvgPoll, by=c("Trip","Transect"))
polltransAg <- merge(polltransAg, polltransCovAg, by=c("Trip","Transect"))
polltransAgNF <- merge(polltransNFCount, polltransNFAvgPoll, by=c("Trip","Transect"))
polltransAgNF <- merge(polltransAgNF, polltransCovAgNF, by=c("Trip","Transect"))
head(polltransAg)
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank") + MyTheme
MyTheme <-         theme(axis.title.y = element_text(size=14, face="bold"),
axis.title.x = element_text(size=14, face="bold"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="black"))
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank") + MyTheme
Q1.Months <- plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
Q1.Months + MyTheme
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(jitter(polltransAgNF$`Months After Planting`, 2), jitter(polltransAgNF$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAgNF$`Months After Planting`, polltransAgNF$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(jitter(polltransAgNF$`Months After Planting`, 2), jitter(polltransAgNF$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAgNF$`Months After Planting`, polltransAgNF$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
# # X = Months After Planting
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
Q1.Months <- ggplot(polltransAg, aes(`Months After Planting`, `Flower Rank`)) + geom_jitter()
Q1.Months + MyTheme
Q1.Months <- ggplot(polltransAg, aes(`Months After Planting`, `Flower Rank`)) + geom_jitter(width = 0.5, height = 0.5)
Q1.Months + MyTheme
MyTheme <-          theme(axis.title.y = element_text(size=12, face="bold"),
axis.title.x = element_text(size=12, face="bold"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="black"))
Q1.Months <- ggplot(polltransAg, aes(`Months After Planting`, `Flower Rank`)) + geom_jitter(width = 0.5, height = 0.5)
Q1.Months + MyTheme
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(polltransAg$`Months After Planting`, polltransAg$`Flower Rank`, pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
Q1.Months <- ggplot(polltransAg, aes(`Months After Planting`, `Flower Rank`)) + geom_jitter(width = 0.5, height = 0.5)
Q1.Months + MyTheme
plot(jitter(polltransAgNF$`Months After Planting`, 2), jitter(polltransAgNF$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
plot(jitter(polltransAg$`Months After Planting`, 2), jitter(polltransAg$`Flower Rank`, 2), pch = 19,
xlab = "Months After Planting", ylab = "Flower Rank")
install.packages("seewave", repos="http://cran.at.r-project.org/")
install.packages(c("fftw","tuneR","rgl","rpanel"), repos="http://cran.at.r-project.org/")
rm(list = ls()) # Clear workspace
rm(list = ls())
setwd('/Users/laurenjenkins/Documents/MOBOT/PVMvsENM/')
ll <- c('longitude', 'latitude')
species <- "fraxinus dipetala"
speciesAb <- "Frax_Dipe"
range <- paste0("littleRange_", speciesAb)
title <- expression(paste(italic("Fraxinus dipetala"), " occurrences"))
load('./01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
# Load packages
library(enmSdm)
# for handling rasters
library(raster)
# library(rgeos) # not used, but may be helpful when debugging
# visualization tools
library(sp)
library(sf)
library(maps)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
# additional tools
library(tools)
library(units)
library(dplyr)
# nad27
default_crs = sf::st_crs(4267)
speciesFileName <- paste0('./species_records/01_',
gsub(tolower(species), pattern = ' ',
replacement = '_'), '_retained_records.rds')
if (file.exists(speciesFileName)) {
load(speciesFileName)
} else {
load(paste0('./species_records/00_',
gsub(tolower(species), pattern = ' ',
replacement = '_'), '_bien_all_occurrences.rda'))
# 93,206 occurrences
# remove records without coordinates or dates to ensure locational reliability
occs <- occsRaw[!(is.na(occsRaw$longitude) | is.na(occsRaw$latitude) | is.na(occsRaw$date_collected)), ]
# 93,084 occurrences
# remove records before 1900
occs$Year <- substr(occs$date_collected, 1, 4)
occs <- occs[occs$Year >= 1900, ]
# 93,000 occurrences
# date_collected column is there twice, remove one of them
occs[18] <- NULL
saveRDS(occs, speciesFileName)
}
library(terra)
install.packages("terra")
install.packages(c("backports", "BH", "bioacoustics", "bitops", "blob", "boot", "brglm2", "broom", "bslib", "cachem", "car", "caTools", "class", "cli", "clipr", "cluster", "codetools", "coin", "conquer", "corpcor", "corrplot", "cowplot", "cpp11", "crayon", "credentials", "crosstalk", "Cubist", "curl", "data.table", "DBI", "desc", "diffobj", "digest", "dismo", "DT", "e1071", "earth", "epiR", "fastICA", "fftw", "forecast", "foreign", "Formula", "gargle", "gdtools", "generics", "geosphere", "gert", "ggplot2", "ggrepel", "ggsignif", "git2r", "glmnet", "glue", "googledrive", "googlesheets4", "gplots", "gss", "gtools", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "inline", "ipred", "isoband", "jpeg", "keras", "KernSmooth", "knitr", "labelled", "later", "lattice", "lava", "libcoin", "lifecycle", "lme4", "lmtest", "lubridate", "manipulateWidget", "maptools", "MASS", "matlib", "Matrix", "MatrixModels", "mgcv", "mime", "mlbench", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "packrat", "party", "pbapply", "pbkrtest", "pillar", "pkgKitten", "pkgload", "plotmo", "plotrix", "pls", "pROC", "profileModel", "profvis", "proxy", "ps", "quantmod", "quantreg", "questionr", "R.cache", "R.utils", "raster", "rcmdcheck", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "recipes", "remotes", "reprex", "reticulate", "rgeos", "rgl", "rio", "rJava", "rlang", "rmarkdown", "roxygen2", "RPostgreSQL", "rprojroot", "rsconnect", "rstatix", "rticles", "rversions", "rvest", "seasonal", "seewave", "sessioninfo", "sf", "shiny", "shinyFiles", "sp", "SparseM", "spatial", "SQUAREM", "statmod", "stringi", "styler", "survival", "svglite", "systemfonts", "tensorflow", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tinytest", "tinytex", "tseries", "tuneR", "units", "usethis", "utf8", "uuid", "vcd", "vdiffr", "viridis", "waldo", "writexl", "WriteXLS", "x13binary", "xfun", "xlsx", "zip"))
View(polltransNF)
install.packages("terra")
install.packages("terra")
rm(list = ls())
library(raster)
library(enmSdm)
library(dplyr)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
load('./PCA on Environmental Data')
summary(pca)
save.image(./PCA_Beyer)
save.image('./PCA_Beyer')
rm(list = ls())
library(raster)
library(enmSdm)
library(dplyr)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
rasts <- list()
getClimRasts <- function(gcm, year, variables) {
# gcm		'ccsm' or 'ecbilt'
# year		year BP (from 0 to 21000 for ccsm or 22000 for ecbilt)
# variables names of variables
# rescale	TRUE ==> rescale rasters to [0, 1] using present-day values for min/max
# fillCoasts FALSE ==> use rasters as-is; TRUE ==> extrapolate to NA cells immediately adjacent to non-NA cells (typically coastal cells)
gcmFolder <- if (gcm == 'ccsm') {
'ccsm3_22-0k_all_tifs_LJ'
} else if (gcm == 'ecbilt') {
'ecbilt_21-0k_all_tifs'
}
# get current version of each variable
for (variable in variables) {
for (year in years) {
rast <- stack(paste0(lorenzPath, '/', gcmFolder, '/', year, 'BP/used/', variable, '.tif'))
names(rast) <- paste0(variable, '_', year, 'BP')
rasts <- if (exists('rasts', inherits=FALSE)) {
append(rasts, rast)
} else {
rast
}
}
}
}
variables <- c('ETR', 'TMAX', 'TMIN', 'AET', 'PET', 'PRCP', 'WDI',
'GDD0', 'GDD5')
years <- c('0', '100', '200', '300', '400', '500', '600', '700', '800',
'900', '1000', '1100', '1200', '1300', '1400', '1500', '1600',
'1700', '1800', '1900', '2000', '2100')
getClimRasts <- function(gcm, years, variables) {
# gcm		'ccsm' or 'ecbilt'
# year		year BP (from 0 to 21000 for ccsm or 22000 for ecbilt)
# variables names of variables
# rescale	TRUE ==> rescale rasters to [0, 1] using present-day values for min/max
# fillCoasts FALSE ==> use rasters as-is; TRUE ==> extrapolate to NA cells immediately adjacent to non-NA cells (typically coastal cells)
gcmFolder <- if (gcm == 'ccsm') {
'ccsm3_22-0k_all_tifs_LJ'
} else if (gcm == 'ecbilt') {
'ecbilt_21-0k_all_tifs'
}
# get current version of each variable
for (variable in variables) {
for (year in years) {
rast <- stack(paste0(lorenzPath, '/', gcmFolder, '/', year, 'BP/used/', variable, '.tif'))
names(rast) <- paste0(variable, '_', year, 'BP')
rasts <- if (exists('rasts', inherits=FALSE)) {
append(rasts, rast)
} else {
rast
}
}
}
}
rasts <- getClimRasts('ccsm', years, variables)
lorenzPath <- './data_and_analyses/env_data/Lorenz/V2'
rasts <- getClimRasts('ccsm', years, variables)
getClimRasts <- function(gcm, years, variables) {
# gcm		'ccsm' or 'ecbilt'
# year		year BP (from 0 to 21000 for ccsm or 22000 for ecbilt)
# variables names of variables
# rescale	TRUE ==> rescale rasters to [0, 1] using present-day values for min/max
# fillCoasts FALSE ==> use rasters as-is; TRUE ==> extrapolate to NA cells immediately adjacent to non-NA cells (typically coastal cells)
gcmFolder <- if (gcm == 'ccsm') {
'ccsm3_21-0k_all_tifs_LJ'
} else if (gcm == 'ecbilt') {
'ecbilt_21-0k_all_tifs'
}
# get current version of each variable
for (variable in variables) {
for (year in years) {
rast <- stack(paste0(lorenzPath, '/', gcmFolder, '/', year, 'BP/used/', variable, '.tif'))
names(rast) <- paste0(variable, '_', year, 'BP')
rasts <- if (exists('rasts', inherits=FALSE)) {
append(rasts, rast)
} else {
rast
}
}
}
}
rasts <- getClimRasts('ccsm', years, variables)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
lorenzPath <- './data_and_analyses/env_data/Lorenz/V2'
rasts <- list()
getClimRasts <- function(gcm, years, variables) {
# gcm		'ccsm' or 'ecbilt'
# year		year BP (from 0 to 21000 for ccsm or 22000 for ecbilt)
# variables names of variables
# rescale	TRUE ==> rescale rasters to [0, 1] using present-day values for min/max
# fillCoasts FALSE ==> use rasters as-is; TRUE ==> extrapolate to NA cells immediately adjacent to non-NA cells (typically coastal cells)
gcmFolder <- if (gcm == 'ccsm') {
'ccsm3_21-0k_all_tifs_LJ'
} else if (gcm == 'ecbilt') {
'ecbilt_21-0k_all_tifs'
}
# get current version of each variable
for (variable in variables) {
for (year in years) {
rast <- stack(paste0(lorenzPath, '/', gcmFolder, '/', year, 'BP/used/', variable, '.tif'))
names(rast) <- paste0(variable, '_', year, 'BP')
rasts <- if (exists('rasts', inherits=FALSE)) {
append(rasts, rast)
} else {
rast
}
}
}
}
variables <- c('ETR', 'TMAX', 'TMIN', 'AET', 'PET', 'PRCP', 'WDI',
'GDD0', 'GDD5')
years <- c('0', '100', '200', '300', '400', '500', '600', '700', '800',
'900', '1000', '1100', '1200', '1300', '1400', '1500', '1600',
'1700', '1800', '1900', '2000', '2100')
rasts <- getClimRasts('ccsm', years, variables)
rm(list = ls())
library(raster)
library(enmSdm)
library(dplyr)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
lorenzPath <- './data_and_analyses/env_data/Lorenz/V2'
rasts <- list()
getClimRasts <- function(gcm, years, variables) {
# gcm		'ccsm' or 'ecbilt'
# year		year BP (from 0 to 21000 for ccsm or 22000 for ecbilt)
# variables names of variables
# rescale	TRUE ==> rescale rasters to [0, 1] using present-day values for min/max
# fillCoasts FALSE ==> use rasters as-is; TRUE ==> extrapolate to NA cells immediately adjacent to non-NA cells (typically coastal cells)
gcmFolder <- if (gcm == 'ccsm') {
'ccsm3_21-0k_all_tifs_LJ'
} else if (gcm == 'ecbilt') {
'ecbilt_21-0k_all_tifs'
}
# get current version of each variable
for (variable in variables) {
for (year in years) {
rast <- stack(paste0(lorenzPath, '/', gcmFolder, '/', year, 'BP/used/', variable, '.tif'))
names(rast) <- paste0(variable, '_', year, 'BP')
rasts <- if (exists('rasts', inherits=FALSE)) {
append(rasts, rast)
} else {
rast
}
}
}
}
variables <- c('ETR', 'TMAX', 'TMIN', 'AET', 'PET', 'PRCP', 'WDI',
'GDD0', 'GDD5')
years <- c('0', '100', '200', '300', '400', '500', '600', '700', '800',
'900', '1000', '1100', '1200', '1300', '1400', '1500', '1600',
'1700', '1800', '1900', '2000', '2100')
rasts <- getClimRasts('ccsm', years, variables)
getClimRasts <- function(gcm, years, variables) {
# gcm		'ccsm' or 'ecbilt'
# year		year BP (from 0 to 21000 for ccsm or 22000 for ecbilt)
# variables names of variables
# rescale	TRUE ==> rescale rasters to [0, 1] using present-day values for min/max
# fillCoasts FALSE ==> use rasters as-is; TRUE ==> extrapolate to NA cells immediately adjacent to non-NA cells (typically coastal cells)
gcmFolder <- if (gcm == 'ccsm') {
'ccsm_21-0k_all_tifs_LJ'
} else if (gcm == 'ecbilt') {
'ecbilt_21-0k_all_tifs'
}
# get current version of each variable
for (variable in variables) {
for (year in years) {
rast <- stack(paste0(lorenzPath, '/', gcmFolder, '/', year, 'BP/used/', variable, '.tif'))
names(rast) <- paste0(variable, '_', year, 'BP')
rasts <- if (exists('rasts', inherits=FALSE)) {
append(rasts, rast)
} else {
rast
}
}
}
}
rasts <- getClimRasts('ccsm', years, variables)
