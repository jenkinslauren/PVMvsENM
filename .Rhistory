}
names(SpeciesOcc)[c(grep("lon", tolower(names(SpeciesOcc))),
grep("^x$", tolower(names(SpeciesOcc))))] <- "Longitude"
names(SpeciesOcc)[c(grep("lat", tolower(names(SpeciesOcc))),
grep("^y$", tolower(names(SpeciesOcc))))] <- "Latitude"
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = F)
}
lapply(speciesList, toCSV)
rm(toCSV)
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = FALSE)
}
lapply(speciesList, toCSV)
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = FALSE)
}
lapply(speciesList, toCSV)
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
occlist <- list.files('./megaSDM_TestRun', pattern = '.csv', full.names = T)
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
#Determines the species name from the name of the occurrence file
SpeciesSplit <- unlist(strsplit(occlist[1], "/", fixed = TRUE))
SpeciesName <- substr(SpeciesSplit[length(SpeciesSplit)], 1,
nchar(SpeciesSplit[length(SpeciesSplit)]) - 4)
#Matches the species name to the correct column and renames it "Species"
SpecCol <- grep(paste0("^", SpeciesName, "$|", "^", gsub("_", " ", SpeciesName), "$"),
SpeciesOcc[1,])
#Adds a new column with species names if it doesn't already exist
if (length(SpecCol) == 1) {
names(SpeciesOcc)[SpecCol] <- "Species"
} else {
SpeciesOcc$Species <- rep(SpeciesName, nrow(SpeciesOcc))
}
#Matches the lat/long columns and renames them to standardize
names(SpeciesOcc)[c(grep("lon", tolower(names(SpeciesOcc))),
grep("^x$", tolower(names(SpeciesOcc))))] <- "Longitude"
names(SpeciesOcc)[c(grep("lat", tolower(names(SpeciesOcc))),
grep("^y$", tolower(names(SpeciesOcc))))] <- "Latitude"
#Takes only the species name and the coordinates for reprojection
SpeciesCoords <- SpeciesOcc[, c("Species", "Longitude", "Latitude")]
View(SpeciesCoords)
if ((max(SpeciesCoords$Longitude) > 180) | (max(SpeciesCoords$Latitude) > 90) |
(min(SpeciesCoords$Longitude) < -180) | (min(SpeciesCoords$Latitude) < -90)) {
stop("The species occurrence points are not given in latitude/longitude form. Reproject species occurrences to a latlon projection")
} else {
print("All good!")
}
occ_output <- "./megaSDM_TestRun/occurrences"
OccurrenceManagement(occlist = occlist,
output = occ_output,
envextract = TRUE,
envsample = TRUE,
nbins = 25,
envdata = TSEnv$training)
buff_output <- "megaSDM_TestRun/buffers"
BackgroundBuffers(occlist = occlist,
envdata = TSEnv$training,
buff_output,
ncores = 1)
occlist <- list.files(occ_output, pattern = ".csv", full.names = TRUE)
buff_output <- "megaSDM_TestRun/buffers"
BackgroundBuffers(occlist = occlist,
envdata = TSEnv$training,
buff_output,
ncores = 1)
# 10,000 background points
nbg <- 10000
# proportion of the background points sampled from within buffers
spatial_weights <- 0.5
# random or environmentally subsampled (Varela)?
sampleMethods <- "Varela"
bufflist <- list.files(buff_output, pattern = ".shp$", full.names = TRUE)
bg_output <- "megaSDM_TestRun/backgrounds"
BackgroundPoints(spplist = spplist,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 2)
BackgroundPoints(spplist = speciesList,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 1)
# random or environmentally subsampled (Varela)?
sampleMethod <- "Varela"
BackgroundPoints(spplist = speciesList,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 1)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(tidyr)
library(raster)
library(rgdal)
library(enmSdm)
library(terra)
library(maxnet)
library(sf)
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
# load PCA data
load('./PCA_Beyer')
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
library(geosphere)
library(raster)
library(data.table)
library(dplyr)
library(viridis)
library(maps)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# setwd('/mnt/research/TIMBER/PVMvsENM')
ll <- c('longitude', 'latitude')
gcmList_ <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
# pollen <- readRDS('/Volumes/lj_mac_22/pollen/bv/FRAXINUS_bvs_n200_v4.1.RDS')
pollen <- readRDS('/Volumes/lj_mac_22/pollen/polya-gamma-predictions_4.1_overdispersed-001.RDS')
pollen_locs <- readRDS('/Volumes/lj_mac_22/pollen/pollen_locs_4.1.RDS')
pollen_dat <- readRDS('/Volumes/lj_mac_22/pollen/pollen_dat_4.1.RDS')
pollen_taxa <- readRDS('/Volumes/lj_mac_22/pollen/taxa_4.1.RDS')
pollen_grid <- readRDS('/Volumes/lj_mac_22/pollen/grid_4.1.RDS')
# keep only fraxinus
pollen_dat <- pollen_dat[1:465, 8, 1:22]
pollen_dat <- as.data.frame(pollen_dat)
View(pollen_dat)
colnames(pollen_dat) <- c(1:22)
pollen <- pollen$pi[1:200, 1:3951, 8, 1:22]
pollen <- as.data.frame(matrix(pollen, prod(dim(pollen)[1:2]), dim(pollen)[3]))
pollen <- cbind(pollen_grid, pollen)
alb_proj <-  '+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'
wgs_proj = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# assigning a crs to the pollen coordinates
spdf <- SpatialPointsDataFrame(coords = pollen_grid[,c('x', 'y')], data = pollen_grid,
proj4string = CRS(alb_proj))
# transforming to the lat long crs
dat_transform <- spTransform(spdf, wgs_proj)
dat <- coordinates(dat_transform)
dat <- data.frame(dat_transform)
dat <- dat[,1:4]
colnames(dat)[3:4] <- ll
pollen <- merge(dat, pollen, by = c('x', 'y'))
pollen_1 <- data.frame('longitude' = pollen$longitude, 'latitude' = pollen$latitude,
'abund' = pollen$V1)
pollen_sp <- st_as_sf(pollen_1, coords = ll, crs = getCRS('wgs84'))
library(sf)
pollen_sp <- st_as_sf(pollen_1, coords = ll, crs = getCRS('wgs84'))
View(pollen_sp)
pollen_sp <- spTransform(pollen_sp, wgs_proj)
plot(pollen_sp)
pollen_refuge <- pollen_sp$abund >= 0.03
pollen_refuge <- as.data.frame(pollen_sp$abund >= 0.03)
View(pollen_refuge)
pollen_refuge < -pollen_sp[which(pollen_sp[,1] >= 0.03),]
pollen_refuge < -pollen_sp[which(pollen_sp$abund >= 0.03),]
pollen_refuge < pollen_sp[(pollen_sp$abund >= 0.03),]
pollen_refuge < pollen_sp[(pollen_sp$abund > 0.03),]
pollen_refuge < pollen_sp[pollen_sp$abund >= 0.03,]
pollen_refuge < pollen_1[pollen_1$abund >= 0.03,]
pollen_1[pollen_1$abund >= 0.03,]
rm(pollen_refuge)
pollen_refuge < pollen_1[pollen_1$abund >= 0.03,]
pollen_refuge <- pollen_1[pollen_1$abund >= 0.03,]
pollen_refuge <- st_as_sf(pollen_refuge, coords = ll, crs = getCRS('wgs84'))
plot(pollen_refuge)
rm(list = ls())
library(dismo)
library(sp)
library(enmSdm)
library(xlsx)
library(geosphere)
library(raster)
library(data.table)
library(dplyr)
library(viridis)
library(maps)
library(sf)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# setwd('/mnt/research/TIMBER/PVMvsENM')
ll <- c('longitude', 'latitude')
gcmList_ <- c('Beyer','Lorenz_ccsm', 'ecbilt')
pc <- 5
predictors <- c(paste0('pca', 1:pc))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
pollen <- readRDS('/Volumes/lj_mac_22/pollen/bv/FRAXINUS_bvs_n200_v4.1.RDS')
rm(list=ls())
library(enmSdm)
library(gtools)
library(ggplot2)
library(cowplot)
library(tidyr)
library(tidyverse)
library(raster)
library(utils)
library(ggrepel)
library(dplyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
gcm <- 'pollen'
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred.tif'
pollenRast <- brick(fileName)
pollenStack <- stack(fileName)
projection(pollenStack) <- getCRS('albersNA')
plot(pollenRast)
plot(pollenRast[[1]])
plot(pollenRast[[1]] >= 0.03)
?raster::clump
nlayers(pollenStack)
b <- pollenRast$predictions.FRAXINUS_meanpred.1
pollen_threshold <- 0.03
thresholds <- seq(0.001, 1, by = 0.001)
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
library(spatialEco)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NULL)
kappa <- data.frame('threshold' = thresholds, 'kappa' = 0)
View(kappa)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
kappa[,'0.001'] <- 0.2
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
kappa['0.001'] <- 0.2
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
which(kappa$threshold) == 0.001
which(kappa$threshold == 0.001)
kappa$kappa[1] <- 0.01
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
thresholds <- seq(0.001, 0.003, by = 0.001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
for(t in thresholds) {
refugia <- b >= t
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
# plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
abund <- b * refugia
names(abund) <- 'refugiaAbund'
# nrows <- nrow(b)
# ncols <- ncol(b)
# ncells <- raster::ncell(b)
#
# v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
# cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
# cellNum <- raster::raster(cellNum, template=b)
# cellNum <- as.vector(cellNum)
# simRefugiaBinary <- as.vector(refugia)
# refugeCellNum <- cellNum[simRefugiaBinary]
# if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
#
# # mean refuge abundance
# meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
k <- raster.change(abund, b, stat = c("kappa"))
kappa$kappa[which(kappa$threshold == t)] <- k
# out <- list(
#   simulationScale = raster::stack(refugiaId, abund),
#   refugeCellNum = refugeCellNum,
#   meanRefugeAbund = meanRefugeAbund
# )
# par(mfrow=c(1,2))
# plot(out$simulationScale[[1]], main = paste0('Refugia\n', speciesAb_, '\n', gcm),
#      col = cols, axes = F)
# map("world", add = T)
# plot(out$simulationScale[[2]], main = paste0('Refugia abundance\n', speciesAb_, '\n', gcm),
#      col = cols, axes = F)
# map("world", add = T)
}
k <- raster.change(abund, b, stat = c('kappa'))
k
plot(k)
k <- raster.change(abund, b, stat = c("kappa"), mask = T)
plot( k)
install.packages('psych')
library(psych)
cbind(as.vector(as.matrix(abund)), as.vector(as.matrix(b)))
cohen.kappa(cbind(as.vector(as.matrix(abund)), as.vector(as.matrix(b))))
x <- cohen.kappa(cbind(as.vector(as.matrix(abund)), as.vector(as.matrix(b))))
thresholds <- seq(0.001, 0.003, by = 0.001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
for(t in thresholds) {
refugia <- b >= t
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
# plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
abund <- b * refugia
names(abund) <- 'refugiaAbund'
# nrows <- nrow(b)
# ncols <- ncol(b)
# ncells <- raster::ncell(b)
#
# v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
# cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
# cellNum <- raster::raster(cellNum, template=b)
# cellNum <- as.vector(cellNum)
# simRefugiaBinary <- as.vector(refugia)
# refugeCellNum <- cellNum[simRefugiaBinary]
# if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
#
# # mean refuge abundance
# meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
# k <- raster.change(abund, b, stat = c("kappa"), mask = T)
k <- cohen.kappa(cbind(as.vector(as.matrix(abund)), as.vector(as.matrix(b))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
# out <- list(
#   simulationScale = raster::stack(refugiaId, abund),
#   refugeCellNum = refugeCellNum,
#   meanRefugeAbund = meanRefugeAbund
# )
# par(mfrow=c(1,2))
# plot(out$simulationScale[[1]], main = paste0('Refugia\n', speciesAb_, '\n', gcm),
#      col = cols, axes = F)
# map("world", add = T)
# plot(out$simulationScale[[2]], main = paste0('Refugia abundance\n', speciesAb_, '\n', gcm),
#      col = cols, axes = F)
# map("world", add = T)
}
View(kappa)
thresholds <- seq(0.001, 1, by = 0.001)
kappa <- data.frame('threshold' = thresholds, 'kappa' = NA)
for(t in thresholds) {
refugia <- b >= t
refugiaId <- raster::clump(refugia, directions = 8, gaps = F)
names(refugiaId) <- 'refugiaId'
# plot(refugiaId, main = paste0(names(b),' ', title), axes = F)
abund <- b * refugia
names(abund) <- 'refugiaAbund'
# nrows <- nrow(b)
# ncols <- ncol(b)
# ncells <- raster::ncell(b)
#
# v <- rep(seq(nrows * (ncols - 1) - 1, 1, by=-ncols), each=ncols) + 0:(ncols - 1)
# cellNum <- matrix(v, nrow=nrows, ncol=ncols, byrow=TRUE)
# cellNum <- raster::raster(cellNum, template=b)
# cellNum <- as.vector(cellNum)
# simRefugiaBinary <- as.vector(refugia)
# refugeCellNum <- cellNum[simRefugiaBinary]
# if (any(is.na(refugeCellNum))) refugeCellNum <- refugeCellNum[!is.na(refugeCellNum)]
#
# # mean refuge abundance
# meanRefugeAbund <- raster::cellStats(abund, 'sum') / length(refugeCellNum)
# k <- raster.change(abund, b, stat = c("kappa"), mask = T)
k <- cohen.kappa(cbind(as.vector(as.matrix(abund)), as.vector(as.matrix(b))))
kappa$kappa[which(kappa$threshold == t)] <- k$kappa
# out <- list(
#   simulationScale = raster::stack(refugiaId, abund),
#   refugeCellNum = refugeCellNum,
#   meanRefugeAbund = meanRefugeAbund
# )
# par(mfrow=c(1,2))
# plot(out$simulationScale[[1]], main = paste0('Refugia\n', speciesAb_, '\n', gcm),
#      col = cols, axes = F)
# map("world", add = T)
# plot(out$simulationScale[[2]], main = paste0('Refugia abundance\n', speciesAb_, '\n', gcm),
#      col = cols, axes = F)
# map("world", add = T)
}
View(kappa)
install.packages('ggnewscale')
install.packages('ggforce')
require(rgdal)
require(raster)
require(ggplot2)
require(dplyr)
require(viridis)
require(gridExtra)
require(ggnewscale) # for plotting multiple rasters with different color scales
require(ggforce)  # for using facet_wrap_paginate
# PREDICTIONS FOR SUPPLEMENTARY MATERIAL DOC, MEAN + SD
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
mean <- brick('/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred.tif')
sd <- brick('/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_sdpred.tif')
mean
# extract only time points you want to plot
# create vector of pollen times
time <- c(-70, seq(705, by = 990, length.out = 22))
# extract only time points you want to plot
# create vector of pollen times
time <- c(seq(0, by = 1000, length.out = 22))
# extract only time points you want to plot
# create vector of pollen times
time <- seq(0, 21000, by = 1000)
mean <- unstack(mean)
for_projection <- mean[[1]]
sd <- unstack(sd)
# convert rasterlayers to dataframes for plotting
for(i in 1:length(mean)){
mean[[i]] <- as.data.frame(mean[[i]], xy = TRUE)
names(mean[[i]]) <- c('x', 'y', 'pred')
mean[[i]]$time <- i
mean[[i]]$type <- 'Mean'
}
mean_df <- bind_rows(mean)
for(i in 1:length(sd)){
sd[[i]] <- as.data.frame(sd[[i]], xy = TRUE)
names(sd[[i]]) <- c('x', 'y', 'pred')
sd[[i]]$time <- i
sd[[i]]$type <- 'SD'
}
sd_df <- bind_rows(sd)
# extract ice data at time points you want to plot
stack <- stack('./data_and_analyses/study_region/regions/study_region_daltonIceMask_lakesMasked_linearIceSheetInterpolation.tif')
mask_list <- unstack(stack)
n_times <- length(mask_list)
mask_names <- NA
for(i in 1:n_times){
mask_names[i] <- names(mask_list[[i]])
mask_names[i] <- as.integer(substr(mask_names[i], start = 2, stop = nchar(mask_names[i]))) * 30
}
names(mask_list)
# extract ice data at time points you want to plot
stack <- stack('./data_and_analyses/study_region/regions/study_region_daltonIceMask_lakesMasked_linearIceSheetInterpolation.tif')
mask_list <- unstack(stack)
names(mask_list)
plot(stak)
plot(stack)
names(stack)
rm(list=ls())
library(enmSdm)
library(gtools)
library(ggplot2)
library(cowplot)
library(tidyr)
library(tidyverse)
library(raster)
library(utils)
library(ggrepel)
library(dplyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
gcm <- 'pollen'
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred.tif'
pollenRast <- brick(fileName)
dalton <- stack <- stack('./data_and_analyses/study_region/regions/study_region_daltonIceMask_lakesMasked_linearIceSheetInterpolation.tif')
dalton[[1]]
plot(pollenRast)
for (i in 1:nlayers(dalton)) {
pollenRast[[i]] <- mask(pollenRast[[i]], dalton[[i]])
}
load('./data_and_analyses/study_region/Study Region Extent.Rdata')
studyExtent
pollenRast[[i]] <- crop(pollenRast[[i]], extent(dalton[[i]]))
extent(pollenRast[[i]]) <- extent(dalton[[i]])
dalton[[i]] <- projectRaster(dalton[[i]], pollenRast[[i]])
crs(pollenRast)
dalton[[i]] <- spTransform(dalton[[i]], crs(pollenRast[[i]]))
dalton[[i]] <- project(dalton[[i]], extent(pollenRast[[i]]))
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred.tif'
pollenRast <- stack(fileName)
dalton <- projectRaster(dalton, pollenRast)
pollenRast[[i]] <- mask(pollenRast[[i]], dalton[[i]])
plot(pollenRast[[i]])
for (i in 1:nlayers(dalton)) {
pollenRast[[i]] <- mask(pollenRast[[i]], dalton[[i]])
}
plot(pollenRast)
