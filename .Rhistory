# range_buffer_final the same as calibration region ?
load(paste0('./03 - Modeling Workspace - ', speciesAb_, ' Cleaning'))
range_buffer_final <- as(range_buffer_final, Class = 'Spatial')
calibRegionSpAlb <- range_buffer_final
calibRegionSpAlb <- sp::spTransform(calibRegionSpAlb, getCRS('albersNA', TRUE))
bgTestSpAlb <- spsample(calibRegionSpAlb, n = 11000, type = 'random', iter = 10)
bgTestSp <- sp::spTransform(bgTestSpAlb, getCRS('wgs84', TRUE))
bgTest <- as.data.frame(coordinates(bgTestSp))
names(bgTest) <- ll
calibRegionsSp <- calibRegionSpAlb
rasts <- envData
areas <- area(rasts[[1]])
# extract
thisEnv <- raster::extract(rasts, bgTest)
thisEnv <- as.data.frame(thisEnv)
thisArea <- raster::extract(areas, bgTest)
thisArea <- as.data.frame(thisArea)
names(thisArea) <- 'cellArea_km2'
thisEnv <- cbind(thisArea, thisEnv)
env <- thisEnv
bgTest <- cbind(bgTest, env)
bgTest <- bgTest[complete.cases(bgTest), ]
bgTest <- bgTest[1:min(nrow(bgTest), 10000), ]
bgTestSp <- SpatialPoints(bgTest[ , ll], getCRS('wgs84', TRUE))
bgTestSpAlb <- sp::spTransform(bgTestSp, getCRS('albersNA', TRUE))
predictors <- c('pca1', 'pca2', 'pca3')
trainData <- rbind(records[ ,predictors], randomBg[ ,predictors])
presBg <- c(rep(1, nrow(records)), rep(0, nrow(randomBg)))
# create output directory for model object and rasters
dir.create(paste0('./Models/', speciesAb_, '_Maxent'),
recursive=TRUE, showWarnings=FALSE)
# model species
envModel <- maxnet(p = presBg, data = trainData)
modelFileName <- paste0('./Models/', speciesAb_, '_Maxent/Model.Rdata')
save(envModel, file = modelFileName, compress=TRUE)
# write current raster
envMap <- predict(
climate[[predictors]],
envModel,
filename=paste0('./Models/', speciesAb_, '_Maxent/maxentPredictionBeyer0KYBP'),
clamp = F,
format='GTiff',
overwrite = TRUE,
type='cloglog')
envMapSp <- rasterToPolygons(envMap)
envMapSf <- st_as_sf(envMapSp,
coords = c(x = 'longitude', y = 'latitude'),
crs = getCRS("wgs84", TRUE))
rangeMapSf <- st_transform(st_as_sf(x = range), getCRS('wgs84', TRUE))
recordsSf <- speciesSf <- st_as_sf(x = records,
coords = c(x = 'longitude',
y = 'latitude'),
crs = getCRS('wgs84', TRUE))
world <- ne_countries(scale = "medium", returnclass = "sf")
states <- st_as_sf(ne_states(country = 'united states of america'))
canada <- st_as_sf(ne_states(country = 'canada'))
ggplot(data = world) +
theme_bw() +
geom_sf(fill = "white") +
geom_sf(data = states, fill = NA) +
geom_sf(data = canada, fill = NA) +
geom_sf(data = envMapSf) +
geom_sf(data = rangeMapSf,
color = 'darkgreen',
fill = 'green',
alpha = 0.4,
inherit.aes = FALSE) +
geom_sf(data = recordsSf,
color = 'red',
pch = 16,
cex = 0.4) +
coord_sf(xlim = c(min(records$longitude), max(records$longitude)),
ylim = c(min(records$latitude), max(records$latitude)), expand = TRUE) +
xlab("Longitude") +
ylab("Latitude") +
theme(panel.grid.major = element_line(color = gray(0.5), linetype = "dashed",
size = 0.5), panel.background = element_rect(fill = "lavender"))
plot(littleRange_FraxPenn, border = 'blue', main = paste0("Maxent Output, ", sp))
plot(envMap, add = TRUE)
plot(littleRange_FraxPenn, border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
points(records$longitude, records$latitude, pch = 16, cex = 0.6, col = 'red')
records <- speciesSf_filtered_final # 558 observations
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
rm(list = ls())
library(dplyr)
library(ggplot2)
library(raster)
library(rgdal)
library(enmSdm)
library(terra)
library(maxnet)
library(sf)
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
load('./PCA_Beyer')
ll <- c('longitude', 'latitude')
sp <- 'Fraxinus pennsylvanica'
species <- 'fraxinus_pennsylvanica'
speciesAb <- 'FraxPenn'
speciesAb_ <- 'Frax_Penn'
pcPrediction <- list()
for (i in 1:length(clim)) {
names(clim[[i]]) <- c("bio1", "bio10", "bio11", "bio12", "bio13", "bio14", "bio15", "bio16",
"bio17", "bio18", "bio19", "bio4", "bio5", "bio6", "bio7",
"bio8", "bio9", "cloudiness", "relative_humidity")
pcPrediction[i] <- raster::predict(clim[[i]], pca, index = 1:3)
names(pcPrediction[[i]]) <- paste0("pc", 1:3, "_", (i-1)*1000, "KYBP")
}
envDataPca <- stack(pcPrediction)
# plot(envDataPca)
envPresences <- stack(envDataPca[[1:3]])
names(envPresences) <- paste0('pca', 1:3)
# the projection of these are wgs84
if (file.exists('./data_and_analyses/study_region/Study Region.Rdata') &
file.exists('./data_and_analyses/study_region/Study Region Extent.Rdata')) {
load('./data_and_analyses/study_region/Study Region.Rdata')
load('./data_and_analyses/study_region/Study Region Extent.Rdata')
} else {
studyRegion <- rgdal::readOGR(dsn = './data_and_analyses/study_region', 'study_region')
studyRegion <- crop(studyRegion, extent(-178.2166, 83.7759, -55.90223, 83.6236))
projection(studyRegion) <- getCRS("WGS84")
studyExtent <- extent(studyRegion)
save(studyRegion, file='./data_and_analyses/study_region/Study Region.Rdata', compress=TRUE)
save(studyExtent, file='./data_and_analyses/study_region/Study Region Extent.Rdata', compress=TRUE)
}
fileName <- paste0('./data_and_analyses/env_data/Beyer/envDataClipped_', speciesAb, '.tif')
if (file.exists(fileName)) {
envData <- brick(fileName)
names(envData) <- paste0('pca', 1:3)
} else {
envDataClipped <- list()
for (i in 1:nlayers(envPresences)) {
x <- envPresences[[i]]
x <- crop(x, studyExtent)
x <- mask(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[i]] <- x
envData <- stack(envDataClipped)
plot(envData)
writeRaster(envData, fileName, format = 'GTiff', overwrite = T)
}
records <- paste0('./species_records/02_', species, '_thinned_records.rData')
load(records)
records <- speciesSf_filtered_final # 542 observations
load(records)
records <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(records)
records <- speciesSf_filtered_final # 542 observations
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
View(speciesSf_filtered_final)
library(tidyr)
records <- separate(records, col = geometry, into = c("longitude","latitude"), sep = ",")
records <- separate(records$geometry, into = c("longitude","latitude"), sep = ",")
records$geometry <- gsub("[c()]", "", records$geometry)
records <- separate(records, col = records$geometry, into = c("longitude","latitude"), sep = ",")
View(records)
records <- separate(records, col = geometry, into = c("longitude","latitude"), sep = ",")
records <- data.frame(do.call('rbind', strsplit(records$geometry, ',', fixed = TRUE)))
records <- speciesSf_filtered_final # 542 observations
records$geometry <- gsub("[c()]", "", records$geometry)
within(records, x <- data.frame(do.call('rbind', strsplit(records$geometry, ',', fixed = TRUE))))
records <- separate(data = records, col = geometry, into = c("longitude", "latitude"), sep = "\\,")
records$geometry <- gsub("[c()]", "", records$geometry)
records <- separate(data = records, col = geometry, into = c("longitude", "latitude"), sep = "\\,")
records <- separate(data = records, col = records$geometry, into = c("longitude", "latitude"), sep = "\\,")
records <- separate(data = records, col = as.character(geometry), into = c("longitude", "latitude"), sep = "\\,")
colnames(records$geometry) <- 'latlong'
colnames(records)[23] <- 'latlong'
records <- separate(data = records, col = latlong, into = c("longitude", "latitude"), sep = "\\,")
records <- separate(data = records, col = 'latlong', into = c("longitude", "latitude"), sep = "\\,")
records <- data.frame(speciesSf_filtered_final) # 542 observations
View(records)
records$geometry <- gsub("[c()]", "", records$geometry)
records <- separate(data = records, col = 'latlong', into = c("longitude", "latitude"), sep = "\\,")
records <- separate(data = records, col = 'geometry', into = c("longitude", "latitude"), sep = "\\,")
View(records)
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
envSpecies <- extract(stack(envData), cbind(records$longitude, records$latitude))
fileName <- paste0('./data_and_analyses/env_data/Beyer/envDataClipped_', speciesAb, '.tif')
if (file.exists(fileName)) {
envData <- brick(fileName)
names(envData) <- paste0('pca', 1:3)
} else {
envDataClipped <- list()
for (i in 1:nlayers(envPresences)) {
x <- envPresences[[i]]
x <- crop(x, studyExtent)
x <- mask(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[i]] <- x
envData <- stack(envDataClipped)
plot(envData)
writeRaster(envData, fileName, format = 'GTiff', overwrite = T)
}
envData <- stack(envData)
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
View(envData)
envData <- brick(fileName)
names(envData) <- paste0('pca', 1:3)
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
plot(envData)
envData <- stack(fileName)
names(envData) <- paste0('pca', 1:3)
plot(envData)
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
rm(list = ls())
library(dplyr)
library(ggplot2)
library(tidyr)
library(raster)
library(rgdal)
library(enmSdm)
library(terra)
library(maxnet)
library(sf)
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
load('./PCA_Beyer')
ll <- c('longitude', 'latitude')
sp <- 'Fraxinus pennsylvanica'
species <- 'fraxinus_pennsylvanica'
speciesAb <- 'FraxPenn'
speciesAb_ <- 'Frax_Penn'
pcPrediction <- list()
for (i in 1:length(clim)) {
names(clim[[i]]) <- c("bio1", "bio10", "bio11", "bio12", "bio13", "bio14", "bio15", "bio16",
"bio17", "bio18", "bio19", "bio4", "bio5", "bio6", "bio7",
"bio8", "bio9", "cloudiness", "relative_humidity")
pcPrediction[i] <- raster::predict(clim[[i]], pca, index = 1:3)
names(pcPrediction[[i]]) <- paste0("pc", 1:3, "_", (i-1)*1000, "KYBP")
}
envDataPca <- stack(pcPrediction)
# plot(envDataPca)
envPresences <- stack(envDataPca[[1:3]])
names(envPresences) <- paste0('pca', 1:3)
# the projection of these are wgs84
if (file.exists('./data_and_analyses/study_region/Study Region.Rdata') &
file.exists('./data_and_analyses/study_region/Study Region Extent.Rdata')) {
load('./data_and_analyses/study_region/Study Region.Rdata')
load('./data_and_analyses/study_region/Study Region Extent.Rdata')
} else {
studyRegion <- rgdal::readOGR(dsn = './data_and_analyses/study_region', 'study_region')
studyRegion <- crop(studyRegion, extent(-178.2166, 83.7759, -55.90223, 83.6236))
projection(studyRegion) <- getCRS("WGS84")
studyExtent <- extent(studyRegion)
save(studyRegion, file='./data_and_analyses/study_region/Study Region.Rdata', compress=TRUE)
save(studyExtent, file='./data_and_analyses/study_region/Study Region Extent.Rdata', compress=TRUE)
}
fileName <- paste0('./data_and_analyses/env_data/Beyer/envDataClipped_', speciesAb, '.tif')
if (file.exists(fileName)) {
envData <- stack(fileName)
names(envData) <- paste0('pca', 1:3)
} else {
envDataClipped <- list()
for (i in 1:nlayers(envPresences)) {
x <- envPresences[[i]]
x <- crop(x, studyExtent)
x <- mask(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[i]] <- x
envData <- stack(envDataClipped)
plot(envData)
writeRaster(envData, fileName, format = 'GTiff', overwrite = T)
}
records <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(records)
records <- data.frame(speciesSf_filtered_final) # 542 observations
records$geometry <- gsub("[c()]", "", records$geometry)
records <- separate(data = records,
col = 'geometry',
into = c("longitude", "latitude"),
sep = "\\,")
envSpecies <- extract(envData, cbind(records$longitude, records$latitude))
envSpecies <- raster::extract(envData, cbind(records$longitude, records$latitude))
envData <- brick(fileName)
names(envData) <- paste0('pca', 1:3)
records <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(records)
records <- data.frame(speciesSf_filtered_final) # 542 observations
records$geometry <- gsub("[c()]", "", records$geometry)
records <- separate(data = records,
col = 'geometry',
into = c("longitude", "latitude"),
sep = "\\,")
envSpecies <- raster::extract(envData, cbind(records$longitude, records$latitude))
envSpecies <- raster::extract(envData, cbind(as.character(records$longitude), as.character(records$latitude)))
View(records)
fileName <- paste0('./data_and_analyses/env_data/Beyer/envDataClipped_', speciesAb, '.tif')
if (file.exists(fileName)) {
envData <- brick(fileName)
names(envData) <- paste0('pca', 1:3)
} else {
envDataClipped <- list()
for (i in 1:nlayers(envPresences)) {
x <- envPresences[[i]]
x <- crop(x, studyExtent)
x <- mask(x, studyRegion)
projection(x) <- getCRS("WGS84")
envDataClipped[[i]] <- x
envData <- stack(envDataClipped)
plot(envData)
writeRaster(envData, fileName, format = 'GTiff', overwrite = T)
}
records <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(records)
records <- data.frame(speciesSf_filtered_final) # 542 observations
records$geometry <- gsub("[c()]", "", records$geometry)
records <- separate(data = records,
col = 'geometry',
into = c("longitude", "latitude"),
sep = "\\,")
envSpecies <- raster::extract(envData, cbind(records$longitude, records$latitude))
envSpecies <- raster::extract(envData,
cbind(as.double(records$longitude),
as.double(records$latitude)))
envSpecies <- as.data.frame(envSpecies)
records <- cbind(records, envSpecies)
# records in the water:
if (any(is.na(rowSums(envSpecies)))) water <-
records[which(is.na(rowSums(envSpecies))), ]
# remove records in water from dataset:
if (any(is.na(rowSums(envSpecies)))) records <-
records[-which(is.na(rowSums(envSpecies))), ]
# visualize the points that fall in the water
# convert to sp object
recordsSp <- SpatialPointsDataFrame(records[, ll], data = records,
proj4 = getCRS('wgs84', TRUE))
records$longitude <- as.double(records$longitude)
records$latitude <- as.double(records$latitude)
envSpecies <- raster::extract(envData,
cbind(records$longitude,
records$latitude))
envSpecies <- as.data.frame(envSpecies)
records <- cbind(records, envSpecies)
# records in the water:
if (any(is.na(rowSums(envSpecies)))) water <-
records[which(is.na(rowSums(envSpecies))), ]
# remove records in water from dataset:
if (any(is.na(rowSums(envSpecies)))) records <-
records[-which(is.na(rowSums(envSpecies))), ]
# visualize the points that fall in the water
# convert to sp object
recordsSp <- SpatialPointsDataFrame(records[, ll], data = records,
proj4 = getCRS('wgs84', TRUE))
water <- SpatialPointsDataFrame(water[,ll], data = water,
proj4 = getCRS('wgs84', TRUE))
# records in the water:
if (any(is.na(rowSums(envSpecies)))) water <-
records[which(is.na(rowSums(envSpecies))), ]
# visualize the points that fall in the water
# convert to sp object
recordsSp <- SpatialPointsDataFrame(records[, ll], data = records,
proj4 = getCRS('wgs84', TRUE))
plot(recordsSp, pch = 16, cex = 0.5, col = "red",
main = 'BIEN occurrences thinned')
plot(water, col = 'blue', add = TRUE)
# records in the water:
if (any(is.na(rowSums(envSpecies)))) {
water <- records[which(is.na(rowSums(envSpecies))), ]
water <- SpatialPointsDataFrame(water[,ll], data = water,
proj4 = getCRS('wgs84', TRUE))
}
# remove records in water from dataset:
if (any(is.na(rowSums(envSpecies)))) records <-
records[-which(is.na(rowSums(envSpecies))), ]
# visualize the points that fall in the water
# convert to sp object
recordsSp <- SpatialPointsDataFrame(records[, ll], data = records,
proj4 = getCRS('wgs84', TRUE))
# visualize
plot(recordsSp, pch = 16, cex = 0.5, col = "red",
main = 'BIEN occurrences thinned')
if (exists("water")) {
plot(water, col = 'blue', add = TRUE)
}
rm(water)
# records in the water:
if (any(is.na(rowSums(envSpecies)))) {
water <- records[which(is.na(rowSums(envSpecies))), ]
water <- SpatialPointsDataFrame(water[,ll], data = water,
proj4 = getCRS('wgs84', TRUE))
}
# remove records in water from dataset:
if (any(is.na(rowSums(envSpecies)))) records <-
records[-which(is.na(rowSums(envSpecies))), ]
# visualize the points that fall in the water
# convert to sp object
recordsSp <- SpatialPointsDataFrame(records[, ll], data = records,
proj4 = getCRS('wgs84', TRUE))
# visualize
plot(recordsSp, pch = 16, cex = 0.5, col = "red",
main = 'BIEN occurrences thinned')
if (exists("water")) {
plot(water, col = 'blue', add = TRUE)
}
map("state", add = TRUE)
map("world", add = TRUE)
save.image(paste0('./04 - Modeling Workspace - Clipping ', sp))
# load(paste0('./04 - Modeling Workspace - Clipping ', sp))
climate <- envData
# generate 10,000 background sites
randomBgSites <- randomPoints(climate, 10000)
# extract environment at sites
randomBgEnv <- extract(climate, randomBgSites)
randomBgEnv <- raster::extract(climate, randomBgSites)
randomBgEnv <- as.data.frame(randomBgEnv)
# remove any sites with NA for at least one variable
isNa <- is.na(rowSums(randomBgEnv))
if (any(isNa)) {
randomBgSites <- randomBgSites[-which(isNa), ]
randomBgEnv <- randomBgEnv[-which(isNa), ]
}
# combine with coordinates and rename coordinate fields
randomBg <- cbind(randomBgSites, randomBgEnv)
names(randomBg)[1:2] <- c('longitude', 'latitude')
dir.create('./Background Sites', recursive=TRUE, showWarnings=FALSE)
save(randomBg, file=
'./Background Sites/Random Background Sites across Study Region.Rdata',
compress=TRUE)
# range_buffer_final the same as calibration region ?
load(paste0('./03 - Modeling Workspace - ', speciesAb_, ' Cleaning'))
range_buffer_final <- as(range_buffer_final, Class = 'Spatial')
calibRegionSpAlb <- range_buffer_final
calibRegionSpAlb <- sp::spTransform(calibRegionSpAlb, getCRS('albersNA', TRUE))
bgTestSpAlb <- spsample(calibRegionSpAlb, n = 11000, type = 'random', iter = 10)
bgTestSp <- sp::spTransform(bgTestSpAlb, getCRS('wgs84', TRUE))
bgTest <- as.data.frame(coordinates(bgTestSp))
names(bgTest) <- ll
calibRegionsSp <- calibRegionSpAlb
rasts <- envData
areas <- area(rasts[[1]])
# extract
thisEnv <- raster::extract(rasts, bgTest)
thisEnv <- as.data.frame(thisEnv)
thisArea <- raster::extract(areas, bgTest)
thisArea <- as.data.frame(thisArea)
names(thisArea) <- 'cellArea_km2'
thisEnv <- cbind(thisArea, thisEnv)
env <- thisEnv
bgTest <- cbind(bgTest, env)
bgTest <- bgTest[complete.cases(bgTest), ]
bgTest <- bgTest[1:min(nrow(bgTest), 10000), ]
bgTestSp <- SpatialPoints(bgTest[ , ll], getCRS('wgs84', TRUE))
bgTestSpAlb <- sp::spTransform(bgTestSp, getCRS('albersNA', TRUE))
predictors <- c('pca1', 'pca2', 'pca3')
trainData <- rbind(records[ ,predictors], randomBg[ ,predictors])
presBg <- c(rep(1, nrow(records)), rep(0, nrow(randomBg)))
# create output directory for model object and rasters
dir.create(paste0('./Models/', speciesAb_, '_Maxent'),
recursive=TRUE, showWarnings=FALSE)
# model species
envModel <- maxnet(p = presBg, data = trainData)
modelFileName <- paste0('./Models/', speciesAb_, '_Maxent/Model.Rdata')
save(envModel, file = modelFileName, compress=TRUE)
# write current raster
envMap <- predict(
climate[[predictors]],
envModel,
filename=paste0('./Models/', speciesAb_, '_Maxent/maxentPredictionBeyer0KYBP'),
clamp = F,
format='GTiff',
overwrite = TRUE,
type='cloglog')
envMapSp <- rasterToPolygons(envMap)
envMapSf <- st_as_sf(envMapSp,
coords = c(x = 'longitude', y = 'latitude'),
crs = getCRS("wgs84", TRUE))
rangeMapSf <- st_transform(st_as_sf(x = range), getCRS('wgs84', TRUE))
recordsSf <- speciesSf <- st_as_sf(x = records,
coords = c(x = 'longitude',
y = 'latitude'),
crs = getCRS('wgs84', TRUE))
world <- ne_countries(scale = "medium", returnclass = "sf")
states <- st_as_sf(ne_states(country = 'united states of america'))
canada <- st_as_sf(ne_states(country = 'canada'))
ggplot(data = world) +
theme_bw() +
geom_sf(fill = "white") +
geom_sf(data = states, fill = NA) +
geom_sf(data = canada, fill = NA) +
geom_sf(data = envMapSf) +
geom_sf(data = rangeMapSf,
color = 'darkgreen',
fill = 'green',
alpha = 0.4,
inherit.aes = FALSE) +
geom_sf(data = recordsSf,
color = 'red',
pch = 16,
cex = 0.4) +
coord_sf(xlim = c(min(records$longitude), max(records$longitude)),
ylim = c(min(records$latitude), max(records$latitude)), expand = TRUE) +
xlab("Longitude") +
ylab("Latitude") +
theme(panel.grid.major = element_line(color = gray(0.5), linetype = "dashed",
size = 0.5), panel.background = element_rect(fill = "lavender"))
plot(littleRange_FraxPenn, border = 'blue', main = paste0("Maxent Output, ", sp))
plot(envMap, add = TRUE)
plot(littleRange_FraxPenn, border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
points(records$longitude, records$latitude, pch = 16, cex = 0.6, col = 'red')
save.image(paste0('./05 - Modeling Workspace - ', speciesAb_, ' Model Output'))
# load(paste0('./05 - Modeling Workspace - ', speciesAb_, ' Model Output'))
