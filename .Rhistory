for (i in 1:length(meansSkipList)) {
par(mfrow=c(1,2))
plot(meansSkipList[[i]], main = paste0('MEANS, ', names(meansSkipList[[i]])),
sub = title, col = colors, axes = F)
plot(meansList[[i]], main = paste0('MEANS without sp removed, ', names(meansList[[i]])),
col = colors, axes = F)
}
# plot(stack(meansList))
dev.off()
pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_maxList.pdf'), width = 11, height = 8.5)
for (i in 1:length(maxSkipList)) {
par(mfrow=c(1,2))
plot(maxSkipList[[i]], main = paste0('MAX, ', names(maxSkipList[[i]])),
sub = title, col = colors, axes = F)
plot(maxList[[i]], main = paste0('MAX without sp removed, ', names(maxList[[i]])),
col = colors, axes = F)
}
# plot(stack(maxList))
dev.off()
# pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_sumList.pdf'), width = 11, height = 8.5)
# for (i in 1:length(sumSkipList)) {
#   par(mfrow=c(1,2))
#   plot(sumSkipList[[i]], main = paste0('SUM, ', names(sumSkipList[[i]])),
#        sub = title, col = colors, axes = F)
#   plot(sumList[[i]], main = paste0('SUM, ', names(sumList[[i]])),
#       col = colors, axes = F)
# }
# dev.off()
skip <- skip + 1
}
length(n)
n <- stack(nList)
print(paste0("Line 298, length mnSkip = ", length(n)))
for (j in 1:length(tmp)){
meansSkipList <- list()
maxSkipList <- list()
# sumSkipList <- list()
for(k in 1:length(climYears)) {
nList <- list()
for(m in 1:length(tmp)) {
if(skip != m) { # species to include
# print(names(tmp[[m]][[k]]))
thisRast <- raster::resample(brick(tmp[[m]][[k]]), pollenRast[[i]], method = 'bilinear')
nList <- append(nList, brick(thisRast))
} else { # species to remove
skipped <- speciesList[m]
}
climYear <- climYears[k]
n <- stack(nList)
print(paste0("Line 298, length n = ", nlayers(n)))
mnSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
n[[7]], n[[8]], fun = mean)
names(mnSkip) <- paste0(climYear, ' ybp')
meansSkipList <- append(meansSkipList, mnSkip)
mxSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
n[[7]], n[[9]], fun = max)
names(mxSkip) <- paste0(climYear, ' ybp')
maxSkipList <- append(maxSkipList, mxSkip)
# smSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
#                          n[[7]], fun = sum)
# mask <- n[[1]] * 0 + 1
# sumSkipRasterCorrected <- smSkip * mask
# names(sumSkipRasterCorrected) <- paste0(climYear, ' ybp')
# sumSkipList <- append(sumSkipList, sumSkipRasterCorrected)
}
title <- paste0('Species skipped = ', skipped, ', GCM = ', gcm)
sp <- paste0(substr(skipped,1,4), toupper(substr(skipped,10,10)),
substr(skipped,11,13))
pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_meansList.pdf'),
width = 11, height = 8.5)
for (i in 1:length(meansSkipList)) {
par(mfrow=c(1,2))
plot(meansSkipList[[i]], main = paste0('MEANS, ', names(meansSkipList[[i]])),
sub = title, col = colors, axes = F)
plot(meansList[[i]], main = paste0('MEANS without sp removed, ', names(meansList[[i]])),
col = colors, axes = F)
}
# plot(stack(meansList))
dev.off()
pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_maxList.pdf'), width = 11, height = 8.5)
for (i in 1:length(maxSkipList)) {
par(mfrow=c(1,2))
plot(maxSkipList[[i]], main = paste0('MAX, ', names(maxSkipList[[i]])),
sub = title, col = colors, axes = F)
plot(maxList[[i]], main = paste0('MAX without sp removed, ', names(maxList[[i]])),
col = colors, axes = F)
}
# plot(stack(maxList))
dev.off()
# pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_sumList.pdf'), width = 11, height = 8.5)
# for (i in 1:length(sumSkipList)) {
#   par(mfrow=c(1,2))
#   plot(sumSkipList[[i]], main = paste0('SUM, ', names(sumSkipList[[i]])),
#        sub = title, col = colors, axes = F)
#   plot(sumList[[i]], main = paste0('SUM, ', names(sumList[[i]])),
#       col = colors, axes = F)
# }
# dev.off()
skip <- skip + 1
}
mnSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
n[[7]], n[[8]], fun = mean)
names(mnSkip) <- paste0(climYear, ' ybp')
meansSkipList <- append(meansSkipList, mnSkip)
mxSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
n[[7]], n[[9]], fun = max)
skip <- 1
for (j in 1:length(tmp)){
meansSkipList <- list()
maxSkipList <- list()
# sumSkipList <- list()
for(k in 1:length(climYears)) {
nList <- list()
for(m in 1:length(tmp)) {
if(skip != m) { # species to include
# print(names(tmp[[m]][[k]]))
thisRast <- raster::resample(brick(tmp[[m]][[k]]), pollenRast[[i]], method = 'bilinear')
nList <- append(nList, brick(thisRast))
} else { # species to remove
skipped <- speciesList[m]
}
climYear <- climYears[k]
n <- stack(nList)
mnSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
n[[7]], n[[8]], fun = mean)
names(mnSkip) <- paste0(climYear, ' ybp')
meansSkipList <- append(meansSkipList, mnSkip)
mxSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
n[[7]], n[[8]], fun = max)
names(mxSkip) <- paste0(climYear, ' ybp')
maxSkipList <- append(maxSkipList, mxSkip)
# smSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
#                          n[[7]], fun = sum)
# mask <- n[[1]] * 0 + 1
# sumSkipRasterCorrected <- smSkip * mask
# names(sumSkipRasterCorrected) <- paste0(climYear, ' ybp')
# sumSkipList <- append(sumSkipList, sumSkipRasterCorrected)
}
title <- paste0('Species skipped = ', skipped, ', GCM = ', gcm)
sp <- paste0(substr(skipped,1,4), toupper(substr(skipped,10,10)),
substr(skipped,11,13))
pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_meansList.pdf'),
width = 11, height = 8.5)
for (i in 1:length(meansSkipList)) {
par(mfrow=c(1,2))
plot(meansSkipList[[i]], main = paste0('MEANS, ', names(meansSkipList[[i]])),
sub = title, col = colors, axes = F)
plot(meansList[[i]], main = paste0('MEANS without sp removed, ', names(meansList[[i]])),
col = colors, axes = F)
}
# plot(stack(meansList))
dev.off()
pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_maxList.pdf'), width = 11, height = 8.5)
for (i in 1:length(maxSkipList)) {
par(mfrow=c(1,2))
plot(maxSkipList[[i]], main = paste0('MAX, ', names(maxSkipList[[i]])),
sub = title, col = colors, axes = F)
plot(maxList[[i]], main = paste0('MAX without sp removed, ', names(maxList[[i]])),
col = colors, axes = F)
}
# plot(stack(maxList))
dev.off()
# pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_sumList.pdf'), width = 11, height = 8.5)
# for (i in 1:length(sumSkipList)) {
#   par(mfrow=c(1,2))
#   plot(sumSkipList[[i]], main = paste0('SUM, ', names(sumSkipList[[i]])),
#        sub = title, col = colors, axes = F)
#   plot(sumList[[i]], main = paste0('SUM, ', names(sumList[[i]])),
#       col = colors, axes = F)
# }
# dev.off()
skip <- skip + 1
}
gcmList <- c('Beyer')
library(enmSdm)
library(gtools)
for(gcm in gcmList) {
# load(paste0('./workspaces/06 - ', gcm, ' Projections'))
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvMeans <- bioticVelocity(stackMeansList, times = seq(-21,0, by=1), onlyInSharedCells = T)
bvMeansF <- bioticVelocity(stackMeansList, times = seq(-21,0, by=1), onlyInSharedCells = F)
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvMax <- bioticVelocity(stackMaxList, times = seq(-21,0, by=1), onlyInSharedCells = T)
bvMaxF <- bioticVelocity(stackMaxList, times = seq(-21,0, by=1), onlyInSharedCells = F)
stackSumList <- stack(sumList)
projection(stackSumList) <- getCRS('albersNA')
bvSum <- bioticVelocity(stackSumList, times = seq(-21,0, by=1), onlyInSharedCells = T)
bvSumF <- bioticVelocity(stackSumList, times = seq(-21,0, by=1), onlyInSharedCells = F)
pdf(file = paste0('./predictions/pdf/', gcm, '_bioticVelocity.pdf'), width = 11, height = 8.5)
# no y axes limits
bvMeans$time <- paste0(abs(bvMeans$timeFrom), '-', abs(bvMeans$timeTo), ' kybp')
bvMeans$time <- factor(bvMeans$time, levels = rev(mixedsort(bvMeans$time)))
bvMeansF$time <- paste0(abs(bvMeansF$timeFrom), '-', abs(bvMeansF$timeTo), ' kybp')
bvMeansF$time <- factor(bvMeansF$time, levels = rev(mixedsort(bvMeansF$time)))
ggplot(bvMeans, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("centroid velocity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeansF, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bvMax$time <- paste0(abs(bvMax$timeFrom), '-', abs(bvMax$timeTo), ' kybp')
bvMax$time <- factor(bvMax$time, levels = rev(mixedsort(bvMax$time)))
bvMaxF$time <- paste0(abs(bvMaxF$timeFrom), '-', abs(bvMaxF$timeTo), ' kybp')
bvMaxF$time <- factor(bvMaxF$time, levels = rev(mixedsort(bvMaxF$time)))
ggplot(bvMax, aes(time, centroidVelocity)) + geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("centroid velocity") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMaxF, aes(time, centroidVelocity)) + geom_bar(stat = 'identity') +
ggtitle("Max (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
bvSum$time <- paste0(abs(bvSum$timeFrom), '-', abs(bvSum$timeTo), ' kybp')
bvSum$time <- factor(bvSum$time, levels = rev(mixedsort(bvSum$time)))
bvSumF$time <- paste0(abs(bvSumF$timeFrom), '-', abs(bvSumF$timeTo), ' kybp')
bvSumF$time <- factor(bvSumF$time, levels = rev(mixedsort(bvSumF$time)))
ggplot(bvSum, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Sums") + xlab("time period") + ylab("centroid velocity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvSumF, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Sums (shared cells = F)") + xlab("time period") + ylab("centroid velocity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# all equal y axes limits
# set limits
minBV <- min(c(min(bvMeans$centroidVelocity),
min(bvMax$centroidVelocity),
min(bvSum$centroidVelocity))) - 1000
maxBV <- max(c(max(bvMeans$centroidVelocity),
max(bvMax$centroidVelocity),
max(bvSum$centroidVelocity))) + 1000
ggplot(bvMeans, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvSum, aes(time, centroidVelocity)) +
geom_bar(stat = 'identity') +
ggtitle("Sums") + xlab("time period") + ylab("centroid velocity") +
ylim(0, maxBV) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# NS Quant Velocity
min05 <- min(c(min(bvMeans$nsQuantVelocity_quant0p05),
min(bvMax$nsQuantVelocity_quant0p05),
min(bvSum$nsQuantVelocity_quant0p05))) - 1000
min95 <- min(c(min(bvMeans$nsQuantVelocity_quant0p95),
min(bvMax$nsQuantVelocity_quant0p95),
min(bvSum$nsQuantVelocity_quant0p95))) - 1000
max05 <- max(c(max(bvMeans$nsQuantVelocity_quant0p05),
max(bvMax$nsQuantVelocity_quant0p05),
max(bvSum$nsQuantVelocity_quant0p05))) + 1000
max95 <- max(c(max(bvMeans$nsQuantVelocity_quant0p95),
max(bvMax$nsQuantVelocity_quant0p95),
max(bvSum$nsQuantVelocity_quant0p95))) + 1000
pdf(file = paste0('./predictions/pdf/', gcm, '_nsQuantVelocity.pdf'), width = 11, height = 8.5)
# no y axes limits
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvSum, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvSum, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# all equal y axes limits
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMeans, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Means") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvMax, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Max") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvSum, aes(time, nsQuantVelocity_quant0p05)) +
geom_bar(stat = 'identity') +
ggtitle("Sums") + xlab("time period") + ylab("NS_quant_05") +
ylim(min05, max05) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(bvSum, aes(time, nsQuantVelocity_quant0p95)) +
geom_bar(stat = 'identity') +
ggtitle("Sums") + xlab("time period") + ylab("NS_quant_95") +
ylim(min95, max95) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# save.image(file = paste0('./workspaces/06 - ', gcm, ' Projections'))
}
rm(list = ls())
# Load required packages.
# Load packages
library(enmSdm)
# for handling rasters
library(raster)
library(rgdal)
# library(rgeos) # not used, but may be helpful when debugging
# library(terra)
# library(maxnet)
# visualization tools
library(sp)
library(sf)
library(maps)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
# additional tools
library(tools)
library(units)
library(dplyr)
library(tidyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
--illegal-access=warn
# SDM Template
# Author: Lauren Jenkins
# 25 January 2022
# Last updated: 18 February 2022
rm(list = ls())
# Load required packages.
# Load packages
library(enmSdm)
# for handling rasters
library(raster)
library(rgdal)
# library(rgeos) # not used, but may be helpful when debugging
# library(terra)
# library(maxnet)
# visualization tools
library(sp)
library(sf)
library(maps)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
# additional tools
library(tools)
library(units)
library(dplyr)
library(tidyr)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# nad27
default_crs = sf::st_crs(4267)
# setwd('/Users/laurenjenkins/Documents/MOBOT/PVMvsENM/')
# load('./workspaces/01 - Modeling Workspace - Fraxinus Range Maps (BIEN + Little)')
# set constants
ll <- c('longitude', 'latitude')
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus dipetala', 'Fraxinus greggii', 'Fraxinus nigra',
'Fraxinus pennsylvanica', 'Fraxinus profunda', 'Fraxinus quadrangulata')
pc <- 5
gcmList <- c('Beyer','Lorenz_ccsm')
climYear <- 0
lorenzRast <- raster::raster('./data_and_analyses/env_data/Lorenz/V2/ccsm_21-0k_all_tifs_LJ/0BP/an_avg_ETR.tif')
sp <- speciesList[1]
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
rangeName <- paste0('littleRange_', speciesAb)
load(paste0('./regions/little_range_map/', rangeName, '.Rdata'))
range <- rangeMap
library(dtupdate)
github_update(enmSdm)
github_update(adamlilith/enmSdm)
github_update()
range <- rangeMap
speciesFileName <- paste0('./species_records/01_',
gsub(tolower(species), pattern = ' ',
replacement = '_'), '_retained_records.rds')
if (file.exists(speciesFileName)) {
occs <- readRDS(speciesFileName)
} else {
load(paste0('./species_records/00_',
gsub(tolower(species), pattern = ' ',
replacement = '_'), '_bien_all_occurrences.rda'))
# X occurrences
# remove records without coordinates or dates to ensure locational reliability
occs <- occsRaw[!(is.na(occsRaw$longitude) | is.na(occsRaw$latitude) | is.na(occsRaw$date_collected)), ]
# remove records before 1900
occs$Year <- substr(occs$date_collected, 1, 4)
occs <- occs[occs$Year >= 1900, ]
# X occurrences
# date_collected column is there twice, remove one of them
occs[18] <- NULL
saveRDS(occs, speciesFileName)
}
llOcc <- cbind(occs$longitude, occs$latitude)
coordPrecis <- coordPrecision(llOcc)
precision <- data.frame(llOcc, coordPrecis)
hist(precision$coordPrecis,
breaks=100,
xlab='Coordinate uncertainty (m)',
ylab='Number of records',
main='',
col='red'
)
# Dealing with imprecise coordinates DMS = TRUE.
llOcc <- cbind(occs$longitude, occs$latitude)
coordPrecisDMS <- coordPrecision(llOcc, dms = TRUE)
precision <- data.frame(llOcc, coordPrecisDMS)
hist(precision$coordPrecisDMS,
breaks=100,
xlab='Coord Precision (m)',
ylab='Number of records',
main='',
col='red'
)
# Find the max between two precision measurements and remove occurrences where precision > 1,000m.
pmaxPrecision <- pmax(coordPrecis, coordPrecisDMS)
occs <- data.frame(occs, pmaxPrecision)
print(paste0("Number of occurrences with precision > 1,000 m = ",
length(which(occs$pmaxPrecision > 1000))))
occs <- occs[which(occs$pmaxPrecision <= 1000), ]
# Create spatial object for plotting.
# Map of all observations:
# Convert to spatial object for plotting
par(mfrow=c(1,1))
occsSp <- SpatialPointsDataFrame(occs[, ll], data = occs, proj4 = getCRS('nad27', TRUE))
plot(occsSp, pch = 16, cex = 0.3, col = 'red',
main = "Little range map, all observations not cleaned")
plot(range, col = alpha('blue', 0.4), border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
# Thin data.
thinnedFileName <- paste0('./species_records/02_',
gsub(tolower(species), pattern = ' ',
replacement = '_'), '_thinned_records.rData')
#   if (i > (k + 1)) {
#     break
#   }
# }
#
# thinned <- as.data.frame(do.call(rbind, thinnedFolds))
# thinned <- geoThinApprox(thinned, 1000, c('longitude', 'latitude'))
#
# # finalThinned <- elimCellDups(thinned, raster::raster(), longLat = c('longitude', 'latitude'))
# occsLongLat <- data.frame(longitude = occs$longitude, latitude = occs$latitude)
finalThinned <- elimCellDups(occs, lorenzRast, longLat = c('longitude', 'latitude'))
#   if (i > (k + 1)) {
#     break
#   }
# }
#
# thinned <- as.data.frame(do.call(rbind, thinnedFolds))
# thinned <- geoThinApprox(thinned, 1000, c('longitude', 'latitude'))
#
# # finalThinned <- elimCellDups(thinned, raster::raster(), longLat = c('longitude', 'latitude'))
# occsLongLat <- data.frame(longitude = occs$longitude, latitude = occs$latitude)
finalThinned <- elimCellDups(occs, lorenzRast, longLat = ll)
remove.packages(enmSdm)
remove.packages(adamlilith/enmSdm)
remove.packages('adamlilith/enmSdm')
remove.packages('enmSdm')
library(devtools)
install_github('adamlilith/enmSdm')
library(enmSdm)
#   if (i > (k + 1)) {
#     break
#   }
# }
#
# thinned <- as.data.frame(do.call(rbind, thinnedFolds))
# thinned <- geoThinApprox(thinned, 1000, c('longitude', 'latitude'))
#
# # finalThinned <- elimCellDups(thinned, raster::raster(), longLat = c('longitude', 'latitude'))
# occsLongLat <- data.frame(longitude = occs$longitude, latitude = occs$latitude)
finalThinned <- elimCellDups(occs, lorenzRast, longLat = ll)
