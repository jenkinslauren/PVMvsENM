pdf(file = paste0('./PDF/', gcm, '_predictions_removedSp_mean.pdf'), width = 11, height = 8.5)
for (i in 1:22) {
par(mfrow=c(3,3))
plot(meansList[[i]], main = paste0(gsub('\\X*', '', names(meansList[[i]])), '\nMEANS, ', title),
col = colors, axes = F)
for(j in 1:8) {
t <- gsub('\\.', ' ', gsub('X', '', names(means[[j]][[i]])))
plot(means[[j]][[i]], main = paste0(sub('skipped ', 'skipped =\n', sub('ybp ', 'ybp\n', t))),
col = colors, axes = F)
}
dev.off()
pdf(file = paste0('./PDF/', gcm, '_predictions_removedSp_max.pdf'), width = 11, height = 8.5)
for (i in 1:22) {
par(mfrow=c(3,3))
plot(maxList[[i]], main = paste0(gsub('\\X*', '', names(maxList[[i]])), '\nMAX, ', title),
col = colors, axes = F)
for(j in 1:8) {
t <- gsub('\\.', ' ', gsub('X', '', names(maxes[[j]][[i]])))
plot(maxes[[j]][[i]], main = paste0(sub('skipped ', 'skipped =\n', sub('ybp ', 'ybp\n', t))),
col = colors, axes = F)
}
dev.off()
##############################################################################
rm(list = ls())
# constants
gcmList <- c('Lorenz_ccsm', 'ecbilt', 'Beyer', 'pollen')
pc <- 5
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
# set constants
climYears <- seq(21000, 0, by=-1000)
studyRegionFileName <- './regions/study_region_daltonIceMask_lakesMasked_linearIceSheetInterpolation.tif'
studyRegionRasts <- brick(studyRegionFileName)
pollenRast <- brick('/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred.tif')
pdf(file = './PDF/all_gcm_predictions_means.pdf',
width = 11, height = 8.5)
par(mfrow=c(2,2))
for(a in 1:22) {
for(gcm in gcmList) {
t <- paste0('Fraxinus, \nGCM = ', gcm)
if(gcm == 'pollen') {
# scale values between 0 and 1
mnv <- cellStats(pollenRast[[a]],'min')
mxv <- cellStats(pollenRast[[a]],'max')
pollenRast[[a]] <- (pollenRast[[a]] - mnv) / (mxv - mnv)
plot(pollenRast[[a]], main = paste0(climYears[a], ' ybp,\n', t),
col = colors, axes = F)
} else {
load(paste0('./workspaces/06 - ', gcm, ' Projections'))
# scale values between 0 and 1
mnv <- cellStats(meansList[[a]],'min')
mxv <- cellStats(meansList[[a]],'max')
meansList[[a]] <- (meansList[[a]] - mnv) / (mxv - mnv)
plot(meansList[[a]], main = paste0(sub('\\.', ' ', gsub('\\X*', '', names(meansList[[a]]))), '\nMEANS, ', t),
col = colors, axes = F)
}
dev.off()
pdf(file = './PDF/all_gcm_predictions_max.pdf',
width = 11, height = 8.5)
par(mfrow=c(2,2))
for(a in 1:22) {
for(gcm in gcmList) {
t <- paste0('Fraxinus, \nGCM = ', gcm)
if(gcm == 'pollen') {
# scale values between 0 and 1
mnv <- cellStats(pollenRast[[a]],'min')
mxv <- cellStats(pollenRast[[a]],'max')
pollenRast[[a]] <- (pollenRast[[a]] - mnv) / (mxv - mnv)
plot(pollenRast[[a]], main = paste0(climYears[a], ' ybp,\n', t),
col = colors, axes = F)
} else {
load(paste0('./workspaces/06 - ', gcm, ' Projections'))
# scale values between 0 and 1
mnv <- cellStats(maxList[[a]],'min')
mxv <- cellStats(maxList[[a]],'max')
maxList[[a]] <- (maxList[[a]] - mnv) / (mxv - mnv)
plot(maxList[[a]], main = paste0(sub('\\.', ' ', gsub('\\X*', '', names(maxList[[a]]))), '\nMAX, ', t),
col = colors, axes = F)
}
dev.off()
rm(list = ls())
library(dplyr)
library(ggplot2)
library(tidyr)
library(raster)
library(rgdal)
library(enmSdm)
library(terra)
library(maxnet)
library(sf)
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# constants
gcm <- 'Beyer'
pc <- 5
load(paste0('./workspaces/06 - ', gcm, ' Projections'))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
# set constants
climYears <- seq(21000, 0, by=-1000)
studyRegionFileName <- './regions/study_region_daltonIceMask_lakesMasked_linearIceSheetInterpolation.tif'
studyRegionRasts <- brick(studyRegionFileName)
title <- paste0('Fraxinus, \nGCM = ', gcm)
pdf(file = paste0('./PDF/', gcm, '_predictions_allSp.pdf'), width = 11, height = 8.5)
for(i in 1:22) {
par(mfrow=c(2,5))
plot(meansList[[i]], main = paste0(gsub('\\X*', '', names(meansList[[i]])), '\nMEANS, ', title),
col = colors, axes = F)
plot(maxList[[i]], main = paste0(gsub('\\X*', '', names(maxList[[i]])), '\nMAX, ', title),
col = colors, axes = F)
for(f in fileName) {
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
speciesAb_ <-  gsub('\\_GCM.*', '', gsub(paste0('\\./predictions/', gcm, '/*'), '', f))
load(paste0('./Models/Maxent/model_outputs/', speciesAb_, '_GCM', gcm,
'_PC', pc, '.rData'))
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
title <- str_replace_all(gsub('./*GCM', '\nGCM = ', gsub('.*/', '', s)), '_', ' ')
plot(b[[i]], main = paste0(gsub('\\X*', '', names(b[[i]])),'\n ', title),  col = colors, axes = F)
}
dev.off()
fileName <- list.files(path = paste0('./predictions/', gcm),
pattern = paste0('PC', pc,'.tif'),
full.names = T)
tmp <- list(brick(fileName[[1]]), brick(fileName[[2]]), brick(fileName[[3]]),
brick(fileName[[4]]), brick(fileName[[5]]), brick(fileName[[6]]),
brick(fileName[[7]]), brick(fileName[[8]]))
skip <- 1
means <- maxes <- list()
for (j in 1:length(tmp)){
meansSkipList <- list()
maxSkipList <- list()
for(k in 1:length(climYears)) {
nList <- list()
for(m in 1:length(tmp)) {
if(skip != m) { # species to include
# print(names(tmp[[m]][[k]]))
thisRast <- raster::resample(brick(tmp[[m]][[k]]), pollenRast[[i]], method = 'bilinear')
nList <- append(nList, brick(thisRast))
} else { # species to remove
skipped <- speciesList[m]
}
climYear <- climYears[k]
n <- stack(nList)
mnSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
n[[7]], fun = mean)
names(mnSkip) <- paste0(climYear, ' ybp, Species skipped = ', skipped)
meansSkipList <- append(meansSkipList, mnSkip)
mxSkip <- raster::mosaic(n[[1]], n[[2]], n[[3]], n[[4]], n[[5]], n[[6]],
n[[7]], fun = max)
names(mxSkip) <- paste0(climYear, ' ybp, Species skipped = ', skipped)
maxSkipList <- append(maxSkipList, mxSkip)
}
means <- append(means, stack(meansSkipList))
maxes <- append(maxes, stack(maxSkipList))
# title <- paste0('Species skipped = ', skipped, ', GCM = ', gcm)
# sp <- paste0(substr(skipped,1,4), toupper(substr(skipped,10,10)),
#              substr(skipped,11,13))
# pdf(file = './PDF/predictions_removedSp.pdf', width = 11, height = 8.5)
# for (i in 1:length(meansSkipList)) {
#   par(mfrow=c(1,2))
#   plot(meansSkipList[[i]], main = paste0('MEANS, ', names(meansSkipList[[i]])),
#        sub = title, col = colors, axes = F)
#   plot(meansList[[i]], main = paste0('MEANS without sp removed, ', names(meansList[[i]])),
#        col = colors, axes = F)
# }
# dev.off()
#
# pdf(file = paste0('./predictions/pdf/', gcm, '/No_', sp, '_maxList.pdf'), width = 11, height = 8.5)
# for (i in 1:length(maxSkipList)) {
#   par(mfrow=c(1,2))
#   plot(maxSkipList[[i]], main = paste0('MAX, ', names(maxSkipList[[i]])),
#        sub = title, col = colors, axes = F)
#   plot(maxList[[i]], main = paste0('MAX without sp removed, ', names(maxList[[i]])),
#        col = colors, axes = F)
# }
# dev.off()
skip <- skip + 1
}
title <- paste0('Fraxinus, \nGCM = ', gcm)
pdf(file = paste0('./PDF/', gcm, '_predictions_removedSp_mean.pdf'), width = 11, height = 8.5)
for (i in 1:22) {
par(mfrow=c(3,3))
plot(meansList[[i]], main = paste0(gsub('\\X*', '', names(meansList[[i]])), '\nMEANS, ', title),
col = colors, axes = F)
for(j in 1:8) {
t <- gsub('\\.', ' ', gsub('X', '', names(means[[j]][[i]])))
plot(means[[j]][[i]], main = paste0(sub('skipped ', 'skipped =\n', sub('ybp ', 'ybp\n', t))),
col = colors, axes = F)
}
dev.off()
pdf(file = paste0('./PDF/', gcm, '_predictions_removedSp_max.pdf'), width = 11, height = 8.5)
for (i in 1:22) {
par(mfrow=c(3,3))
plot(maxList[[i]], main = paste0(gsub('\\X*', '', names(maxList[[i]])), '\nMAX, ', title),
col = colors, axes = F)
for(j in 1:8) {
t <- gsub('\\.', ' ', gsub('X', '', names(maxes[[j]][[i]])))
plot(maxes[[j]][[i]], main = paste0(sub('skipped ', 'skipped =\n', sub('ybp ', 'ybp\n', t))),
col = colors, axes = F)
}
dev.off()
##############################################################################
rm(list = ls())
# constants
gcmList <- c('Lorenz_ccsm', 'ecbilt', 'Beyer', 'pollen')
pc <- 5
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
# set constants
climYears <- seq(21000, 0, by=-1000)
studyRegionFileName <- './regions/study_region_daltonIceMask_lakesMasked_linearIceSheetInterpolation.tif'
studyRegionRasts <- brick(studyRegionFileName)
pollenRast <- brick('/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred.tif')
pdf(file = './PDF/all_gcm_predictions_means.pdf',
width = 11, height = 8.5)
par(mfrow=c(2,2))
for(a in 1:22) {
for(gcm in gcmList) {
t <- paste0('Fraxinus, \nGCM = ', gcm)
if(gcm == 'pollen') {
# scale values between 0 and 1
mnv <- cellStats(pollenRast[[a]],'min')
mxv <- cellStats(pollenRast[[a]],'max')
pollenRast[[a]] <- (pollenRast[[a]] - mnv) / (mxv - mnv)
plot(pollenRast[[a]], main = paste0(climYears[a], ' ybp,\n', t),
col = colors, axes = F)
} else {
load(paste0('./workspaces/06 - ', gcm, ' Projections'))
# scale values between 0 and 1
mnv <- cellStats(meansList[[a]],'min')
mxv <- cellStats(meansList[[a]],'max')
meansList[[a]] <- (meansList[[a]] - mnv) / (mxv - mnv)
plot(meansList[[a]], main = paste0(sub('\\.', ' ', gsub('\\X*', '', names(meansList[[a]]))), '\nMEANS, ', t),
col = colors, axes = F)
}
dev.off()
pdf(file = './PDF/all_gcm_predictions_max.pdf',
width = 11, height = 8.5)
par(mfrow=c(2,2))
for(a in 1:22) {
for(gcm in gcmList) {
t <- paste0('Fraxinus, \nGCM = ', gcm)
if(gcm == 'pollen') {
# scale values between 0 and 1
mnv <- cellStats(pollenRast[[a]],'min')
mxv <- cellStats(pollenRast[[a]],'max')
pollenRast[[a]] <- (pollenRast[[a]] - mnv) / (mxv - mnv)
plot(pollenRast[[a]], main = paste0(climYears[a], ' ybp,\n', t),
col = colors, axes = F)
} else {
load(paste0('./workspaces/06 - ', gcm, ' Projections'))
# scale values between 0 and 1
mnv <- cellStats(maxList[[a]],'min')
mxv <- cellStats(maxList[[a]],'max')
maxList[[a]] <- (maxList[[a]] - mnv) / (mxv - mnv)
plot(maxList[[a]], main = paste0(sub('\\.', ' ', gsub('\\X*', '', names(maxList[[a]]))), '\nMAX, ', t),
col = colors, axes = F)
}
dev.off()
rm(list=ls())
library(enmSdm)
library(gtools)
library(ggplot2)
library(cowplot)
library(tidyr)
library(tidyverse)
library(raster)
library(utils)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
gcm <- 'pollen'
fileName <- '/Volumes/GoogleDrive/.shortcut-targets-by-id/0ByjNJEf91IW5SUlEOUJFVGN0Y28/NSF_ABI_2018_2021/data_and_analyses/pg_pollen/matern_overdispersed/predictions-FRAXINUS_meanpred.tif'
pollenRast <- brick(fileName)
pollenStack <- stack(fileName)
projection(pollenStack) <- getCRS('albersNA')
# note: there is no difference in output between onlyInSharedCells = T & F
bvPollen <- bioticVelocity(pollenStack, times = seq(-21000,0, by=1000), onlyInSharedCells = T)
bvPollen$time <- paste0(abs(bvPollen$timeFrom)/1000, '-', abs(bvPollen$timeTo)/1000, ' kybp')
bvPollen$time <- factor(bvPollen$time, levels = rev(mixedsort(bvPollen$time)))
# bvPollen$time <- as.factor(bvPollen$time)
p <- ggplot(bvPollen, aes(x = time, y = centroidVelocity, group = 1)) +
geom_line() + geom_point() +
theme_classic() +
ggtitle("Pollen") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
load(paste0('./workspaces/06 - Beyer Projections'))
# Beyer Means
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvBeyerMeans <- bioticVelocity(stackMeansList, times = seq(-21000, 0, by = 1000), onlyInSharedCells = T)
bvBeyerMeans$time <- paste0(abs(bvBeyerMeans$timeFrom)/1000, '-', abs(bvBeyerMeans$timeTo)/1000, ' kybp')
bvBeyerMeans$time <- factor(bvBeyerMeans$time, levels = rev(mixedsort(bvBeyerMeans$time)))
bMean <- ggplot(bvBeyerMeans, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("Beyer Means") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Beyer Max
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvBeyerMax <- bioticVelocity(stackMaxList, times = seq(-21000,0, by = 1000), onlyInSharedCells = T)
bvBeyerMax$time <- paste0(abs(bvBeyerMax$timeFrom)/1000, '-', abs(bvBeyerMax$timeTo)/1000, ' kybp')
bvBeyerMax$time <- factor(bvBeyerMax$time, levels = rev(mixedsort(bvBeyerMax$time)))
bMax <- ggplot(bvBeyerMax, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("Beyer Max") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
###############################################################################
######### CCSM
###############################################################################
load(paste0('./workspaces/06 - Lorenz_ccsm Projections'))
# Lorenz_ccsm Means
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvCCSMMean <- bioticVelocity(stackMeansList, times = seq(-21000, 0, by = 1000), onlyInSharedCells = T)
bvCCSMMean$time <- paste0(abs(bvCCSMMean$timeFrom)/1000, '-', abs(bvCCSMMean$timeTo)/1000, ' kybp')
bvCCSMMean$time <- factor(bvCCSMMean$time, levels = rev(mixedsort(bvCCSMMean$time)))
cMean <- ggplot(bvCCSMMean, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("CCSM Means") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Lorenz_ccsm Max
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvCCSMMax <- bioticVelocity(stackMaxList, times = seq(-21000,0, by = 1000), onlyInSharedCells = T)
bvCCSMMax$time <- paste0(abs(bvCCSMMax$timeFrom)/1000, '-', abs(bvCCSMMax$timeTo)/1000, ' kybp')
bvCCSMMax$time <- factor(bvCCSMMax$time, levels = rev(mixedsort(bvCCSMMax$time)))
cMax <- ggplot(bvMax, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("CCSM Max") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
###############################################################################
######### ECBILT
###############################################################################
load(paste0('./workspaces/06 - ecbilt Projections'))
# ECBilt Means
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvECBiltMean <- bioticVelocity(stackMeansList, times = seq(-21000, 0, by = 1000), onlyInSharedCells = T)
bvECBiltMean$time <- paste0(abs(bvECBiltMean$timeFrom)/1000, '-', abs(bvECBiltMean$timeTo)/1000, ' kybp')
bvECBiltMean$time <- factor(bvECBiltMean$time, levels = rev(mixedsort(bvECBiltMean$time)))
eMean <- ggplot(bvECBiltMean, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("ECBilt Means") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ECBilt Max
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvECBiltMax <- bioticVelocity(stackMaxList, times = seq(-21000,0, by = 1000), onlyInSharedCells = T)
bvECBiltMax$time <- paste0(abs(bvECBiltMax$timeFrom)/1000, '-', abs(bvECBiltMax$timeTo)/1000, ' kybp')
bvECBiltMax$time <- factor(bvECBiltMax$time, levels = rev(mixedsort(bvECBiltMax$time)))
eMax <- ggplot(bvECBiltMax, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("ECBilt Max") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# bv <- data.frame(bvPollen$time,
#                  bvPollen$centroidVelocity,
#                  bvBeyerMax$centroidVelocity,
#                  bvBeyerMeans$centroidVelocity,
#                  bvCCSMMax$centroidVelocity,
#                  bvCCSMMean$centroidVelocity,
#                  bvECBiltMax$centroidVelocity,
#                  bvECBiltMean$centroidVelocity)
bv <- data.frame(bvPollen$time,
bvBeyerMeans$centroidVelocity,
bvCCSMMean$centroidVelocity,
bvECBiltMean$centroidVelocity)
colnames(bv) <- c("Time", "Beyer", "CCSM", "ECBilt")
bv2 <- cbind(bv[1], utils::stack(bv[2:4]))
colnames(bv2) <- c("Time", "centroidVelocity", "climateSource")
pdf(file = './bv_plots.pdf', height = 8.5, width = 11)
plot_grid(p, bMean, bMax, cMean, cMax, eMean, eMax)
ggplot(bv2, aes(x = Time, y = centroidVelocity, group = climateSource, color = climateSource)) +
geom_point() + geom_line() + theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Biotic Velocity\n", x = "Time Period",
y = "Centroid Velocity (m/yr)", color = "GCM")
dev.off()
rm(list=ls())
library(enmSdm)
library(gtools)
library(ggplot2)
library(cowplot)
library(tidyr)
library(tidyverse)
library(raster)
library(utils)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
gcm <- 'pollen'
fileName <- '/Volumes/lj_mac_22/pollen/predictions-FRAXINUS_meanpred.tif'
pollenRast <- brick(fileName)
pollenStack <- stack(fileName)
projection(pollenStack) <- getCRS('albersNA')
# note: there is no difference in output between onlyInSharedCells = T & F
bvPollen <- bioticVelocity(pollenStack, times = seq(-21000,0, by=1000), onlyInSharedCells = T)
bvPollen$time <- paste0(abs(bvPollen$timeFrom)/1000, '-', abs(bvPollen$timeTo)/1000, ' kybp')
bvPollen$time <- factor(bvPollen$time, levels = rev(mixedsort(bvPollen$time)))
# bvPollen$time <- as.factor(bvPollen$time)
p <- ggplot(bvPollen, aes(x = time, y = centroidVelocity, group = 1)) +
geom_line() + geom_point() +
theme_classic() +
ggtitle("Pollen") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
load(paste0('./workspaces/06 - Beyer Projections'))
# Beyer Means
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvBeyerMeans <- bioticVelocity(stackMeansList, times = seq(-21000, 0, by = 1000), onlyInSharedCells = T)
bvBeyerMeans$time <- paste0(abs(bvBeyerMeans$timeFrom)/1000, '-', abs(bvBeyerMeans$timeTo)/1000, ' kybp')
bvBeyerMeans$time <- factor(bvBeyerMeans$time, levels = rev(mixedsort(bvBeyerMeans$time)))
bMean <- ggplot(bvBeyerMeans, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("Beyer Means") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Beyer Max
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvBeyerMax <- bioticVelocity(stackMaxList, times = seq(-21000,0, by = 1000), onlyInSharedCells = T)
bvBeyerMax$time <- paste0(abs(bvBeyerMax$timeFrom)/1000, '-', abs(bvBeyerMax$timeTo)/1000, ' kybp')
bvBeyerMax$time <- factor(bvBeyerMax$time, levels = rev(mixedsort(bvBeyerMax$time)))
bMax <- ggplot(bvBeyerMax, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("Beyer Max") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
###############################################################################
######### CCSM
###############################################################################
load(paste0('./workspaces/06 - Lorenz_ccsm Projections'))
# Lorenz_ccsm Means
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvCCSMMean <- bioticVelocity(stackMeansList, times = seq(-21000, 0, by = 1000), onlyInSharedCells = T)
bvCCSMMean$time <- paste0(abs(bvCCSMMean$timeFrom)/1000, '-', abs(bvCCSMMean$timeTo)/1000, ' kybp')
bvCCSMMean$time <- factor(bvCCSMMean$time, levels = rev(mixedsort(bvCCSMMean$time)))
cMean <- ggplot(bvCCSMMean, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("CCSM Means") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Lorenz_ccsm Max
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvCCSMMax <- bioticVelocity(stackMaxList, times = seq(-21000,0, by = 1000), onlyInSharedCells = T)
bvCCSMMax$time <- paste0(abs(bvCCSMMax$timeFrom)/1000, '-', abs(bvCCSMMax$timeTo)/1000, ' kybp')
bvCCSMMax$time <- factor(bvCCSMMax$time, levels = rev(mixedsort(bvCCSMMax$time)))
cMax <- ggplot(bvMax, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("CCSM Max") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
###############################################################################
######### ECBILT
###############################################################################
load(paste0('./workspaces/06 - ecbilt Projections'))
# ECBilt Means
stackMeansList <- stack(meansList)
projection(stackMeansList) <- getCRS('albersNA')
bvECBiltMean <- bioticVelocity(stackMeansList, times = seq(-21000, 0, by = 1000), onlyInSharedCells = T)
bvECBiltMean$time <- paste0(abs(bvECBiltMean$timeFrom)/1000, '-', abs(bvECBiltMean$timeTo)/1000, ' kybp')
bvECBiltMean$time <- factor(bvECBiltMean$time, levels = rev(mixedsort(bvECBiltMean$time)))
eMean <- ggplot(bvECBiltMean, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("ECBilt Means") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ECBilt Max
stackMaxList <- stack(maxList)
projection(stackMaxList) <- getCRS('albersNA')
bvECBiltMax <- bioticVelocity(stackMaxList, times = seq(-21000,0, by = 1000), onlyInSharedCells = T)
bvECBiltMax$time <- paste0(abs(bvECBiltMax$timeFrom)/1000, '-', abs(bvECBiltMax$timeTo)/1000, ' kybp')
bvECBiltMax$time <- factor(bvECBiltMax$time, levels = rev(mixedsort(bvECBiltMax$time)))
eMax <- ggplot(bvECBiltMax, aes(time, centroidVelocity, group = 1)) +
geom_point() + geom_line() +
ggtitle("ECBilt Max") + xlab("time period") + ylab("centroid velocity (m/yr)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# bv <- data.frame(bvPollen$time,
#                  bvPollen$centroidVelocity,
#                  bvBeyerMax$centroidVelocity,
#                  bvBeyerMeans$centroidVelocity,
#                  bvCCSMMax$centroidVelocity,
#                  bvCCSMMean$centroidVelocity,
#                  bvECBiltMax$centroidVelocity,
#                  bvECBiltMean$centroidVelocity)
bv <- data.frame(bvPollen$time,
bvBeyerMeans$centroidVelocity,
bvCCSMMean$centroidVelocity,
bvECBiltMean$centroidVelocity)
colnames(bv) <- c("Time", "Beyer", "CCSM", "ECBilt")
bv2 <- cbind(bv[1], utils::stack(bv[2:4]))
colnames(bv2) <- c("Time", "centroidVelocity", "climateSource")
pdf(file = './bv_plots.pdf', height = 8.5, width = 11)
plot_grid(p, bMean, bMax, cMean, cMax, eMean, eMax)
ggplot(bv2, aes(x = Time, y = centroidVelocity, group = climateSource, color = climateSource)) +
geom_point() + geom_line() + theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Biotic Velocity\n", x = "Time Period",
y = "Centroid Velocity (m/yr)", color = "GCM")
dev.off()
