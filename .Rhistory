map("world", add = TRUE)
# use the buffer/calibration region for extracting background sites
calibRegionSpAlb <- as(range_buffer_final, 'Spatial')
calibRegionSpAlb <- sp::spTransform(calibRegionSpAlb, getCRS('albersNA', TRUE))
calibRegionSpWgs <- sp::spTransform(calibRegionSpAlb, getCRS('wgs84', TRUE))
# get 10,000 random background sites from calibration region
bgTestSpAlb <- spsample(calibRegionSpAlb, n=10000, type='random')
bgTestSp <- sp::spTransform(bgTestSpAlb, getCRS('wgs84', TRUE))
bgTest <- as.data.frame(coordinates(bgTestSp))
names(bgTest) <- ll
# sanity check: plot the background sites
plot(bgTestSp, pch = 16, cex = 0.5, col = "red",
main = substitute(paste(italic('Fraxinus pennsylvanica '), 'background sites')))
plot(calibRegionSpWgs, add = TRUE, border = 'blue')
map("state", add = TRUE)
map("world", add = TRUE)
# extract environment at sites
climate <- envData
randomBgEnv <- raster::extract(climate, bgTest)
randomBgEnv <- as.data.frame(randomBgEnv)
# remove any sites with NA for at least one variable
isNa <- is.na(rowSums(randomBgEnv))
if (any(isNa)) {
randomBgSites <- bgTest[-which(isNa), ]
randomBgEnv <- randomBgEnv[-which(isNa), ]
}
# combine with coordinates and rename coordinate fields
randomBg <- cbind(randomBgSites, randomBgEnv)
names(randomBg)[1:2] <- ll
# define presences in background
presBg <- rep(c(1, 0), c(nrow(records), nrow(randomBgSites)))
occsEnv <- raster::extract(envData,
cbind(records$longitude,
records$latitude))
dir.create('./Background Sites', recursive=TRUE, showWarnings=FALSE)
save(randomBg,
file = paste0('./Background Sites/Random Background Sites across Study Region - ',
speciesAb, '.Rdata'),
compress=TRUE)
occsEnv <- raster::extract(envData,
cbind(records$longitude,
records$latitude))
occsEnvDf <- as.data.frame(occsEnv)
records <- cbind(records, occsEnvDf)
env <- rbind(occsEnv, randomBgEnv)
env <- cbind(presBg, env)
env <- as.data.frame(env)
# create output directory for model object and rasters
dir.create(paste0('./Models/', speciesAb_, '_Maxent'),
recursive=TRUE, showWarnings=FALSE)
# model species
envModel <- enmSdm::trainMaxNet(data = env, resp = "presBg")
# envModel <- maxnet(p = presBg, data = trainData)
modelFileName <- paste0('./Models/', speciesAb_, '_Maxent/Model.Rdata')
save(envModel, file = modelFileName, compress=TRUE)
predictors <- c('pca1', 'pca2', 'pca3')
# prediction
envMap <- predict(
climate[[predictors]],
envModel,
filename=paste0('./Models/', speciesAb_, '_Maxent/maxentPredictionBeyer0KYBP'),
clamp = F,
format='GTiff',
overwrite = TRUE,
type='cloglog')
envMapSp <- rasterToPolygons(envMap)
# envMapSf <- st_as_sf(envMapSp,
#                      coords = c(x = 'longitude', y = 'latitude'),
#                       crs = getCRS("wgs84", TRUE))
# rangeMapSf <- st_transform(st_as_sf(x = range), getCRS('wgs84', TRUE))
# recordsSf <- speciesSf <- st_as_sf(x = records,
#                       coords = c(x = 'longitude',
#                                  y = 'latitude'),
#                       crs = getCRS('wgs84', TRUE))
#
# world <- ne_countries(scale = "medium", returnclass = "sf")
# states <- st_as_sf(ne_states(country = 'united states of america'))
# canada <- st_as_sf(ne_states(country = 'canada'))
# sf object doesn't really work
# ggplot(data = world) +
#   theme_bw() +
#   geom_sf(fill = "white") +
#   geom_sf(data = states, fill = NA) +
#   geom_sf(data = canada, fill = NA) +
#   geom_sf(data = envMapSf) +
#   geom_sf(data = rangeMapSf,
#           color = 'darkgreen',
#           fill = 'green',
#           alpha = 0.4,
#           inherit.aes = FALSE) +
#   geom_sf(data = recordsSf,
#           color = 'red',
#           pch = 16,
#           cex = 0.4) +
#   coord_sf(xlim = c(min(records$longitude), max(records$longitude)),
#            ylim = c(min(records$latitude), max(records$latitude)), expand = TRUE) +
#   xlab("Longitude") +
#   ylab("Latitude") +
#   theme(panel.grid.major = element_line(color = gray(0.5), linetype = "dashed",
#                                         size = 0.5), panel.background = element_rect(fill = "lavender"))
plot(rangeMap, border = 'blue', main = substitute(paste('Maxent output, ',
italic('Fraxinus americana '),
'occurrences')))
plot(envMap, add = TRUE)
plot(rangeMap, border = 'blue', add = TRUE)
map("state", add = TRUE)
map("world", add = TRUE)
points(records$longitude, records$latitude, pch = 16, cex = 0.6, col = 'red')
save.image(paste0('./05 - Modeling Workspace - ', speciesAb_, ' Model Output'))
# load(paste0('./05 - Modeling Workspace - ', speciesAb_, ' Model Output'))
rm(list = ls())
library(megaSDM)
library(sf)
ll <- c('longitude', 'latitude')
speciesList <- c('Fraxinus americana', 'Fraxinus caroliniana', 'Fraxinus cuspidata'
,'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda', 'Fraxinus quadrangulata')
input_TA <- list.files('./data_and_analyses/env_data/Beyer/tifs',
pattern = '.tif', full.names = TRUE)
input_TA <- input_TA[!grepl('.*pca_output.*\\.tif', input_TA)]
# where training & study rasters will be printed out to
envoutput <- "megaSDM_TestRun"
# define extent of training & study region
TSEnv <- TrainStudyEnv(input_TA = input_TA,
output = envoutput,
clipTrain = c(-178.2166, 83.7759, -55.90223, 83.6236),
clipStudy = c(-178.2166, 83.7759, -55.90223, 83.6236))
library(raster)
library(rgdal)
# define extent of training & study region
TSEnv <- TrainStudyEnv(input_TA = input_TA,
output = envoutput,
clipTrain = c(-178.2166, 83.7759, -55.90223, 83.6236),
clipStudy = c(-178.2166, 83.7759, -55.90223, 83.6236))
library(dplyr)
library(ggplot2)
library(tidyr)
# define extent of training & study region
TSEnv <- TrainStudyEnv(input_TA = input_TA,
output = envoutput,
clipTrain = c(-178.2166, 83.7759, -55.90223, 83.6236),
clipStudy = c(-178.2166, 83.7759, -55.90223, 83.6236))
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
input_TA <- input_TA[!grepl('.*pca_output.*\\.tif', input_TA)]
input_TA <- list.files('./data_and_analyses/env_data/Beyer/tifs',
pattern = '.tif', full.names = TRUE)
input_TA <- input_TA[!grepl('.*pca_output.*\\.tif', input_TA)]
# where training & study rasters will be printed out to
envoutput <- "megaSDM_TestRun"
# define extent of training & study region
TSEnv <- TrainStudyEnv(input_TA = input_TA,
output = envoutput,
clipTrain = c(-178.2166, 83.7759, -55.90223, 83.6236),
clipStudy = c(-178.2166, 83.7759, -55.90223, 83.6236))
# PredictEnv clips, resamples, and reprojects the past environmental layers to
## match the study region rasters created with TrainStudyEnv.
folders <- list()
for (i in (1:19)[-c(2,3)]) {
folders <- append(folders,
file.path('data_and_analyses','env_data','Beyer','tifs', paste0('BIO', i)))
}
folders <- append(folders,
file.path('data_and_analyses','env_data','Beyer','tifs', 'cloudiness'))
folders <- append(folders,
file.path('data_and_analyses','env_data','Beyer','tifs', 'relative_humidity'))
climYears <- seq(1000, 21000, by=1000)
envList <- list()
envYears <- function(yr) {
return(unlist(sapply(folders, function(folder) {
paste0('./', list.files(folder, pattern = paste0("_", yr, "ybp.tif"), full.names=TRUE))
})))
}
envList <- append(envList, lapply(climYears, envYears))
names <- list()
for (n in length(names(TSEnv$study))){
for(i in (1:21)[-c(2,3)]) {
for (yr in c(0,climYears)) {
if (i == 20) {
names <- append(names, paste0("cloudiness", "_", yr, "ybp"))
} else if (i == 21) {
names <- append(names, paste0("relative_humidity", "_", yr, "ybp"))
} else {
names <- append(names, paste0("BIO", i, "_", yr, "ybp"))
}
names(TSEnv$study) <- c(names)
prediction <- PredictEnv(studylayers = TSEnv$study,
futurelayers = envList,
time_periods = c(0, climYears),
output = envoutput,
scenario_name = "Beyer")
class(TSEnv$training)
length(occlist)
occlist <- list.files('./megaSDM_TestRun', pattern = '.csv', full.names = T)
occ_output <- "./megaSDM_TestRun/occurrences"
length(occlist)
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
View(SpeciesOcc)
SpeciesSplit <- unlist(strsplit(occlist[1], "/", fixed = TRUE))
SpeciesName <- substr(SpeciesSplit[length(SpeciesSplit)], 1,
nchar(SpeciesSplit[length(SpeciesSplit)]) - 4)
SpecCol <- grep(paste0("^", SpeciesName, "$|", "^", gsub("_", " ", SpeciesName), "$"),
SpeciesOcc[1,])
if (length(SpecCol) == 1) {
names(SpeciesOcc)[SpecCol] <- "Species"
} else {
SpeciesOcc$Species <- rep(SpeciesName, nrow(SpeciesOcc))
}
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName)
}
lapply(speciesList, toCSV)
occlist <- list.files('./megaSDM_TestRun', pattern = '.csv', full.names = T)
occ_output <- "./megaSDM_TestRun/occurrences"
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
SpeciesSplit <- unlist(strsplit(occlist[s], "/", fixed = TRUE))
SpeciesSplit <- unlist(strsplit(occlist[1], "/", fixed = TRUE))
SpeciesName <- substr(SpeciesSplit[length(SpeciesSplit)], 1,
nchar(SpeciesSplit[length(SpeciesSplit)]) - 4)
SpecCol <- grep(paste0("^", SpeciesName, "$|", "^", gsub("_", " ", SpeciesName), "$"),
SpeciesOcc[1,])
if (length(SpecCol) == 1) {
names(SpeciesOcc)[SpecCol] <- "Species"
} else {
SpeciesOcc$Species <- rep(SpeciesName, nrow(SpeciesOcc))
}
names(SpeciesOcc)[c(grep("lon", tolower(names(SpeciesOcc))),
grep("^x$", tolower(names(SpeciesOcc))))] <- "Longitude"
names(SpeciesOcc)[c(grep("lat", tolower(names(SpeciesOcc))),
grep("^y$", tolower(names(SpeciesOcc))))] <- "Latitude"
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = F)
}
lapply(speciesList, toCSV)
rm(toCSV)
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = FALSE)
}
lapply(speciesList, toCSV)
toCSV <- function(sp) {
species <- gsub(tolower(sp), pattern=' ', replacement='_')
speciesAb <- paste0(substr(sp,1,4), toupper(substr(sp,10,10)), substr(sp,11,13))
speciesAb_ <- sub("(.{4})(.*)", "\\1_\\2", speciesAb)
recordsRaw <- paste0('./cleaning_records/', species, '_finalRecords.rData')
load(recordsRaw)
fileName <- paste0('./megaSDM_TestRun/', sp, '.csv')
st_write(speciesSf_filtered_final,
fileName,
layer_options = "GEOMETRY=AS_XY",
append = F)
temp <- read.csv(fileName)
colnames(temp)[1:3] <- c('longitude', 'latitude', 'species')
write.csv(temp, fileName, row.names = FALSE)
}
lapply(speciesList, toCSV)
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
occlist <- list.files('./megaSDM_TestRun', pattern = '.csv', full.names = T)
#Reads the occurrence file
SpeciesOcc <- utils::read.csv(occlist[1])
#Determines the species name from the name of the occurrence file
SpeciesSplit <- unlist(strsplit(occlist[1], "/", fixed = TRUE))
SpeciesName <- substr(SpeciesSplit[length(SpeciesSplit)], 1,
nchar(SpeciesSplit[length(SpeciesSplit)]) - 4)
#Matches the species name to the correct column and renames it "Species"
SpecCol <- grep(paste0("^", SpeciesName, "$|", "^", gsub("_", " ", SpeciesName), "$"),
SpeciesOcc[1,])
#Adds a new column with species names if it doesn't already exist
if (length(SpecCol) == 1) {
names(SpeciesOcc)[SpecCol] <- "Species"
} else {
SpeciesOcc$Species <- rep(SpeciesName, nrow(SpeciesOcc))
}
#Matches the lat/long columns and renames them to standardize
names(SpeciesOcc)[c(grep("lon", tolower(names(SpeciesOcc))),
grep("^x$", tolower(names(SpeciesOcc))))] <- "Longitude"
names(SpeciesOcc)[c(grep("lat", tolower(names(SpeciesOcc))),
grep("^y$", tolower(names(SpeciesOcc))))] <- "Latitude"
#Takes only the species name and the coordinates for reprojection
SpeciesCoords <- SpeciesOcc[, c("Species", "Longitude", "Latitude")]
View(SpeciesCoords)
if ((max(SpeciesCoords$Longitude) > 180) | (max(SpeciesCoords$Latitude) > 90) |
(min(SpeciesCoords$Longitude) < -180) | (min(SpeciesCoords$Latitude) < -90)) {
stop("The species occurrence points are not given in latitude/longitude form. Reproject species occurrences to a latlon projection")
} else {
print("All good!")
}
occ_output <- "./megaSDM_TestRun/occurrences"
OccurrenceManagement(occlist = occlist,
output = occ_output,
envextract = TRUE,
envsample = TRUE,
nbins = 25,
envdata = TSEnv$training)
buff_output <- "megaSDM_TestRun/buffers"
BackgroundBuffers(occlist = occlist,
envdata = TSEnv$training,
buff_output,
ncores = 1)
occlist <- list.files(occ_output, pattern = ".csv", full.names = TRUE)
buff_output <- "megaSDM_TestRun/buffers"
BackgroundBuffers(occlist = occlist,
envdata = TSEnv$training,
buff_output,
ncores = 1)
# 10,000 background points
nbg <- 10000
# proportion of the background points sampled from within buffers
spatial_weights <- 0.5
# random or environmentally subsampled (Varela)?
sampleMethods <- "Varela"
bufflist <- list.files(buff_output, pattern = ".shp$", full.names = TRUE)
bg_output <- "megaSDM_TestRun/backgrounds"
BackgroundPoints(spplist = spplist,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 2)
BackgroundPoints(spplist = speciesList,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 1)
# random or environmentally subsampled (Varela)?
sampleMethod <- "Varela"
BackgroundPoints(spplist = speciesList,
envdata = TSEnv$training,
output = bg_output,
nbg = nbg,
spatial_weights = spatial_weights,
buffers = bufflist,
method = sampleMethod,
ncores = 1)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(tidyr)
library(raster)
library(rgdal)
library(enmSdm)
library(terra)
library(maxnet)
library(sf)
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
setwd('/Volumes/LJ MacBook Backup/MOBOT/PVMvsENM')
# load PCA data
load('./PCA_Beyer')
rm(list = ls())
library(dplyr)
library(ggplot2)
library(tidyr)
library(raster)
library(rgdal)
library(enmSdm)
library(terra)
library(maxnet)
library(sf)
library(maps)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
setwd('/Volumes/lj_mac_22/MOBOT/PVMvsENM')
# constants
gcm <- 'Lorenz_ecbilt'
pc <- 5
fileName <- list.files(path = './predictions/',
pattern = paste0(gcm, '_PC', pc,'.tif'),
full.names = T)
# constants
gcm <- 'ecbilt'
fileName <- list.files(path = './predictions/',
pattern = paste0(gcm, '_PC', pc,'.tif'),
full.names = T)
fileName <- list.files(path = './predictions',
pattern = paste0(gcm, '_PC', pc,'.tif'),
full.names = T)
brick(fileName[[1]])
spList <- list.files(path = './predictions',
pattern = paste0(gcm, '_PC', pc,'.tif'))
speciesList <- c('Fraxinus americana','Fraxinus caroliniana', 'Fraxinus cuspidata',
'Fraxinus greggii', 'Fraxinus nigra', 'Fraxinus pennsylvanica',
'Fraxinus profunda','Fraxinus quadrangulata')
spList <- gsub('*..tif', list.files(path = './predictions',
pattern = paste0(gcm, '_PC', pc,'.tif')))
spList <- gsub('.*.tif', '', list.files(path = './predictions',
pattern = paste0(gcm, '_PC', pc,'.tif')))
spList <- gsub('\\..*', '', list.files(path = './predictions',
pattern = paste0(gcm, '_PC', pc,'.tif')))
f <- fileName[1]
s <- gsub('\\..*', '', f)
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
fileName
brick(fileName[1])
plot(brick(fileName[1][[1]]))
for(f in fileName) {
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
pdf(file = paste0('./predictions/pdf/', s, '.pdf'), width = 11, height = 8.5)
b <- brick(f)
for (i in 1:22) {
plot(b[[i]])
}
dev.off()
}
for(f in fileName) {
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
pdf(file = paste0('./predictions/pdf/', s, '.pdf'), width = 11, height = 8.5)
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
for (i in 1:22) {
plot(b[[i]], main <- names(b[[i]]))
}
dev.off()
}
for(f in fileName) {
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
#pdf(file = paste0('./predictions/pdf/', s, '.pdf'), width = 11, height = 8.5)
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
for (i in 1:22) {
print(names(b[[i]]))
plot(b[[i]], main = names(b[[i]]))
}
#dev.off()
}
dev.off()
for(f in fileName) {
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
pdf(file = paste0('./predictions/pdf/', s, '.pdf'), width = 11, height = 8.5)
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
for (i in 1:22) {
plot(b[[i]], main = names(b[[i]]))
}
dev.off()
}
gcm <- Lorenz_ccsm
gcm <- 'Lorenz_ccsm'
fileName <- list.files(path = './predictions',
pattern = paste0(gcm, '_PC', pc,'.tif'),
full.names = T)
for(f in fileName) {
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
pdf(file = paste0('./predictions/pdf/', gcm, '/', s, '.pdf'), width = 11, height = 8.5)
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
for (i in 1:22) {
plot(b[[i]], main = names(b[[i]]))
}
dev.off()
}
gcm <- 'Beyer'
fileName <- list.files(path = './predictions',
pattern = paste0(gcm, '_PC', pc,'.tif'),
full.names = T)
for(f in fileName) {
s <- gsub('\\..*', '', gsub('\\./predictions/*', '', f))
pdf(file = paste0('./predictions/pdf/', gcm, '/', s, '.pdf'), width = 11, height = 8.5)
b <- brick(f)
names(b) <- c(paste0(seq(21000, 0, by = -1000), ' ybp'))
for (i in 1:22) {
plot(b[[i]], main = names(b[[i]]))
}
dev.off()
}
